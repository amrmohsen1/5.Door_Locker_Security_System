
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  000027ee  00002882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080017e  0080017e  000029a0  2**0
                  ALLOC
  3 .stab         00002844  00000000  00000000  000029a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000144f  00000000  00000000  000051e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006633  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000067d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000069c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a156  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b32c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 07 11 	jmp	0x220e	; 0x220e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 be 13 	jmp	0x277c	; 0x277c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 be 13 	jmp	0x277c	; 0x277c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
void compare2Pass(void);
void checkMainPass(void);
void alarmMode(void);

int main()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	c0 55       	subi	r28, 0x50	; 80
     e38:	d0 40       	sbci	r29, 0x00	; 0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType Uart_Configurations={EIGHT_BITS,PARITY_DISABLED,ONE_STOP,9600};
     e44:	9e 01       	movw	r18, r28
     e46:	25 5d       	subi	r18, 0xD5	; 213
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	24 96       	adiw	r28, 0x04	; 4
     e4c:	3f af       	std	Y+63, r19	; 0x3f
     e4e:	2e af       	std	Y+62, r18	; 0x3e
     e50:	24 97       	sbiw	r28, 0x04	; 4
     e52:	86 e7       	ldi	r24, 0x76	; 118
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	26 96       	adiw	r28, 0x06	; 6
     e58:	9f af       	std	Y+63, r25	; 0x3f
     e5a:	8e af       	std	Y+62, r24	; 0x3e
     e5c:	26 97       	sbiw	r28, 0x06	; 6
     e5e:	97 e0       	ldi	r25, 0x07	; 7
     e60:	27 96       	adiw	r28, 0x07	; 7
     e62:	9f af       	std	Y+63, r25	; 0x3f
     e64:	27 97       	sbiw	r28, 0x07	; 7
     e66:	26 96       	adiw	r28, 0x06	; 6
     e68:	ee ad       	ldd	r30, Y+62	; 0x3e
     e6a:	ff ad       	ldd	r31, Y+63	; 0x3f
     e6c:	26 97       	sbiw	r28, 0x06	; 6
     e6e:	00 80       	ld	r0, Z
     e70:	26 96       	adiw	r28, 0x06	; 6
     e72:	2e ad       	ldd	r18, Y+62	; 0x3e
     e74:	3f ad       	ldd	r19, Y+63	; 0x3f
     e76:	26 97       	sbiw	r28, 0x06	; 6
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	26 96       	adiw	r28, 0x06	; 6
     e7e:	3f af       	std	Y+63, r19	; 0x3f
     e80:	2e af       	std	Y+62, r18	; 0x3e
     e82:	26 97       	sbiw	r28, 0x06	; 6
     e84:	24 96       	adiw	r28, 0x04	; 4
     e86:	ee ad       	ldd	r30, Y+62	; 0x3e
     e88:	ff ad       	ldd	r31, Y+63	; 0x3f
     e8a:	24 97       	sbiw	r28, 0x04	; 4
     e8c:	00 82       	st	Z, r0
     e8e:	24 96       	adiw	r28, 0x04	; 4
     e90:	2e ad       	ldd	r18, Y+62	; 0x3e
     e92:	3f ad       	ldd	r19, Y+63	; 0x3f
     e94:	24 97       	sbiw	r28, 0x04	; 4
     e96:	2f 5f       	subi	r18, 0xFF	; 255
     e98:	3f 4f       	sbci	r19, 0xFF	; 255
     e9a:	24 96       	adiw	r28, 0x04	; 4
     e9c:	3f af       	std	Y+63, r19	; 0x3f
     e9e:	2e af       	std	Y+62, r18	; 0x3e
     ea0:	24 97       	sbiw	r28, 0x04	; 4
     ea2:	27 96       	adiw	r28, 0x07	; 7
     ea4:	3f ad       	ldd	r19, Y+63	; 0x3f
     ea6:	27 97       	sbiw	r28, 0x07	; 7
     ea8:	31 50       	subi	r19, 0x01	; 1
     eaa:	27 96       	adiw	r28, 0x07	; 7
     eac:	3f af       	std	Y+63, r19	; 0x3f
     eae:	27 97       	sbiw	r28, 0x07	; 7
     eb0:	27 96       	adiw	r28, 0x07	; 7
     eb2:	8f ad       	ldd	r24, Y+63	; 0x3f
     eb4:	27 97       	sbiw	r28, 0x07	; 7
     eb6:	88 23       	and	r24, r24
     eb8:	b1 f6       	brne	.-84     	; 0xe66 <main+0x38>
	UART_init(&Uart_Configurations);
     eba:	ce 01       	movw	r24, r28
     ebc:	8b 96       	adiw	r24, 0x2b	; 43
     ebe:	0e 94 86 12 	call	0x250c	; 0x250c <UART_init>

	TWI_ConfigType TWI_Configurations={0x01,FAST_MODE};
     ec2:	fe 01       	movw	r30, r28
     ec4:	f2 96       	adiw	r30, 0x32	; 50
     ec6:	29 96       	adiw	r28, 0x09	; 9
     ec8:	ff af       	std	Y+63, r31	; 0x3f
     eca:	ee af       	std	Y+62, r30	; 0x3e
     ecc:	29 97       	sbiw	r28, 0x09	; 9
     ece:	2e e6       	ldi	r18, 0x6E	; 110
     ed0:	31 e0       	ldi	r19, 0x01	; 1
     ed2:	2b 96       	adiw	r28, 0x0b	; 11
     ed4:	3f af       	std	Y+63, r19	; 0x3f
     ed6:	2e af       	std	Y+62, r18	; 0x3e
     ed8:	2b 97       	sbiw	r28, 0x0b	; 11
     eda:	38 e0       	ldi	r19, 0x08	; 8
     edc:	2c 96       	adiw	r28, 0x0c	; 12
     ede:	3f af       	std	Y+63, r19	; 0x3f
     ee0:	2c 97       	sbiw	r28, 0x0c	; 12
     ee2:	2b 96       	adiw	r28, 0x0b	; 11
     ee4:	ee ad       	ldd	r30, Y+62	; 0x3e
     ee6:	ff ad       	ldd	r31, Y+63	; 0x3f
     ee8:	2b 97       	sbiw	r28, 0x0b	; 11
     eea:	00 80       	ld	r0, Z
     eec:	2b 96       	adiw	r28, 0x0b	; 11
     eee:	2e ad       	ldd	r18, Y+62	; 0x3e
     ef0:	3f ad       	ldd	r19, Y+63	; 0x3f
     ef2:	2b 97       	sbiw	r28, 0x0b	; 11
     ef4:	2f 5f       	subi	r18, 0xFF	; 255
     ef6:	3f 4f       	sbci	r19, 0xFF	; 255
     ef8:	2b 96       	adiw	r28, 0x0b	; 11
     efa:	3f af       	std	Y+63, r19	; 0x3f
     efc:	2e af       	std	Y+62, r18	; 0x3e
     efe:	2b 97       	sbiw	r28, 0x0b	; 11
     f00:	29 96       	adiw	r28, 0x09	; 9
     f02:	ee ad       	ldd	r30, Y+62	; 0x3e
     f04:	ff ad       	ldd	r31, Y+63	; 0x3f
     f06:	29 97       	sbiw	r28, 0x09	; 9
     f08:	00 82       	st	Z, r0
     f0a:	29 96       	adiw	r28, 0x09	; 9
     f0c:	2e ad       	ldd	r18, Y+62	; 0x3e
     f0e:	3f ad       	ldd	r19, Y+63	; 0x3f
     f10:	29 97       	sbiw	r28, 0x09	; 9
     f12:	2f 5f       	subi	r18, 0xFF	; 255
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	29 96       	adiw	r28, 0x09	; 9
     f18:	3f af       	std	Y+63, r19	; 0x3f
     f1a:	2e af       	std	Y+62, r18	; 0x3e
     f1c:	29 97       	sbiw	r28, 0x09	; 9
     f1e:	2c 96       	adiw	r28, 0x0c	; 12
     f20:	3f ad       	ldd	r19, Y+63	; 0x3f
     f22:	2c 97       	sbiw	r28, 0x0c	; 12
     f24:	31 50       	subi	r19, 0x01	; 1
     f26:	2c 96       	adiw	r28, 0x0c	; 12
     f28:	3f af       	std	Y+63, r19	; 0x3f
     f2a:	2c 97       	sbiw	r28, 0x0c	; 12
     f2c:	2c 96       	adiw	r28, 0x0c	; 12
     f2e:	8f ad       	ldd	r24, Y+63	; 0x3f
     f30:	2c 97       	sbiw	r28, 0x0c	; 12
     f32:	88 23       	and	r24, r24
     f34:	b1 f6       	brne	.-84     	; 0xee2 <main+0xb4>
	TWI_init(&TWI_Configurations);
     f36:	ce 01       	movw	r24, r28
     f38:	c2 96       	adiw	r24, 0x32	; 50
     f3a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <TWI_init>

	Timer1_ConfigType Timer1_Configuraions={0,7812,F_CPU_1024,COMPARE_MODE};
     f3e:	fe 01       	movw	r30, r28
     f40:	fa 96       	adiw	r30, 0x3a	; 58
     f42:	2e 96       	adiw	r28, 0x0e	; 14
     f44:	ff af       	std	Y+63, r31	; 0x3f
     f46:	ee af       	std	Y+62, r30	; 0x3e
     f48:	2e 97       	sbiw	r28, 0x0e	; 14
     f4a:	28 e6       	ldi	r18, 0x68	; 104
     f4c:	31 e0       	ldi	r19, 0x01	; 1
     f4e:	60 96       	adiw	r28, 0x10	; 16
     f50:	3f af       	std	Y+63, r19	; 0x3f
     f52:	2e af       	std	Y+62, r18	; 0x3e
     f54:	60 97       	sbiw	r28, 0x10	; 16
     f56:	36 e0       	ldi	r19, 0x06	; 6
     f58:	61 96       	adiw	r28, 0x11	; 17
     f5a:	3f af       	std	Y+63, r19	; 0x3f
     f5c:	61 97       	sbiw	r28, 0x11	; 17
     f5e:	60 96       	adiw	r28, 0x10	; 16
     f60:	ee ad       	ldd	r30, Y+62	; 0x3e
     f62:	ff ad       	ldd	r31, Y+63	; 0x3f
     f64:	60 97       	sbiw	r28, 0x10	; 16
     f66:	00 80       	ld	r0, Z
     f68:	60 96       	adiw	r28, 0x10	; 16
     f6a:	2e ad       	ldd	r18, Y+62	; 0x3e
     f6c:	3f ad       	ldd	r19, Y+63	; 0x3f
     f6e:	60 97       	sbiw	r28, 0x10	; 16
     f70:	2f 5f       	subi	r18, 0xFF	; 255
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	60 96       	adiw	r28, 0x10	; 16
     f76:	3f af       	std	Y+63, r19	; 0x3f
     f78:	2e af       	std	Y+62, r18	; 0x3e
     f7a:	60 97       	sbiw	r28, 0x10	; 16
     f7c:	2e 96       	adiw	r28, 0x0e	; 14
     f7e:	ee ad       	ldd	r30, Y+62	; 0x3e
     f80:	ff ad       	ldd	r31, Y+63	; 0x3f
     f82:	2e 97       	sbiw	r28, 0x0e	; 14
     f84:	00 82       	st	Z, r0
     f86:	2e 96       	adiw	r28, 0x0e	; 14
     f88:	2e ad       	ldd	r18, Y+62	; 0x3e
     f8a:	3f ad       	ldd	r19, Y+63	; 0x3f
     f8c:	2e 97       	sbiw	r28, 0x0e	; 14
     f8e:	2f 5f       	subi	r18, 0xFF	; 255
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	2e 96       	adiw	r28, 0x0e	; 14
     f94:	3f af       	std	Y+63, r19	; 0x3f
     f96:	2e af       	std	Y+62, r18	; 0x3e
     f98:	2e 97       	sbiw	r28, 0x0e	; 14
     f9a:	61 96       	adiw	r28, 0x11	; 17
     f9c:	3f ad       	ldd	r19, Y+63	; 0x3f
     f9e:	61 97       	sbiw	r28, 0x11	; 17
     fa0:	31 50       	subi	r19, 0x01	; 1
     fa2:	61 96       	adiw	r28, 0x11	; 17
     fa4:	3f af       	std	Y+63, r19	; 0x3f
     fa6:	61 97       	sbiw	r28, 0x11	; 17
     fa8:	61 96       	adiw	r28, 0x11	; 17
     faa:	8f ad       	ldd	r24, Y+63	; 0x3f
     fac:	61 97       	sbiw	r28, 0x11	; 17
     fae:	88 23       	and	r24, r24
     fb0:	b1 f6       	brne	.-84     	; 0xf5e <main+0x130>
	Timer1_setCallBack(secondsCounting);
     fb2:	80 ee       	ldi	r24, 0xE0	; 224
     fb4:	9b e0       	ldi	r25, 0x0B	; 11
     fb6:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <Timer1_setCallBack>

	DcMotor_Init();
     fba:	0e 94 26 0c 	call	0x184c	; 0x184c <DcMotor_Init>

	Buzzer_init();
     fbe:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Buzzer_init>

	SREG|=(1<<7);
     fc2:	af e5       	ldi	r26, 0x5F	; 95
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ef e5       	ldi	r30, 0x5F	; 95
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 68       	ori	r24, 0x80	; 128
     fce:	8c 93       	st	X, r24


	/* wait for HMI IS READY TO SEND */
	while(UART_recieveByte() != MC1_READY);
     fd0:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
     fd4:	80 31       	cpi	r24, 0x10	; 16
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <main+0x1a2>

	EEPROM_readByte(0x0200,&pass_exist_value);
     fd8:	25 e9       	ldi	r18, 0x95	; 149
     fda:	31 e0       	ldi	r19, 0x01	; 1
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	b9 01       	movw	r22, r18
     fe2:	0e 94 c7 0c 	call	0x198e	; 0x198e <EEPROM_readByte>
	if(pass_exist_value == PASSWORD_IS_EXIST)
     fe6:	80 91 95 01 	lds	r24, 0x0195
     fea:	84 39       	cpi	r24, 0x94	; 148
     fec:	09 f0       	breq	.+2      	; 0xff0 <main+0x1c2>
     fee:	95 c0       	rjmp	.+298    	; 0x111a <main+0x2ec>
	{
		UART_sendByte(PASSWORD_IS_EXIST);
     ff0:	84 e9       	ldi	r24, 0x94	; 148
     ff2:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
		for(counter = 0; counter < 5; counter++)
     ff6:	10 92 7f 01 	sts	0x017F, r1
     ffa:	89 c0       	rjmp	.+274    	; 0x110e <main+0x2e0>
		{
			EEPROM_readByte(0x0300 + counter,&Pass1[counter]);
     ffc:	80 91 7f 01 	lds	r24, 0x017F
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	80 50       	subi	r24, 0x00	; 0
    1006:	9d 4f       	sbci	r25, 0xFD	; 253
    1008:	ac 01       	movw	r20, r24
    100a:	80 91 7f 01 	lds	r24, 0x017F
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9c 01       	movw	r18, r24
    1014:	20 57       	subi	r18, 0x70	; 112
    1016:	3e 4f       	sbci	r19, 0xFE	; 254
    1018:	ca 01       	movw	r24, r20
    101a:	b9 01       	movw	r22, r18
    101c:	0e 94 c7 0c 	call	0x198e	; 0x198e <EEPROM_readByte>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	a0 e2       	ldi	r26, 0x20	; 32
    1026:	b1 e4       	ldi	r27, 0x41	; 65
    1028:	8f a3       	std	Y+39, r24	; 0x27
    102a:	98 a7       	std	Y+40, r25	; 0x28
    102c:	a9 a7       	std	Y+41, r26	; 0x29
    102e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1030:	6f a1       	ldd	r22, Y+39	; 0x27
    1032:	78 a5       	ldd	r23, Y+40	; 0x28
    1034:	89 a5       	ldd	r24, Y+41	; 0x29
    1036:	9a a5       	ldd	r25, Y+42	; 0x2a
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	4a ef       	ldi	r20, 0xFA	; 250
    103e:	54 e4       	ldi	r21, 0x44	; 68
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	8b a3       	std	Y+35, r24	; 0x23
    104a:	9c a3       	std	Y+36, r25	; 0x24
    104c:	ad a3       	std	Y+37, r26	; 0x25
    104e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1050:	6b a1       	ldd	r22, Y+35	; 0x23
    1052:	7c a1       	ldd	r23, Y+36	; 0x24
    1054:	8d a1       	ldd	r24, Y+37	; 0x25
    1056:	9e a1       	ldd	r25, Y+38	; 0x26
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e8       	ldi	r20, 0x80	; 128
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1064:	88 23       	and	r24, r24
    1066:	2c f4       	brge	.+10     	; 0x1072 <main+0x244>
		__ticks = 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9a a3       	std	Y+34, r25	; 0x22
    106e:	89 a3       	std	Y+33, r24	; 0x21
    1070:	3f c0       	rjmp	.+126    	; 0x10f0 <main+0x2c2>
	else if (__tmp > 65535)
    1072:	6b a1       	ldd	r22, Y+35	; 0x23
    1074:	7c a1       	ldd	r23, Y+36	; 0x24
    1076:	8d a1       	ldd	r24, Y+37	; 0x25
    1078:	9e a1       	ldd	r25, Y+38	; 0x26
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	3f ef       	ldi	r19, 0xFF	; 255
    107e:	4f e7       	ldi	r20, 0x7F	; 127
    1080:	57 e4       	ldi	r21, 0x47	; 71
    1082:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1086:	18 16       	cp	r1, r24
    1088:	4c f5       	brge	.+82     	; 0x10dc <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108a:	6f a1       	ldd	r22, Y+39	; 0x27
    108c:	78 a5       	ldd	r23, Y+40	; 0x28
    108e:	89 a5       	ldd	r24, Y+41	; 0x29
    1090:	9a a5       	ldd	r25, Y+42	; 0x2a
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e2       	ldi	r20, 0x20	; 32
    1098:	51 e4       	ldi	r21, 0x41	; 65
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	9a a3       	std	Y+34, r25	; 0x22
    10b0:	89 a3       	std	Y+33, r24	; 0x21
    10b2:	0f c0       	rjmp	.+30     	; 0x10d2 <main+0x2a4>
    10b4:	88 ec       	ldi	r24, 0xC8	; 200
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	98 a3       	std	Y+32, r25	; 0x20
    10ba:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10be:	98 a1       	ldd	r25, Y+32	; 0x20
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <main+0x292>
    10c4:	98 a3       	std	Y+32, r25	; 0x20
    10c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c8:	89 a1       	ldd	r24, Y+33	; 0x21
    10ca:	9a a1       	ldd	r25, Y+34	; 0x22
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	9a a3       	std	Y+34, r25	; 0x22
    10d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d2:	89 a1       	ldd	r24, Y+33	; 0x21
    10d4:	9a a1       	ldd	r25, Y+34	; 0x22
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	69 f7       	brne	.-38     	; 0x10b4 <main+0x286>
    10da:	14 c0       	rjmp	.+40     	; 0x1104 <main+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10dc:	6b a1       	ldd	r22, Y+35	; 0x23
    10de:	7c a1       	ldd	r23, Y+36	; 0x24
    10e0:	8d a1       	ldd	r24, Y+37	; 0x25
    10e2:	9e a1       	ldd	r25, Y+38	; 0x26
    10e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	9a a3       	std	Y+34, r25	; 0x22
    10ee:	89 a3       	std	Y+33, r24	; 0x21
    10f0:	89 a1       	ldd	r24, Y+33	; 0x21
    10f2:	9a a1       	ldd	r25, Y+34	; 0x22
    10f4:	9e 8f       	std	Y+30, r25	; 0x1e
    10f6:	8d 8f       	std	Y+29, r24	; 0x1d
    10f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <main+0x2ce>
    1100:	9e 8f       	std	Y+30, r25	; 0x1e
    1102:	8d 8f       	std	Y+29, r24	; 0x1d

	EEPROM_readByte(0x0200,&pass_exist_value);
	if(pass_exist_value == PASSWORD_IS_EXIST)
	{
		UART_sendByte(PASSWORD_IS_EXIST);
		for(counter = 0; counter < 5; counter++)
    1104:	80 91 7f 01 	lds	r24, 0x017F
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	80 93 7f 01 	sts	0x017F, r24
    110e:	80 91 7f 01 	lds	r24, 0x017F
    1112:	85 30       	cpi	r24, 0x05	; 5
    1114:	08 f4       	brcc	.+2      	; 0x1118 <main+0x2ea>
    1116:	72 cf       	rjmp	.-284    	; 0xffc <main+0x1ce>
    1118:	94 c0       	rjmp	.+296    	; 0x1242 <main+0x414>
		}
	}

	else
	{
		UART_sendByte(PASSWORD_IS_NOT_EXIST);
    111a:	85 e9       	ldi	r24, 0x95	; 149
    111c:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
		do
		{
			receievePass(passToCompare_1);            /* receive first password entered from user */
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <receievePass>

			receievePass(passToCompare_2);            /* receive second password entered from user */
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <receievePass>

			compare2Pass();                           /* compare two password */
    112c:	0e 94 94 0b 	call	0x1728	; 0x1728 <compare2Pass>

			if(password_flag == 0)
    1130:	80 91 7e 01 	lds	r24, 0x017E
    1134:	88 23       	and	r24, r24
    1136:	21 f4       	brne	.+8      	; 0x1140 <main+0x312>
			{
				UART_sendByte(PASSWORD_NOT_SAVED);
    1138:	80 e4       	ldi	r24, 0x40	; 64
    113a:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
    113e:	7c c0       	rjmp	.+248    	; 0x1238 <main+0x40a>
			}

			else
			{
				UART_sendByte(PASSWORD_SAVED);
    1140:	80 e3       	ldi	r24, 0x30	; 48
    1142:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
				EEPROM_writeByte((0x0200),PASSWORD_IS_EXIST);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	64 e9       	ldi	r22, 0x94	; 148
    114c:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_writeByte>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	a0 e2       	ldi	r26, 0x20	; 32
    1156:	b1 e4       	ldi	r27, 0x41	; 65
    1158:	89 8f       	std	Y+25, r24	; 0x19
    115a:	9a 8f       	std	Y+26, r25	; 0x1a
    115c:	ab 8f       	std	Y+27, r26	; 0x1b
    115e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1160:	69 8d       	ldd	r22, Y+25	; 0x19
    1162:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1164:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1166:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	4a ef       	ldi	r20, 0xFA	; 250
    116e:	54 e4       	ldi	r21, 0x44	; 68
    1170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	8d 8b       	std	Y+21, r24	; 0x15
    117a:	9e 8b       	std	Y+22, r25	; 0x16
    117c:	af 8b       	std	Y+23, r26	; 0x17
    117e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1180:	6d 89       	ldd	r22, Y+21	; 0x15
    1182:	7e 89       	ldd	r23, Y+22	; 0x16
    1184:	8f 89       	ldd	r24, Y+23	; 0x17
    1186:	98 8d       	ldd	r25, Y+24	; 0x18
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e8       	ldi	r20, 0x80	; 128
    118e:	5f e3       	ldi	r21, 0x3F	; 63
    1190:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1194:	88 23       	and	r24, r24
    1196:	2c f4       	brge	.+10     	; 0x11a2 <main+0x374>
		__ticks = 1;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	9c 8b       	std	Y+20, r25	; 0x14
    119e:	8b 8b       	std	Y+19, r24	; 0x13
    11a0:	3f c0       	rjmp	.+126    	; 0x1220 <main+0x3f2>
	else if (__tmp > 65535)
    11a2:	6d 89       	ldd	r22, Y+21	; 0x15
    11a4:	7e 89       	ldd	r23, Y+22	; 0x16
    11a6:	8f 89       	ldd	r24, Y+23	; 0x17
    11a8:	98 8d       	ldd	r25, Y+24	; 0x18
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	3f ef       	ldi	r19, 0xFF	; 255
    11ae:	4f e7       	ldi	r20, 0x7F	; 127
    11b0:	57 e4       	ldi	r21, 0x47	; 71
    11b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11b6:	18 16       	cp	r1, r24
    11b8:	4c f5       	brge	.+82     	; 0x120c <main+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ba:	69 8d       	ldd	r22, Y+25	; 0x19
    11bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e2       	ldi	r20, 0x20	; 32
    11c8:	51 e4       	ldi	r21, 0x41	; 65
    11ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	bc 01       	movw	r22, r24
    11d4:	cd 01       	movw	r24, r26
    11d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	9c 8b       	std	Y+20, r25	; 0x14
    11e0:	8b 8b       	std	Y+19, r24	; 0x13
    11e2:	0f c0       	rjmp	.+30     	; 0x1202 <main+0x3d4>
    11e4:	88 ec       	ldi	r24, 0xC8	; 200
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	9a 8b       	std	Y+18, r25	; 0x12
    11ea:	89 8b       	std	Y+17, r24	; 0x11
    11ec:	89 89       	ldd	r24, Y+17	; 0x11
    11ee:	9a 89       	ldd	r25, Y+18	; 0x12
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <main+0x3c2>
    11f4:	9a 8b       	std	Y+18, r25	; 0x12
    11f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f8:	8b 89       	ldd	r24, Y+19	; 0x13
    11fa:	9c 89       	ldd	r25, Y+20	; 0x14
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	9c 8b       	std	Y+20, r25	; 0x14
    1200:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1202:	8b 89       	ldd	r24, Y+19	; 0x13
    1204:	9c 89       	ldd	r25, Y+20	; 0x14
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	69 f7       	brne	.-38     	; 0x11e4 <main+0x3b6>
    120a:	14 c0       	rjmp	.+40     	; 0x1234 <main+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    120c:	6d 89       	ldd	r22, Y+21	; 0x15
    120e:	7e 89       	ldd	r23, Y+22	; 0x16
    1210:	8f 89       	ldd	r24, Y+23	; 0x17
    1212:	98 8d       	ldd	r25, Y+24	; 0x18
    1214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	9c 8b       	std	Y+20, r25	; 0x14
    121e:	8b 8b       	std	Y+19, r24	; 0x13
    1220:	8b 89       	ldd	r24, Y+19	; 0x13
    1222:	9c 89       	ldd	r25, Y+20	; 0x14
    1224:	98 8b       	std	Y+16, r25	; 0x10
    1226:	8f 87       	std	Y+15, r24	; 0x0f
    1228:	8f 85       	ldd	r24, Y+15	; 0x0f
    122a:	98 89       	ldd	r25, Y+16	; 0x10
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <main+0x3fe>
    1230:	98 8b       	std	Y+16, r25	; 0x10
    1232:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
				saveNewPasstoMemory();
    1234:	0e 94 be 0a 	call	0x157c	; 0x157c <saveNewPasstoMemory>
			}
		}while(password_flag == 0);
    1238:	80 91 7e 01 	lds	r24, 0x017E
    123c:	88 23       	and	r24, r24
    123e:	09 f4       	brne	.+2      	; 0x1242 <main+0x414>
    1240:	6f cf       	rjmp	.-290    	; 0x1120 <main+0x2f2>
	}


	while(1)
	{
		UART_sendByte(GO_TO_MAIN_OPTION);
    1242:	80 e9       	ldi	r24, 0x90	; 144
    1244:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
		uart_receive = UART_recieveByte();
    1248:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    124c:	80 93 84 01 	sts	0x0184, r24

		switch(uart_receive)
    1250:	80 91 84 01 	lds	r24, 0x0184
    1254:	e8 2f       	mov	r30, r24
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	22 96       	adiw	r28, 0x02	; 2
    125a:	ff af       	std	Y+63, r31	; 0x3f
    125c:	ee af       	std	Y+62, r30	; 0x3e
    125e:	22 97       	sbiw	r28, 0x02	; 2
    1260:	22 96       	adiw	r28, 0x02	; 2
    1262:	2e ad       	ldd	r18, Y+62	; 0x3e
    1264:	3f ad       	ldd	r19, Y+63	; 0x3f
    1266:	22 97       	sbiw	r28, 0x02	; 2
    1268:	20 38       	cpi	r18, 0x80	; 128
    126a:	31 05       	cpc	r19, r1
    126c:	49 f0       	breq	.+18     	; 0x1280 <main+0x452>
    126e:	22 96       	adiw	r28, 0x02	; 2
    1270:	8e ad       	ldd	r24, Y+62	; 0x3e
    1272:	9f ad       	ldd	r25, Y+63	; 0x3f
    1274:	22 97       	sbiw	r28, 0x02	; 2
    1276:	81 38       	cpi	r24, 0x81	; 129
    1278:	91 05       	cpc	r25, r1
    127a:	09 f4       	brne	.+2      	; 0x127e <main+0x450>
    127c:	59 c0       	rjmp	.+178    	; 0x1330 <main+0x502>
    127e:	e1 cf       	rjmp	.-62     	; 0x1242 <main+0x414>
		{
		case OPEN_DOOR_OPTION:
			pass_fail_counter = 0;
    1280:	10 92 80 01 	sts	0x0180, r1
			do
			{
				receievePass(passToCheck);
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <receievePass>
				checkMainPass();
    128a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <checkMainPass>
				if(password_flag == 0)
    128e:	80 91 7e 01 	lds	r24, 0x017E
    1292:	88 23       	and	r24, r24
    1294:	61 f4       	brne	.+24     	; 0x12ae <main+0x480>
				{
					pass_fail_counter++;
    1296:	80 91 80 01 	lds	r24, 0x0180
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	80 93 80 01 	sts	0x0180, r24
					if(pass_fail_counter < 3)
    12a0:	80 91 80 01 	lds	r24, 0x0180
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	18 f4       	brcc	.+6      	; 0x12ae <main+0x480>
					{
						UART_sendByte(PASSWORD_NOT_MATCHED);
    12a8:	80 e6       	ldi	r24, 0x60	; 96
    12aa:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
					}
				}
			}while((password_flag == 0) && (pass_fail_counter < 3));
    12ae:	80 91 7e 01 	lds	r24, 0x017E
    12b2:	88 23       	and	r24, r24
    12b4:	21 f4       	brne	.+8      	; 0x12be <main+0x490>
    12b6:	80 91 80 01 	lds	r24, 0x0180
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	18 f3       	brcs	.-58     	; 0x1284 <main+0x456>

			if(pass_fail_counter == 3)
    12be:	80 91 80 01 	lds	r24, 0x0180
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	61 f4       	brne	.+24     	; 0x12de <main+0x4b0>
			{
				UART_sendByte(PASS_WRONG_3_TIMES);
    12c6:	86 e9       	ldi	r24, 0x96	; 150
    12c8:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>

				Timer1_init(&Timer1_Configuraions);        /* activate buzzer for 60 sec */
    12cc:	ce 01       	movw	r24, r28
    12ce:	ca 96       	adiw	r24, 0x3a	; 58
    12d0:	0e 94 6d 11 	call	0x22da	; 0x22da <Timer1_init>
				alarmMode();
    12d4:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <alarmMode>
				Timer1_denit();
    12d8:	0e 94 bb 11 	call	0x2376	; 0x2376 <Timer1_denit>
    12dc:	b2 cf       	rjmp	.-156    	; 0x1242 <main+0x414>
			}
			else
			{
				UART_sendByte(PASSWORD_MATCHED);
    12de:	80 e5       	ldi	r24, 0x50	; 80
    12e0:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>

				UART_sendByte(DOOR_IS_UNLOCKING);           /* send this message to HMI TO show IY ON LCD */
    12e4:	83 e9       	ldi	r24, 0x93	; 147
    12e6:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
				Timer1_init(&Timer1_Configuraions);
    12ea:	ce 01       	movw	r24, r28
    12ec:	ca 96       	adiw	r24, 0x3a	; 58
    12ee:	0e 94 6d 11 	call	0x22da	; 0x22da <Timer1_init>
				doorUnlocking();
    12f2:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <doorUnlocking>
				Timer1_denit();
    12f6:	0e 94 bb 11 	call	0x2376	; 0x2376 <Timer1_denit>

				UART_sendByte(DOOR_IS_OPENED);
    12fa:	82 e9       	ldi	r24, 0x92	; 146
    12fc:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
				Timer1_init(&Timer1_Configuraions);
    1300:	ce 01       	movw	r24, r28
    1302:	ca 96       	adiw	r24, 0x3a	; 58
    1304:	0e 94 6d 11 	call	0x22da	; 0x22da <Timer1_init>
				doorStop();
    1308:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <doorStop>
				Timer1_denit();
    130c:	0e 94 bb 11 	call	0x2376	; 0x2376 <Timer1_denit>

				UART_sendByte(DOOR_IS_LOCKING);
    1310:	81 e9       	ldi	r24, 0x91	; 145
    1312:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
				Timer1_init(&Timer1_Configuraions);
    1316:	ce 01       	movw	r24, r28
    1318:	ca 96       	adiw	r24, 0x3a	; 58
    131a:	0e 94 6d 11 	call	0x22da	; 0x22da <Timer1_init>
				doorLocking();
    131e:	0e 94 82 0b 	call	0x1704	; 0x1704 <doorLocking>
				Timer1_denit();
    1322:	0e 94 bb 11 	call	0x2376	; 0x2376 <Timer1_denit>

				DcMotor_Rotate(STOP,0);
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	0e 94 41 0c 	call	0x1882	; 0x1882 <DcMotor_Rotate>
    132e:	89 cf       	rjmp	.-238    	; 0x1242 <main+0x414>
			}
			break;

		case CHANGE_PASS_OPTION:
			pass_fail_counter = 0;
    1330:	10 92 80 01 	sts	0x0180, r1
			do{
				receievePass(passToCheck);
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <receievePass>
				checkMainPass();
    133a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <checkMainPass>
				if(password_flag == 0)
    133e:	80 91 7e 01 	lds	r24, 0x017E
    1342:	88 23       	and	r24, r24
    1344:	61 f4       	brne	.+24     	; 0x135e <main+0x530>
				{
					pass_fail_counter++;
    1346:	80 91 80 01 	lds	r24, 0x0180
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	80 93 80 01 	sts	0x0180, r24
					if(pass_fail_counter<3)
    1350:	80 91 80 01 	lds	r24, 0x0180
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	18 f4       	brcc	.+6      	; 0x135e <main+0x530>
					{
						UART_sendByte(PASSWORD_NOT_MATCHED);
    1358:	80 e6       	ldi	r24, 0x60	; 96
    135a:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
					}
				}
			}while((password_flag == 0) && pass_fail_counter < 3);
    135e:	80 91 7e 01 	lds	r24, 0x017E
    1362:	88 23       	and	r24, r24
    1364:	21 f4       	brne	.+8      	; 0x136e <main+0x540>
    1366:	80 91 80 01 	lds	r24, 0x0180
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	18 f3       	brcs	.-58     	; 0x1334 <main+0x506>

			if(pass_fail_counter == 3)
    136e:	80 91 80 01 	lds	r24, 0x0180
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	61 f4       	brne	.+24     	; 0x138e <main+0x560>
			{
				UART_sendByte(PASS_WRONG_3_TIMES);
    1376:	86 e9       	ldi	r24, 0x96	; 150
    1378:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
				Timer1_init(&Timer1_Configuraions);        /* activate buzzer for 60 sec */
    137c:	ce 01       	movw	r24, r28
    137e:	ca 96       	adiw	r24, 0x3a	; 58
    1380:	0e 94 6d 11 	call	0x22da	; 0x22da <Timer1_init>
				alarmMode();
    1384:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <alarmMode>
				Timer1_denit();
    1388:	0e 94 bb 11 	call	0x2376	; 0x2376 <Timer1_denit>
    138c:	5a cf       	rjmp	.-332    	; 0x1242 <main+0x414>
			}

			else
			{
				UART_sendByte(PASSWORD_MATCHED);
    138e:	80 e5       	ldi	r24, 0x50	; 80
    1390:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
				do
				{
					receievePass(passToCompare_1);
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <receievePass>

					receievePass(passToCompare_2);
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <receievePass>

					compare2Pass();
    13a0:	0e 94 94 0b 	call	0x1728	; 0x1728 <compare2Pass>

					if(password_flag == 0)
    13a4:	80 91 7e 01 	lds	r24, 0x017E
    13a8:	88 23       	and	r24, r24
    13aa:	21 f4       	brne	.+8      	; 0x13b4 <main+0x586>
					{
						UART_sendByte(PASSWORD_NOT_SAVED);
    13ac:	80 e4       	ldi	r24, 0x40	; 64
    13ae:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
    13b2:	7c c0       	rjmp	.+248    	; 0x14ac <main+0x67e>
					}else
					{
						UART_sendByte(PASSWORD_SAVED);
    13b4:	80 e3       	ldi	r24, 0x30	; 48
    13b6:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
						EEPROM_writeByte((0x0200),PASSWORD_IS_EXIST);
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	92 e0       	ldi	r25, 0x02	; 2
    13be:	64 e9       	ldi	r22, 0x94	; 148
    13c0:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_writeByte>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a0 e2       	ldi	r26, 0x20	; 32
    13ca:	b1 e4       	ldi	r27, 0x41	; 65
    13cc:	8b 87       	std	Y+11, r24	; 0x0b
    13ce:	9c 87       	std	Y+12, r25	; 0x0c
    13d0:	ad 87       	std	Y+13, r26	; 0x0d
    13d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13da:	9e 85       	ldd	r25, Y+14	; 0x0e
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4a ef       	ldi	r20, 0xFA	; 250
    13e2:	54 e4       	ldi	r21, 0x44	; 68
    13e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	8f 83       	std	Y+7, r24	; 0x07
    13ee:	98 87       	std	Y+8, r25	; 0x08
    13f0:	a9 87       	std	Y+9, r26	; 0x09
    13f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f4:	6f 81       	ldd	r22, Y+7	; 0x07
    13f6:	78 85       	ldd	r23, Y+8	; 0x08
    13f8:	89 85       	ldd	r24, Y+9	; 0x09
    13fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1408:	88 23       	and	r24, r24
    140a:	2c f4       	brge	.+10     	; 0x1416 <main+0x5e8>
		__ticks = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <main+0x666>
	else if (__tmp > 65535)
    1416:	6f 81       	ldd	r22, Y+7	; 0x07
    1418:	78 85       	ldd	r23, Y+8	; 0x08
    141a:	89 85       	ldd	r24, Y+9	; 0x09
    141c:	9a 85       	ldd	r25, Y+10	; 0x0a
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	3f ef       	ldi	r19, 0xFF	; 255
    1422:	4f e7       	ldi	r20, 0x7F	; 127
    1424:	57 e4       	ldi	r21, 0x47	; 71
    1426:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    142a:	18 16       	cp	r1, r24
    142c:	4c f5       	brge	.+82     	; 0x1480 <main+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1430:	7c 85       	ldd	r23, Y+12	; 0x0c
    1432:	8d 85       	ldd	r24, Y+13	; 0x0d
    1434:	9e 85       	ldd	r25, Y+14	; 0x0e
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	bc 01       	movw	r22, r24
    1448:	cd 01       	movw	r24, r26
    144a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9e 83       	std	Y+6, r25	; 0x06
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <main+0x648>
    1458:	88 ec       	ldi	r24, 0xC8	; 200
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <main+0x636>
    1468:	9c 83       	std	Y+4, r25	; 0x04
    146a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	69 f7       	brne	.-38     	; 0x1458 <main+0x62a>
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <main+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1480:	6f 81       	ldd	r22, Y+7	; 0x07
    1482:	78 85       	ldd	r23, Y+8	; 0x08
    1484:	89 85       	ldd	r24, Y+9	; 0x09
    1486:	9a 85       	ldd	r25, Y+10	; 0x0a
    1488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	8d 83       	std	Y+5, r24	; 0x05
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <main+0x672>
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(10);
						saveNewPasstoMemory();
    14a8:	0e 94 be 0a 	call	0x157c	; 0x157c <saveNewPasstoMemory>
					}
				}while(password_flag == 0);
    14ac:	80 91 7e 01 	lds	r24, 0x017E
    14b0:	88 23       	and	r24, r24
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <main+0x688>
    14b4:	6f cf       	rjmp	.-290    	; 0x1394 <main+0x566>
    14b6:	c5 ce       	rjmp	.-630    	; 0x1242 <main+0x414>

000014b8 <receievePass>:
/*******************************************************************************
 *                              Functions Definitions                           *
 *******************************************************************************/

void receievePass(password_type password_t)
{
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <receievePass+0xa>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <receievePass+0xc>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count;

	uart_receive = UART_recieveByte();
    14ca:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    14ce:	80 93 84 01 	sts	0x0184, r24
	while(uart_receive != MC1_READY);
    14d2:	80 91 84 01 	lds	r24, 0x0184
    14d6:	80 31       	cpi	r24, 0x10	; 16
    14d8:	e1 f7       	brne	.-8      	; 0x14d2 <receievePass+0x1a>

	switch (password_t) {
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	3c 83       	std	Y+4, r19	; 0x04
    14e2:	2b 83       	std	Y+3, r18	; 0x03
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	91 05       	cpc	r25, r1
    14ec:	d9 f0       	breq	.+54     	; 0x1524 <receievePass+0x6c>
    14ee:	2b 81       	ldd	r18, Y+3	; 0x03
    14f0:	3c 81       	ldd	r19, Y+4	; 0x04
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	41 f1       	breq	.+80     	; 0x1548 <receievePass+0x90>
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	a9 f5       	brne	.+106    	; 0x156a <receievePass+0xb2>
		case passToCompare_1:
			for(count=0; count<5;count++)
    1500:	19 82       	std	Y+1, r1	; 0x01
    1502:	0c c0       	rjmp	.+24     	; 0x151c <receievePass+0x64>
			{
				Pass1[count]=UART_recieveByte();
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	08 2f       	mov	r16, r24
    1508:	10 e0       	ldi	r17, 0x00	; 0
    150a:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    150e:	f8 01       	movw	r30, r16
    1510:	e0 57       	subi	r30, 0x70	; 112
    1512:	fe 4f       	sbci	r31, 0xFE	; 254
    1514:	80 83       	st	Z, r24
	uart_receive = UART_recieveByte();
	while(uart_receive != MC1_READY);

	switch (password_t) {
		case passToCompare_1:
			for(count=0; count<5;count++)
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	8f 5f       	subi	r24, 0xFF	; 255
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	85 30       	cpi	r24, 0x05	; 5
    1520:	88 f3       	brcs	.-30     	; 0x1504 <receievePass+0x4c>
    1522:	23 c0       	rjmp	.+70     	; 0x156a <receievePass+0xb2>
			{
				Pass1[count]=UART_recieveByte();
			}
			break;
		case passToCompare_2:
			for(count=0; count<5;count++)
    1524:	19 82       	std	Y+1, r1	; 0x01
    1526:	0c c0       	rjmp	.+24     	; 0x1540 <receievePass+0x88>
			{
				Pass2[count]=UART_recieveByte();
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	08 2f       	mov	r16, r24
    152c:	10 e0       	ldi	r17, 0x00	; 0
    152e:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    1532:	f8 01       	movw	r30, r16
    1534:	ea 57       	subi	r30, 0x7A	; 122
    1536:	fe 4f       	sbci	r31, 0xFE	; 254
    1538:	80 83       	st	Z, r24
			{
				Pass1[count]=UART_recieveByte();
			}
			break;
		case passToCompare_2:
			for(count=0; count<5;count++)
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	85 30       	cpi	r24, 0x05	; 5
    1544:	88 f3       	brcs	.-30     	; 0x1528 <receievePass+0x70>
    1546:	11 c0       	rjmp	.+34     	; 0x156a <receievePass+0xb2>
			{
				Pass2[count]=UART_recieveByte();
			}
			break;
		case passToCheck:
			for(count=0; count<5;count++)
    1548:	19 82       	std	Y+1, r1	; 0x01
    154a:	0c c0       	rjmp	.+24     	; 0x1564 <receievePass+0xac>
			{
				main_option_pass[count]=UART_recieveByte();
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	08 2f       	mov	r16, r24
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    1556:	f8 01       	movw	r30, r16
    1558:	e5 57       	subi	r30, 0x75	; 117
    155a:	fe 4f       	sbci	r31, 0xFE	; 254
    155c:	80 83       	st	Z, r24
			{
				Pass2[count]=UART_recieveByte();
			}
			break;
		case passToCheck:
			for(count=0; count<5;count++)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	85 30       	cpi	r24, 0x05	; 5
    1568:	88 f3       	brcs	.-30     	; 0x154c <receievePass+0x94>
			{
				main_option_pass[count]=UART_recieveByte();
			}
			break;
	}
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <saveNewPasstoMemory>:

void saveNewPasstoMemory(void)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	2f 97       	sbiw	r28, 0x0f	; 15
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
	uint8 count=0;
    1590:	1f 86       	std	Y+15, r1	; 0x0f

	for(count=0; count<5;count++)
    1592:	1f 86       	std	Y+15, r1	; 0x0f
    1594:	86 c0       	rjmp	.+268    	; 0x16a2 <saveNewPasstoMemory+0x126>
	{
		EEPROM_writeByte((0x0300+count),Pass1[count]);
    1596:	8f 85       	ldd	r24, Y+15	; 0x0f
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	80 50       	subi	r24, 0x00	; 0
    159e:	9d 4f       	sbci	r25, 0xFD	; 253
    15a0:	ac 01       	movw	r20, r24
    15a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	fc 01       	movw	r30, r24
    15aa:	e0 57       	subi	r30, 0x70	; 112
    15ac:	fe 4f       	sbci	r31, 0xFE	; 254
    15ae:	20 81       	ld	r18, Z
    15b0:	ca 01       	movw	r24, r20
    15b2:	62 2f       	mov	r22, r18
    15b4:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_writeByte>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a0 e2       	ldi	r26, 0x20	; 32
    15be:	b1 e4       	ldi	r27, 0x41	; 65
    15c0:	8b 87       	std	Y+11, r24	; 0x0b
    15c2:	9c 87       	std	Y+12, r25	; 0x0c
    15c4:	ad 87       	std	Y+13, r26	; 0x0d
    15c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    15cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	4a ef       	ldi	r20, 0xFA	; 250
    15d6:	54 e4       	ldi	r21, 0x44	; 68
    15d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	8f 83       	std	Y+7, r24	; 0x07
    15e2:	98 87       	std	Y+8, r25	; 0x08
    15e4:	a9 87       	std	Y+9, r26	; 0x09
    15e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ea:	78 85       	ldd	r23, Y+8	; 0x08
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	2c f4       	brge	.+10     	; 0x160a <saveNewPasstoMemory+0x8e>
		__ticks = 1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
    1608:	3f c0       	rjmp	.+126    	; 0x1688 <saveNewPasstoMemory+0x10c>
	else if (__tmp > 65535)
    160a:	6f 81       	ldd	r22, Y+7	; 0x07
    160c:	78 85       	ldd	r23, Y+8	; 0x08
    160e:	89 85       	ldd	r24, Y+9	; 0x09
    1610:	9a 85       	ldd	r25, Y+10	; 0x0a
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	3f ef       	ldi	r19, 0xFF	; 255
    1616:	4f e7       	ldi	r20, 0x7F	; 127
    1618:	57 e4       	ldi	r21, 0x47	; 71
    161a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    161e:	18 16       	cp	r1, r24
    1620:	4c f5       	brge	.+82     	; 0x1674 <saveNewPasstoMemory+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1622:	6b 85       	ldd	r22, Y+11	; 0x0b
    1624:	7c 85       	ldd	r23, Y+12	; 0x0c
    1626:	8d 85       	ldd	r24, Y+13	; 0x0d
    1628:	9e 85       	ldd	r25, Y+14	; 0x0e
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e2       	ldi	r20, 0x20	; 32
    1630:	51 e4       	ldi	r21, 0x41	; 65
    1632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	0f c0       	rjmp	.+30     	; 0x166a <saveNewPasstoMemory+0xee>
    164c:	88 ec       	ldi	r24, 0xC8	; 200
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9c 83       	std	Y+4, r25	; 0x04
    1652:	8b 83       	std	Y+3, r24	; 0x03
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <saveNewPasstoMemory+0xdc>
    165c:	9c 83       	std	Y+4, r25	; 0x04
    165e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1660:	8d 81       	ldd	r24, Y+5	; 0x05
    1662:	9e 81       	ldd	r25, Y+6	; 0x06
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	9e 83       	std	Y+6, r25	; 0x06
    1668:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	69 f7       	brne	.-38     	; 0x164c <saveNewPasstoMemory+0xd0>
    1672:	14 c0       	rjmp	.+40     	; 0x169c <saveNewPasstoMemory+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1674:	6f 81       	ldd	r22, Y+7	; 0x07
    1676:	78 85       	ldd	r23, Y+8	; 0x08
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9e 83       	std	Y+6, r25	; 0x06
    1686:	8d 83       	std	Y+5, r24	; 0x05
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	9a 83       	std	Y+2, r25	; 0x02
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <saveNewPasstoMemory+0x118>
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	89 83       	std	Y+1, r24	; 0x01

void saveNewPasstoMemory(void)
{
	uint8 count=0;

	for(count=0; count<5;count++)
    169c:	8f 85       	ldd	r24, Y+15	; 0x0f
    169e:	8f 5f       	subi	r24, 0xFF	; 255
    16a0:	8f 87       	std	Y+15, r24	; 0x0f
    16a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a4:	85 30       	cpi	r24, 0x05	; 5
    16a6:	08 f4       	brcc	.+2      	; 0x16aa <saveNewPasstoMemory+0x12e>
    16a8:	76 cf       	rjmp	.-276    	; 0x1596 <saveNewPasstoMemory+0x1a>
	{
		EEPROM_writeByte((0x0300+count),Pass1[count]);
		_delay_ms(10);
	}
}
    16aa:	2f 96       	adiw	r28, 0x0f	; 15
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <doorUnlocking>:

void doorUnlocking(void)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
	second_counter=0;
    16c4:	10 92 81 01 	sts	0x0181, r1
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <doorUnlocking+0x16>
	while(second_counter != 15)
	{
		DcMotor_Rotate(CW,100);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	64 e6       	ldi	r22, 0x64	; 100
    16ce:	0e 94 41 0c 	call	0x1882	; 0x1882 <DcMotor_Rotate>
}

void doorUnlocking(void)
{
	second_counter=0;
	while(second_counter != 15)
    16d2:	80 91 81 01 	lds	r24, 0x0181
    16d6:	8f 30       	cpi	r24, 0x0F	; 15
    16d8:	c1 f7       	brne	.-16     	; 0x16ca <doorUnlocking+0xe>
	{
		DcMotor_Rotate(CW,100);
	}
}
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <doorStop>:

void doorStop(void)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
	second_counter=0;
    16e8:	10 92 81 01 	sts	0x0181, r1
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <doorStop+0x16>
	while(second_counter != 3)
	{
		DcMotor_Rotate(STOP,0);
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	0e 94 41 0c 	call	0x1882	; 0x1882 <DcMotor_Rotate>
}

void doorStop(void)
{
	second_counter=0;
	while(second_counter != 3)
    16f6:	80 91 81 01 	lds	r24, 0x0181
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	c1 f7       	brne	.-16     	; 0x16ee <doorStop+0xe>
	{
		DcMotor_Rotate(STOP,0);
	}
}
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <doorLocking>:

void doorLocking(void)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
	second_counter=0;
    170c:	10 92 81 01 	sts	0x0181, r1
    1710:	04 c0       	rjmp	.+8      	; 0x171a <doorLocking+0x16>
	while(second_counter != 15)
	{
		DcMotor_Rotate(A_CW,100);
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	64 e6       	ldi	r22, 0x64	; 100
    1716:	0e 94 41 0c 	call	0x1882	; 0x1882 <DcMotor_Rotate>
}

void doorLocking(void)
{
	second_counter=0;
	while(second_counter != 15)
    171a:	80 91 81 01 	lds	r24, 0x0181
    171e:	8f 30       	cpi	r24, 0x0F	; 15
    1720:	c1 f7       	brne	.-16     	; 0x1712 <doorLocking+0xe>
	{
		DcMotor_Rotate(A_CW,100);
	}
}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <compare2Pass>:

void compare2Pass(void)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	0f 92       	push	r0
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	uint8 counter;
	password_flag = 1;                       /* assume two password are matched until one number differs */
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	80 93 7e 01 	sts	0x017E, r24
	for(counter=0; counter<5 ;counter++)
    1738:	19 82       	std	Y+1, r1	; 0x01
    173a:	15 c0       	rjmp	.+42     	; 0x1766 <compare2Pass+0x3e>
	{
		if(Pass1[counter] != Pass2[counter])
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	fc 01       	movw	r30, r24
    1744:	e0 57       	subi	r30, 0x70	; 112
    1746:	fe 4f       	sbci	r31, 0xFE	; 254
    1748:	20 81       	ld	r18, Z
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	ea 57       	subi	r30, 0x7A	; 122
    1754:	fe 4f       	sbci	r31, 0xFE	; 254
    1756:	80 81       	ld	r24, Z
    1758:	28 17       	cp	r18, r24
    175a:	11 f0       	breq	.+4      	; 0x1760 <compare2Pass+0x38>
		{
			password_flag = 0;
    175c:	10 92 7e 01 	sts	0x017E, r1

void compare2Pass(void)
{
	uint8 counter;
	password_flag = 1;                       /* assume two password are matched until one number differs */
	for(counter=0; counter<5 ;counter++)
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	8f 5f       	subi	r24, 0xFF	; 255
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	85 30       	cpi	r24, 0x05	; 5
    176a:	40 f3       	brcs	.-48     	; 0x173c <compare2Pass+0x14>
		if(Pass1[counter] != Pass2[counter])
		{
			password_flag = 0;
		}
	}
}
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <checkMainPass>:

void checkMainPass(void){
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	uint8 counter;
	password_flag = 1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 93 7e 01 	sts	0x017E, r24
	for(counter=0; counter<5 ;counter++)
    1784:	19 82       	std	Y+1, r1	; 0x01
    1786:	15 c0       	rjmp	.+42     	; 0x17b2 <checkMainPass+0x3e>
	{
		if(Pass1[counter] != main_option_pass[counter])
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	fc 01       	movw	r30, r24
    1790:	e0 57       	subi	r30, 0x70	; 112
    1792:	fe 4f       	sbci	r31, 0xFE	; 254
    1794:	20 81       	ld	r18, Z
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	fc 01       	movw	r30, r24
    179e:	e5 57       	subi	r30, 0x75	; 117
    17a0:	fe 4f       	sbci	r31, 0xFE	; 254
    17a2:	80 81       	ld	r24, Z
    17a4:	28 17       	cp	r18, r24
    17a6:	11 f0       	breq	.+4      	; 0x17ac <checkMainPass+0x38>
		{
			password_flag = 0;
    17a8:	10 92 7e 01 	sts	0x017E, r1
}

void checkMainPass(void){
	uint8 counter;
	password_flag = 1;
	for(counter=0; counter<5 ;counter++)
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	85 30       	cpi	r24, 0x05	; 5
    17b6:	40 f3       	brcs	.-48     	; 0x1788 <checkMainPass+0x14>
		if(Pass1[counter] != main_option_pass[counter])
		{
			password_flag = 0;
		}
	}
}
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <secondsCounting>:

void secondsCounting(void)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
	 second_counter++;
    17c8:	80 91 81 01 	lds	r24, 0x0181
    17cc:	8f 5f       	subi	r24, 0xFF	; 255
    17ce:	80 93 81 01 	sts	0x0181, r24
}
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <alarmMode>:

void alarmMode(void)
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
	Buzzer_on();
    17e0:	0e 94 0e 0c 	call	0x181c	; 0x181c <Buzzer_on>
	second_counter=0;
    17e4:	10 92 81 01 	sts	0x0181, r1
	while(second_counter !=60);
    17e8:	80 91 81 01 	lds	r24, 0x0181
    17ec:	8c 33       	cpi	r24, 0x3C	; 60
    17ee:	e1 f7       	brne	.-8      	; 0x17e8 <alarmMode+0x10>
	Buzzer_off();
    17f0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <Buzzer_off>
}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <Buzzer_init>:
 * Description :
 * Setup the direction for the buzzer pin as output pin through GPIO driver.
 * Turn off the buzzer through the GPIO.
 */
void Buzzer_init()
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	67 e0       	ldi	r22, 0x07	; 7
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	67 e0       	ldi	r22, 0x07	; 7
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>

}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <Buzzer_on>:
/*
 * Description :
 * Function to enable the buzzer through the GPIO.
 */
void Buzzer_on(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    1824:	83 e0       	ldi	r24, 0x03	; 3
    1826:	67 e0       	ldi	r22, 0x07	; 7
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>

}
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <Buzzer_off>:
/*
 * Description :
 * Function to disable the buzzer through the GPIO.
 */
void Buzzer_off(void)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	67 e0       	ldi	r22, 0x07	; 7
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>

}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <DcMotor_Init>:
 * Description:
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	/* Set PB0,PB1 (OUTPUT PINS) (IN1,IN2) */
	GPIO_setupPinDirection(DC_Motor_PORT_ID,DC_Motor_IN1_ID,PIN_OUTPUT);
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_Motor_PORT_ID,DC_Motor_IN2_ID,PIN_OUTPUT);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <GPIO_setupPinDirection>

	/* Stop  DC-Motor at the beginning */
	GPIO_writePin(DC_Motor_PORT_ID,DC_Motor_IN1_ID,LOGIC_LOW);
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>
	GPIO_writePin(DC_Motor_PORT_ID,DC_Motor_IN2_ID,LOGIC_LOW);
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>

}
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <DcMotor_Rotate>:
 * Description:
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <DcMotor_Rotate+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <DcMotor_Rotate+0x8>
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	6a 83       	std	Y+2, r22	; 0x02

	switch(state)
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	3c 83       	std	Y+4, r19	; 0x04
    189a:	2b 83       	std	Y+3, r18	; 0x03
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	91 05       	cpc	r25, r1
    18a4:	a1 f0       	breq	.+40     	; 0x18ce <DcMotor_Rotate+0x4c>
    18a6:	2b 81       	ldd	r18, Y+3	; 0x03
    18a8:	3c 81       	ldd	r19, Y+4	; 0x04
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	d1 f0       	breq	.+52     	; 0x18e4 <DcMotor_Rotate+0x62>
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	01 f5       	brne	.+64     	; 0x18f8 <DcMotor_Rotate+0x76>
	{
	 case STOP:
		 /* STOP THE MOTOR PB0,PB1=0 (IN1,IN2 ARE LOW) */
		 GPIO_writePin(DC_Motor_PORT_ID,DC_Motor_IN1_ID,LOGIC_LOW);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>
		 GPIO_writePin(DC_Motor_PORT_ID,DC_Motor_IN2_ID,LOGIC_LOW);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>
    18cc:	15 c0       	rjmp	.+42     	; 0x18f8 <DcMotor_Rotate+0x76>
		 break;

	 case CW:
		 /* Rotate THE MOTOR clockwise PB0=0,PB1=1 (IN1=LOW, IN2=HIGH ) */
		 GPIO_writePin(DC_Motor_PORT_ID,DC_Motor_IN1_ID,LOGIC_LOW);
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>
		 GPIO_writePin(DC_Motor_PORT_ID,DC_Motor_IN2_ID,LOGIC_HIGH);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>
    18e2:	0a c0       	rjmp	.+20     	; 0x18f8 <DcMotor_Rotate+0x76>
		 break;
	 case A_CW:
		 /* Rotate THE MOTOR Anti-clockwise PB0=1,PB1=0 (IN1=HIGH, IN2=LOW ) */
		 GPIO_writePin(DC_Motor_PORT_ID,DC_Motor_IN1_ID,LOGIC_HIGH);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>
		 GPIO_writePin(DC_Motor_PORT_ID,DC_Motor_IN2_ID,LOGIC_LOW);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <GPIO_writePin>
		 break;
	}


	PWM_Timer0_Start(speed);
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	0e 94 95 10 	call	0x212a	; 0x212a <PWM_Timer0_Start>
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <EEPROM_writeByte>:
/*
 * Description:
 * Function responsible to write byte in External EEPROM memory location.
 */
uint8 EEPROM_writeByte(uint16 u16address,uint8 u8data)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <EEPROM_writeByte+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <EEPROM_writeByte+0x8>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	9a 83       	std	Y+2, r25	; 0x02
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	6b 83       	std	Y+3, r22	; 0x03
	/* SEND Start bit */
	TWI_start();
    191e:	0e 94 1f 12 	call	0x243e	; 0x243e <TWI_start>
	if(TWI_getStatus() != TWI_START)
    1922:	0e 94 77 12 	call	0x24ee	; 0x24ee <TWI_getStatus>
    1926:	88 30       	cpi	r24, 0x08	; 8
    1928:	11 f0       	breq	.+4      	; 0x192e <EEPROM_writeByte+0x22>
		return ERROR;
    192a:	1c 82       	std	Y+4, r1	; 0x04
    192c:	28 c0       	rjmp	.+80     	; 0x197e <EEPROM_writeByte+0x72>

	/*  Send device address (0x1010)
	 * + we need to get A8,A9,A10 address bits from memory location address
	 * + R/W =0 (write)
	 */
	TWI_writeByte((uint8)(((u16address & 0x0700)>>7) |0xA0));
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	80 70       	andi	r24, 0x00	; 0
    1934:	97 70       	andi	r25, 0x07	; 7
    1936:	88 0f       	add	r24, r24
    1938:	89 2f       	mov	r24, r25
    193a:	88 1f       	adc	r24, r24
    193c:	99 0b       	sbc	r25, r25
    193e:	91 95       	neg	r25
    1940:	80 6a       	ori	r24, 0xA0	; 160
    1942:	0e 94 3a 12 	call	0x2474	; 0x2474 <TWI_writeByte>
	if(TWI_getStatus()!=TWI_MT_SLA_W_ACK)
    1946:	0e 94 77 12 	call	0x24ee	; 0x24ee <TWI_getStatus>
    194a:	88 31       	cpi	r24, 0x18	; 24
    194c:	11 f0       	breq	.+4      	; 0x1952 <EEPROM_writeByte+0x46>
		return ERROR;
    194e:	1c 82       	std	Y+4, r1	; 0x04
    1950:	16 c0       	rjmp	.+44     	; 0x197e <EEPROM_writeByte+0x72>

	/* send the required memory location ( first 8 bits )*/
	TWI_writeByte((uint8)(u16address));
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	0e 94 3a 12 	call	0x2474	; 0x2474 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    1958:	0e 94 77 12 	call	0x24ee	; 0x24ee <TWI_getStatus>
    195c:	88 32       	cpi	r24, 0x28	; 40
    195e:	11 f0       	breq	.+4      	; 0x1964 <EEPROM_writeByte+0x58>
		return ERROR;
    1960:	1c 82       	std	Y+4, r1	; 0x04
    1962:	0d c0       	rjmp	.+26     	; 0x197e <EEPROM_writeByte+0x72>

	/* write byte in eeprom */
	TWI_writeByte(u8data);
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	0e 94 3a 12 	call	0x2474	; 0x2474 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    196a:	0e 94 77 12 	call	0x24ee	; 0x24ee <TWI_getStatus>
    196e:	88 32       	cpi	r24, 0x28	; 40
    1970:	11 f0       	breq	.+4      	; 0x1976 <EEPROM_writeByte+0x6a>
		return ERROR;
    1972:	1c 82       	std	Y+4, r1	; 0x04
    1974:	04 c0       	rjmp	.+8      	; 0x197e <EEPROM_writeByte+0x72>

	/* Send the Stop bit */
	TWI_stop();
    1976:	0e 94 2f 12 	call	0x245e	; 0x245e <TWI_stop>

	return SUCCESS;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	8c 83       	std	Y+4, r24	; 0x04
    197e:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <EEPROM_readByte>:
 * Description:
 * Function responsible to read byte from EEPROM memory location.
 */

uint8 EEPROM_readByte(uint16 u16address,uint8 *u8data)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <EEPROM_readByte+0x6>
    1994:	00 d0       	rcall	.+0      	; 0x1996 <EEPROM_readByte+0x8>
    1996:	0f 92       	push	r0
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	7c 83       	std	Y+4, r23	; 0x04
    19a2:	6b 83       	std	Y+3, r22	; 0x03
	/* SEND Start bit */
	TWI_start();
    19a4:	0e 94 1f 12 	call	0x243e	; 0x243e <TWI_start>
	if(TWI_getStatus()!=TWI_START)
    19a8:	0e 94 77 12 	call	0x24ee	; 0x24ee <TWI_getStatus>
    19ac:	88 30       	cpi	r24, 0x08	; 8
    19ae:	11 f0       	breq	.+4      	; 0x19b4 <EEPROM_readByte+0x26>
		return ERROR;
    19b0:	1d 82       	std	Y+5, r1	; 0x05
    19b2:	44 c0       	rjmp	.+136    	; 0x1a3c <EEPROM_readByte+0xae>

	/*  Send device address (0x1010)
	 * + we need to get A8,A9,A10 address bits from memory location address
	 * + R/W =0 (write)
	 */
	TWI_writeByte((uint8)(((u16address & 0x0700)>>7) |0xA0));
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	80 70       	andi	r24, 0x00	; 0
    19ba:	97 70       	andi	r25, 0x07	; 7
    19bc:	88 0f       	add	r24, r24
    19be:	89 2f       	mov	r24, r25
    19c0:	88 1f       	adc	r24, r24
    19c2:	99 0b       	sbc	r25, r25
    19c4:	91 95       	neg	r25
    19c6:	80 6a       	ori	r24, 0xA0	; 160
    19c8:	0e 94 3a 12 	call	0x2474	; 0x2474 <TWI_writeByte>
	if(TWI_getStatus()!=TWI_MT_SLA_W_ACK)
    19cc:	0e 94 77 12 	call	0x24ee	; 0x24ee <TWI_getStatus>
    19d0:	88 31       	cpi	r24, 0x18	; 24
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <EEPROM_readByte+0x4a>
		return ERROR;
    19d4:	1d 82       	std	Y+5, r1	; 0x05
    19d6:	32 c0       	rjmp	.+100    	; 0x1a3c <EEPROM_readByte+0xae>

	/* send the required memory location ( first 8 bits )*/
	TWI_writeByte((uint8)u16address);
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	0e 94 3a 12 	call	0x2474	; 0x2474 <TWI_writeByte>
	if(TWI_getStatus()!=TWI_MT_DATA_ACK)
    19de:	0e 94 77 12 	call	0x24ee	; 0x24ee <TWI_getStatus>
    19e2:	88 32       	cpi	r24, 0x28	; 40
    19e4:	11 f0       	breq	.+4      	; 0x19ea <EEPROM_readByte+0x5c>
		return ERROR;
    19e6:	1d 82       	std	Y+5, r1	; 0x05
    19e8:	29 c0       	rjmp	.+82     	; 0x1a3c <EEPROM_readByte+0xae>

	/* SEND Repeated Start bit */
	TWI_start();
    19ea:	0e 94 1f 12 	call	0x243e	; 0x243e <TWI_start>
	if(TWI_getStatus()!=TWI_REP_START)
    19ee:	0e 94 77 12 	call	0x24ee	; 0x24ee <TWI_getStatus>
    19f2:	80 31       	cpi	r24, 0x10	; 16
    19f4:	11 f0       	breq	.+4      	; 0x19fa <EEPROM_readByte+0x6c>
		return ERROR;
    19f6:	1d 82       	std	Y+5, r1	; 0x05
    19f8:	21 c0       	rjmp	.+66     	; 0x1a3c <EEPROM_readByte+0xae>

	/*  Send device address (0x1010)
	 * + we need to get A8,A9,A10 address bits from memory location address
	 * + R/W =1 (read)
	 */
	TWI_writeByte((uint8)(((u16address & 0x0700)>>7)|0xA0 |0x01));
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	9a 81       	ldd	r25, Y+2	; 0x02
    19fe:	80 70       	andi	r24, 0x00	; 0
    1a00:	97 70       	andi	r25, 0x07	; 7
    1a02:	88 0f       	add	r24, r24
    1a04:	89 2f       	mov	r24, r25
    1a06:	88 1f       	adc	r24, r24
    1a08:	99 0b       	sbc	r25, r25
    1a0a:	91 95       	neg	r25
    1a0c:	81 6a       	ori	r24, 0xA1	; 161
    1a0e:	0e 94 3a 12 	call	0x2474	; 0x2474 <TWI_writeByte>
	if(TWI_getStatus()!=TWI_MT_SLA_R_ACK)
    1a12:	0e 94 77 12 	call	0x24ee	; 0x24ee <TWI_getStatus>
    1a16:	80 34       	cpi	r24, 0x40	; 64
    1a18:	11 f0       	breq	.+4      	; 0x1a1e <EEPROM_readByte+0x90>
		return ERROR;
    1a1a:	1d 82       	std	Y+5, r1	; 0x05
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <EEPROM_readByte+0xae>

	/* Read byte from memory without send ACK */
	*u8data=TWI_readByteWithNACK();
    1a1e:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_readByteWithNACK>
    1a22:	eb 81       	ldd	r30, Y+3	; 0x03
    1a24:	fc 81       	ldd	r31, Y+4	; 0x04
    1a26:	80 83       	st	Z, r24
	if(TWI_getStatus()!=TWI_MR_DATA_NACK)
    1a28:	0e 94 77 12 	call	0x24ee	; 0x24ee <TWI_getStatus>
    1a2c:	88 35       	cpi	r24, 0x58	; 88
    1a2e:	11 f0       	breq	.+4      	; 0x1a34 <EEPROM_readByte+0xa6>
		return ERROR;
    1a30:	1d 82       	std	Y+5, r1	; 0x05
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <EEPROM_readByte+0xae>

	/* Send the Stop bit */
	TWI_stop();
    1a34:	0e 94 2f 12 	call	0x245e	; 0x245e <TWI_stop>

	return SUCCESS;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	27 97       	sbiw	r28, 0x07	; 7
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	6a 83       	std	Y+2, r22	; 0x02
    1a66:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if((pin_num > NUM_OF_PINS_PER_PORT) | (port_num > NUM_OF_PORTS ))
    1a68:	1f 82       	std	Y+7, r1	; 0x07
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	89 30       	cpi	r24, 0x09	; 9
    1a6e:	10 f0       	brcs	.+4      	; 0x1a74 <GPIO_setupPinDirection+0x26>
    1a70:	21 e0       	ldi	r18, 0x01	; 1
    1a72:	2f 83       	std	Y+7, r18	; 0x07
    1a74:	1e 82       	std	Y+6, r1	; 0x06
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	85 30       	cpi	r24, 0x05	; 5
    1a7a:	10 f0       	brcs	.+4      	; 0x1a80 <GPIO_setupPinDirection+0x32>
    1a7c:	31 e0       	ldi	r19, 0x01	; 1
    1a7e:	3e 83       	std	Y+6, r19	; 0x06
    1a80:	8f 81       	ldd	r24, Y+7	; 0x07
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	89 2b       	or	r24, r25
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	89 27       	eor	r24, r25
    1a8a:	88 23       	and	r24, r24
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <GPIO_setupPinDirection+0x42>
    1a8e:	d1 c0       	rjmp	.+418    	; 0x1c32 <GPIO_setupPinDirection+0x1e4>
	}

	else
	{
		/* setup the pin direction */
		switch(port_num)
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	3d 83       	std	Y+5, r19	; 0x05
    1a98:	2c 83       	std	Y+4, r18	; 0x04
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <GPIO_setupPinDirection+0x58>
    1aa4:	43 c0       	rjmp	.+134    	; 0x1b2c <GPIO_setupPinDirection+0xde>
    1aa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	2c f4       	brge	.+10     	; 0x1aba <GPIO_setupPinDirection+0x6c>
    1ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	71 f0       	breq	.+28     	; 0x1ad4 <GPIO_setupPinDirection+0x86>
    1ab8:	bc c0       	rjmp	.+376    	; 0x1c32 <GPIO_setupPinDirection+0x1e4>
    1aba:	2c 81       	ldd	r18, Y+4	; 0x04
    1abc:	3d 81       	ldd	r19, Y+5	; 0x05
    1abe:	22 30       	cpi	r18, 0x02	; 2
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <GPIO_setupPinDirection+0x78>
    1ac4:	5f c0       	rjmp	.+190    	; 0x1b84 <GPIO_setupPinDirection+0x136>
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	83 30       	cpi	r24, 0x03	; 3
    1acc:	91 05       	cpc	r25, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <GPIO_setupPinDirection+0x84>
    1ad0:	85 c0       	rjmp	.+266    	; 0x1bdc <GPIO_setupPinDirection+0x18e>
    1ad2:	af c0       	rjmp	.+350    	; 0x1c32 <GPIO_setupPinDirection+0x1e4>
		{
		case PORTA_ID:
			if(direction==PIN_INPUT)
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	88 23       	and	r24, r24
    1ad8:	a9 f4       	brne	.+42     	; 0x1b04 <GPIO_setupPinDirection+0xb6>
			{
				CLEAR_BIT(DDRA,pin_num);
    1ada:	aa e3       	ldi	r26, 0x3A	; 58
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ea e3       	ldi	r30, 0x3A	; 58
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <GPIO_setupPinDirection+0xaa>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <GPIO_setupPinDirection+0xa6>
    1afc:	80 95       	com	r24
    1afe:	84 23       	and	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	97 c0       	rjmp	.+302    	; 0x1c32 <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
    1b04:	aa e3       	ldi	r26, 0x3A	; 58
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	ea e3       	ldi	r30, 0x3A	; 58
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <GPIO_setupPinDirection+0xd4>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <GPIO_setupPinDirection+0xd0>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	83 c0       	rjmp	.+262    	; 0x1c32 <GPIO_setupPinDirection+0x1e4>
			}
			break;

		case PORTB_ID:
			if(direction==PIN_INPUT)
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	88 23       	and	r24, r24
    1b30:	a9 f4       	brne	.+42     	; 0x1b5c <GPIO_setupPinDirection+0x10e>
			{
				CLEAR_BIT(DDRB,pin_num);
    1b32:	a7 e3       	ldi	r26, 0x37	; 55
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e7 e3       	ldi	r30, 0x37	; 55
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	02 2e       	mov	r0, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <GPIO_setupPinDirection+0x102>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <GPIO_setupPinDirection+0xfe>
    1b54:	80 95       	com	r24
    1b56:	84 23       	and	r24, r20
    1b58:	8c 93       	st	X, r24
    1b5a:	6b c0       	rjmp	.+214    	; 0x1c32 <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
    1b5c:	a7 e3       	ldi	r26, 0x37	; 55
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e7 e3       	ldi	r30, 0x37	; 55
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 2e       	mov	r0, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <GPIO_setupPinDirection+0x12c>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <GPIO_setupPinDirection+0x128>
    1b7e:	84 2b       	or	r24, r20
    1b80:	8c 93       	st	X, r24
    1b82:	57 c0       	rjmp	.+174    	; 0x1c32 <GPIO_setupPinDirection+0x1e4>
			}
			break;

		case PORTC_ID:
			if(direction==PIN_INPUT)
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	88 23       	and	r24, r24
    1b88:	a9 f4       	brne	.+42     	; 0x1bb4 <GPIO_setupPinDirection+0x166>
			{
				CLEAR_BIT(DDRC,pin_num);
    1b8a:	a4 e3       	ldi	r26, 0x34	; 52
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e4 e3       	ldi	r30, 0x34	; 52
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <GPIO_setupPinDirection+0x15a>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <GPIO_setupPinDirection+0x156>
    1bac:	80 95       	com	r24
    1bae:	84 23       	and	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	3f c0       	rjmp	.+126    	; 0x1c32 <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
    1bb4:	a4 e3       	ldi	r26, 0x34	; 52
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e4 e3       	ldi	r30, 0x34	; 52
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <GPIO_setupPinDirection+0x184>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <GPIO_setupPinDirection+0x180>
    1bd6:	84 2b       	or	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	2b c0       	rjmp	.+86     	; 0x1c32 <GPIO_setupPinDirection+0x1e4>
			}
			break;

		case PORTD_ID:
			if(direction==PIN_INPUT)
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	88 23       	and	r24, r24
    1be0:	a9 f4       	brne	.+42     	; 0x1c0c <GPIO_setupPinDirection+0x1be>
			{
				CLEAR_BIT(DDRD,pin_num);
    1be2:	a1 e3       	ldi	r26, 0x31	; 49
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e1 e3       	ldi	r30, 0x31	; 49
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	48 2f       	mov	r20, r24
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 2e       	mov	r0, r18
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <GPIO_setupPinDirection+0x1b2>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	0a 94       	dec	r0
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <GPIO_setupPinDirection+0x1ae>
    1c04:	80 95       	com	r24
    1c06:	84 23       	and	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	13 c0       	rjmp	.+38     	; 0x1c32 <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
    1c0c:	a1 e3       	ldi	r26, 0x31	; 49
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e1 e3       	ldi	r30, 0x31	; 49
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <GPIO_setupPinDirection+0x1dc>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <GPIO_setupPinDirection+0x1d8>
    1c2e:	84 2b       	or	r24, r20
    1c30:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c32:	27 96       	adiw	r28, 0x07	; 7
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	27 97       	sbiw	r28, 0x07	; 7
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	6a 83       	std	Y+2, r22	; 0x02
    1c5c:	4b 83       	std	Y+3, r20	; 0x03

	if((port_num > NUM_OF_PORTS ) | (pin_num > NUM_OF_PINS_PER_PORT))
    1c5e:	1f 82       	std	Y+7, r1	; 0x07
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	85 30       	cpi	r24, 0x05	; 5
    1c64:	10 f0       	brcs	.+4      	; 0x1c6a <GPIO_writePin+0x26>
    1c66:	21 e0       	ldi	r18, 0x01	; 1
    1c68:	2f 83       	std	Y+7, r18	; 0x07
    1c6a:	1e 82       	std	Y+6, r1	; 0x06
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	89 30       	cpi	r24, 0x09	; 9
    1c70:	10 f0       	brcs	.+4      	; 0x1c76 <GPIO_writePin+0x32>
    1c72:	31 e0       	ldi	r19, 0x01	; 1
    1c74:	3e 83       	std	Y+6, r19	; 0x06
    1c76:	8f 81       	ldd	r24, Y+7	; 0x07
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	89 2b       	or	r24, r25
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	89 27       	eor	r24, r25
    1c80:	88 23       	and	r24, r24
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <GPIO_writePin+0x42>
    1c84:	d1 c0       	rjmp	.+418    	; 0x1e28 <GPIO_writePin+0x1e4>
		/* Do Nothing*/
	}

	else
	{
		switch(port_num)
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	3d 83       	std	Y+5, r19	; 0x05
    1c8e:	2c 83       	std	Y+4, r18	; 0x04
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	91 05       	cpc	r25, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <GPIO_writePin+0x58>
    1c9a:	43 c0       	rjmp	.+134    	; 0x1d22 <GPIO_writePin+0xde>
    1c9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca0:	22 30       	cpi	r18, 0x02	; 2
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <GPIO_writePin+0x6c>
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	71 f0       	breq	.+28     	; 0x1cca <GPIO_writePin+0x86>
    1cae:	bc c0       	rjmp	.+376    	; 0x1e28 <GPIO_writePin+0x1e4>
    1cb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb4:	22 30       	cpi	r18, 0x02	; 2
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <GPIO_writePin+0x78>
    1cba:	5f c0       	rjmp	.+190    	; 0x1d7a <GPIO_writePin+0x136>
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc0:	83 30       	cpi	r24, 0x03	; 3
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <GPIO_writePin+0x84>
    1cc6:	85 c0       	rjmp	.+266    	; 0x1dd2 <GPIO_writePin+0x18e>
    1cc8:	af c0       	rjmp	.+350    	; 0x1e28 <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH)
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	a1 f4       	brne	.+40     	; 0x1cf8 <GPIO_writePin+0xb4>
			{
				SET_BIT(PORTA,pin_num);
    1cd0:	ab e3       	ldi	r26, 0x3B	; 59
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	eb e3       	ldi	r30, 0x3B	; 59
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 2e       	mov	r0, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <GPIO_writePin+0xaa>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	0a 94       	dec	r0
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <GPIO_writePin+0xa6>
    1cf2:	84 2b       	or	r24, r20
    1cf4:	8c 93       	st	X, r24
    1cf6:	98 c0       	rjmp	.+304    	; 0x1e28 <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1cf8:	ab e3       	ldi	r26, 0x3B	; 59
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	eb e3       	ldi	r30, 0x3B	; 59
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	48 2f       	mov	r20, r24
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	02 2e       	mov	r0, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <GPIO_writePin+0xd2>
    1d12:	88 0f       	add	r24, r24
    1d14:	99 1f       	adc	r25, r25
    1d16:	0a 94       	dec	r0
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <GPIO_writePin+0xce>
    1d1a:	80 95       	com	r24
    1d1c:	84 23       	and	r24, r20
    1d1e:	8c 93       	st	X, r24
    1d20:	83 c0       	rjmp	.+262    	; 0x1e28 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTB_ID:
			if(value==LOGIC_HIGH)
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	a1 f4       	brne	.+40     	; 0x1d50 <GPIO_writePin+0x10c>
			{
				SET_BIT(PORTB,pin_num);
    1d28:	a8 e3       	ldi	r26, 0x38	; 56
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e8 e3       	ldi	r30, 0x38	; 56
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	48 2f       	mov	r20, r24
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	02 2e       	mov	r0, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <GPIO_writePin+0x102>
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	0a 94       	dec	r0
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <GPIO_writePin+0xfe>
    1d4a:	84 2b       	or	r24, r20
    1d4c:	8c 93       	st	X, r24
    1d4e:	6c c0       	rjmp	.+216    	; 0x1e28 <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d50:	a8 e3       	ldi	r26, 0x38	; 56
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e8 e3       	ldi	r30, 0x38	; 56
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	48 2f       	mov	r20, r24
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 2e       	mov	r0, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <GPIO_writePin+0x12a>
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	0a 94       	dec	r0
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <GPIO_writePin+0x126>
    1d72:	80 95       	com	r24
    1d74:	84 23       	and	r24, r20
    1d76:	8c 93       	st	X, r24
    1d78:	57 c0       	rjmp	.+174    	; 0x1e28 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTC_ID:
			if(value==LOGIC_HIGH)
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	a1 f4       	brne	.+40     	; 0x1da8 <GPIO_writePin+0x164>
			{
				SET_BIT(PORTC,pin_num);
    1d80:	a5 e3       	ldi	r26, 0x35	; 53
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e5 e3       	ldi	r30, 0x35	; 53
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <GPIO_writePin+0x15a>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <GPIO_writePin+0x156>
    1da2:	84 2b       	or	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	40 c0       	rjmp	.+128    	; 0x1e28 <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1da8:	a5 e3       	ldi	r26, 0x35	; 53
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e5 e3       	ldi	r30, 0x35	; 53
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2f       	mov	r20, r24
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <GPIO_writePin+0x182>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <GPIO_writePin+0x17e>
    1dca:	80 95       	com	r24
    1dcc:	84 23       	and	r24, r20
    1dce:	8c 93       	st	X, r24
    1dd0:	2b c0       	rjmp	.+86     	; 0x1e28 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTD_ID:
			if(value==LOGIC_HIGH)
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	a1 f4       	brne	.+40     	; 0x1e00 <GPIO_writePin+0x1bc>
			{
				SET_BIT(PORTD,pin_num);
    1dd8:	a2 e3       	ldi	r26, 0x32	; 50
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e2 e3       	ldi	r30, 0x32	; 50
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	48 2f       	mov	r20, r24
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	02 2e       	mov	r0, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <GPIO_writePin+0x1b2>
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	0a 94       	dec	r0
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <GPIO_writePin+0x1ae>
    1dfa:	84 2b       	or	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e00:	a2 e3       	ldi	r26, 0x32	; 50
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e2 e3       	ldi	r30, 0x32	; 50
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <GPIO_writePin+0x1da>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <GPIO_writePin+0x1d6>
    1e22:	80 95       	com	r24
    1e24:	84 23       	and	r24, r20
    1e26:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e28:	27 96       	adiw	r28, 0x07	; 7
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	27 97       	sbiw	r28, 0x07	; 7
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
    1e50:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value= LOGIC_LOW;
    1e52:	19 82       	std	Y+1, r1	; 0x01

	if((port_num > NUM_OF_PORTS ) | (pin_num > NUM_OF_PINS_PER_PORT))
    1e54:	1f 82       	std	Y+7, r1	; 0x07
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	85 30       	cpi	r24, 0x05	; 5
    1e5a:	10 f0       	brcs	.+4      	; 0x1e60 <GPIO_readPin+0x26>
    1e5c:	21 e0       	ldi	r18, 0x01	; 1
    1e5e:	2f 83       	std	Y+7, r18	; 0x07
    1e60:	1e 82       	std	Y+6, r1	; 0x06
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	89 30       	cpi	r24, 0x09	; 9
    1e66:	10 f0       	brcs	.+4      	; 0x1e6c <GPIO_readPin+0x32>
    1e68:	31 e0       	ldi	r19, 0x01	; 1
    1e6a:	3e 83       	std	Y+6, r19	; 0x06
    1e6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e6e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e70:	84 2b       	or	r24, r20
    1e72:	91 e0       	ldi	r25, 0x01	; 1
    1e74:	89 27       	eor	r24, r25
    1e76:	88 23       	and	r24, r24
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <GPIO_readPin+0x42>
    1e7a:	80 c0       	rjmp	.+256    	; 0x1f7c <GPIO_readPin+0x142>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	3d 83       	std	Y+5, r19	; 0x05
    1e84:	2c 83       	std	Y+4, r18	; 0x04
    1e86:	4c 81       	ldd	r20, Y+4	; 0x04
    1e88:	5d 81       	ldd	r21, Y+5	; 0x05
    1e8a:	41 30       	cpi	r20, 0x01	; 1
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	79 f1       	breq	.+94     	; 0x1eee <GPIO_readPin+0xb4>
    1e90:	8c 81       	ldd	r24, Y+4	; 0x04
    1e92:	9d 81       	ldd	r25, Y+5	; 0x05
    1e94:	82 30       	cpi	r24, 0x02	; 2
    1e96:	91 05       	cpc	r25, r1
    1e98:	34 f4       	brge	.+12     	; 0x1ea6 <GPIO_readPin+0x6c>
    1e9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9e:	21 15       	cp	r18, r1
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	69 f0       	breq	.+26     	; 0x1ebe <GPIO_readPin+0x84>
    1ea4:	6b c0       	rjmp	.+214    	; 0x1f7c <GPIO_readPin+0x142>
    1ea6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ea8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eaa:	42 30       	cpi	r20, 0x02	; 2
    1eac:	51 05       	cpc	r21, r1
    1eae:	b9 f1       	breq	.+110    	; 0x1f1e <GPIO_readPin+0xe4>
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb4:	83 30       	cpi	r24, 0x03	; 3
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <GPIO_readPin+0x82>
    1eba:	49 c0       	rjmp	.+146    	; 0x1f4e <GPIO_readPin+0x114>
    1ebc:	5f c0       	rjmp	.+190    	; 0x1f7c <GPIO_readPin+0x142>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ebe:	e9 e3       	ldi	r30, 0x39	; 57
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a9 01       	movw	r20, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <GPIO_readPin+0x9c>
    1ed2:	55 95       	asr	r21
    1ed4:	47 95       	ror	r20
    1ed6:	8a 95       	dec	r24
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <GPIO_readPin+0x98>
    1eda:	ca 01       	movw	r24, r20
    1edc:	81 70       	andi	r24, 0x01	; 1
    1ede:	90 70       	andi	r25, 0x00	; 0
    1ee0:	88 23       	and	r24, r24
    1ee2:	19 f0       	breq	.+6      	; 0x1eea <GPIO_readPin+0xb0>
			{
				value= LOGIC_HIGH;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	49 c0       	rjmp	.+146    	; 0x1f7c <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    1eea:	19 82       	std	Y+1, r1	; 0x01
    1eec:	47 c0       	rjmp	.+142    	; 0x1f7c <GPIO_readPin+0x142>
			}
			break;

		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1eee:	e6 e3       	ldi	r30, 0x36	; 54
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a9 01       	movw	r20, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <GPIO_readPin+0xcc>
    1f02:	55 95       	asr	r21
    1f04:	47 95       	ror	r20
    1f06:	8a 95       	dec	r24
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <GPIO_readPin+0xc8>
    1f0a:	ca 01       	movw	r24, r20
    1f0c:	81 70       	andi	r24, 0x01	; 1
    1f0e:	90 70       	andi	r25, 0x00	; 0
    1f10:	88 23       	and	r24, r24
    1f12:	19 f0       	breq	.+6      	; 0x1f1a <GPIO_readPin+0xe0>
			{
				value= LOGIC_HIGH;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	31 c0       	rjmp	.+98     	; 0x1f7c <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    1f1a:	19 82       	std	Y+1, r1	; 0x01
    1f1c:	2f c0       	rjmp	.+94     	; 0x1f7c <GPIO_readPin+0x142>
			}
			break;

		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f1e:	e3 e3       	ldi	r30, 0x33	; 51
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	a9 01       	movw	r20, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <GPIO_readPin+0xfc>
    1f32:	55 95       	asr	r21
    1f34:	47 95       	ror	r20
    1f36:	8a 95       	dec	r24
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <GPIO_readPin+0xf8>
    1f3a:	ca 01       	movw	r24, r20
    1f3c:	81 70       	andi	r24, 0x01	; 1
    1f3e:	90 70       	andi	r25, 0x00	; 0
    1f40:	88 23       	and	r24, r24
    1f42:	19 f0       	breq	.+6      	; 0x1f4a <GPIO_readPin+0x110>
			{
				value= LOGIC_HIGH;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	19 c0       	rjmp	.+50     	; 0x1f7c <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    1f4a:	19 82       	std	Y+1, r1	; 0x01
    1f4c:	17 c0       	rjmp	.+46     	; 0x1f7c <GPIO_readPin+0x142>
			}
			break;

		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f4e:	e0 e3       	ldi	r30, 0x30	; 48
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a9 01       	movw	r20, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <GPIO_readPin+0x12c>
    1f62:	55 95       	asr	r21
    1f64:	47 95       	ror	r20
    1f66:	8a 95       	dec	r24
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <GPIO_readPin+0x128>
    1f6a:	ca 01       	movw	r24, r20
    1f6c:	81 70       	andi	r24, 0x01	; 1
    1f6e:	90 70       	andi	r25, 0x00	; 0
    1f70:	88 23       	and	r24, r24
    1f72:	19 f0       	breq	.+6      	; 0x1f7a <GPIO_readPin+0x140>
			{
				value= LOGIC_HIGH;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    1f7a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f7e:	27 96       	adiw	r28, 0x07	; 7
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <GPIO_setupPortDirection+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <GPIO_setupPortDirection+0x8>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS )
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	85 30       	cpi	r24, 0x05	; 5
    1fa4:	90 f5       	brcc	.+100    	; 0x200a <GPIO_setupPortDirection+0x7a>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	3c 83       	std	Y+4, r19	; 0x04
    1fae:	2b 83       	std	Y+3, r18	; 0x03
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	d1 f0       	breq	.+52     	; 0x1fee <GPIO_setupPortDirection+0x5e>
    1fba:	2b 81       	ldd	r18, Y+3	; 0x03
    1fbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <GPIO_setupPortDirection+0x3e>
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	61 f0       	breq	.+24     	; 0x1fe4 <GPIO_setupPortDirection+0x54>
    1fcc:	1e c0       	rjmp	.+60     	; 0x200a <GPIO_setupPortDirection+0x7a>
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	81 f0       	breq	.+32     	; 0x1ff8 <GPIO_setupPortDirection+0x68>
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	83 30       	cpi	r24, 0x03	; 3
    1fde:	91 05       	cpc	r25, r1
    1fe0:	81 f0       	breq	.+32     	; 0x2002 <GPIO_setupPortDirection+0x72>
    1fe2:	13 c0       	rjmp	.+38     	; 0x200a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA=direction;
    1fe4:	ea e3       	ldi	r30, 0x3A	; 58
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	80 83       	st	Z, r24
    1fec:	0e c0       	rjmp	.+28     	; 0x200a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB=direction;
    1fee:	e7 e3       	ldi	r30, 0x37	; 55
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	80 83       	st	Z, r24
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC=direction;
    1ff8:	e4 e3       	ldi	r30, 0x34	; 52
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	80 83       	st	Z, r24
    2000:	04 c0       	rjmp	.+8      	; 0x200a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD=direction;
    2002:	e1 e3       	ldi	r30, 0x31	; 49
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	80 83       	st	Z, r24
			break;
		}
	}
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	00 d0       	rcall	.+0      	; 0x201e <GPIO_writePort+0x6>
    201e:	00 d0       	rcall	.+0      	; 0x2020 <GPIO_writePort+0x8>
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS )
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	85 30       	cpi	r24, 0x05	; 5
    202c:	90 f5       	brcc	.+100    	; 0x2092 <GPIO_writePort+0x7a>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	3c 83       	std	Y+4, r19	; 0x04
    2036:	2b 83       	std	Y+3, r18	; 0x03
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	9c 81       	ldd	r25, Y+4	; 0x04
    203c:	81 30       	cpi	r24, 0x01	; 1
    203e:	91 05       	cpc	r25, r1
    2040:	d1 f0       	breq	.+52     	; 0x2076 <GPIO_writePort+0x5e>
    2042:	2b 81       	ldd	r18, Y+3	; 0x03
    2044:	3c 81       	ldd	r19, Y+4	; 0x04
    2046:	22 30       	cpi	r18, 0x02	; 2
    2048:	31 05       	cpc	r19, r1
    204a:	2c f4       	brge	.+10     	; 0x2056 <GPIO_writePort+0x3e>
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	61 f0       	breq	.+24     	; 0x206c <GPIO_writePort+0x54>
    2054:	1e c0       	rjmp	.+60     	; 0x2092 <GPIO_writePort+0x7a>
    2056:	2b 81       	ldd	r18, Y+3	; 0x03
    2058:	3c 81       	ldd	r19, Y+4	; 0x04
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	81 f0       	breq	.+32     	; 0x2080 <GPIO_writePort+0x68>
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	9c 81       	ldd	r25, Y+4	; 0x04
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	91 05       	cpc	r25, r1
    2068:	81 f0       	breq	.+32     	; 0x208a <GPIO_writePort+0x72>
    206a:	13 c0       	rjmp	.+38     	; 0x2092 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    206c:	eb e3       	ldi	r30, 0x3B	; 59
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	80 83       	st	Z, r24
    2074:	0e c0       	rjmp	.+28     	; 0x2092 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    2076:	e8 e3       	ldi	r30, 0x38	; 56
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	80 83       	st	Z, r24
    207e:	09 c0       	rjmp	.+18     	; 0x2092 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    2080:	e5 e3       	ldi	r30, 0x35	; 53
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	80 83       	st	Z, r24
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    208a:	e2 e3       	ldi	r30, 0x32	; 50
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	80 83       	st	Z, r24
			break;
		}
	}
}
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <read_Port>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 read_Port(uint8 port_num)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <read_Port+0x6>
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <read_Port+0x8>
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=LOGIC_LOW;
    20ae:	19 82       	std	Y+1, r1	; 0x01

	if(port_num > NUM_OF_PORTS )
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	85 30       	cpi	r24, 0x05	; 5
    20b4:	90 f5       	brcc	.+100    	; 0x211a <read_Port+0x7a>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	3c 83       	std	Y+4, r19	; 0x04
    20be:	2b 83       	std	Y+3, r18	; 0x03
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	91 05       	cpc	r25, r1
    20c8:	d1 f0       	breq	.+52     	; 0x20fe <read_Port+0x5e>
    20ca:	2b 81       	ldd	r18, Y+3	; 0x03
    20cc:	3c 81       	ldd	r19, Y+4	; 0x04
    20ce:	22 30       	cpi	r18, 0x02	; 2
    20d0:	31 05       	cpc	r19, r1
    20d2:	2c f4       	brge	.+10     	; 0x20de <read_Port+0x3e>
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	61 f0       	breq	.+24     	; 0x20f4 <read_Port+0x54>
    20dc:	1e c0       	rjmp	.+60     	; 0x211a <read_Port+0x7a>
    20de:	2b 81       	ldd	r18, Y+3	; 0x03
    20e0:	3c 81       	ldd	r19, Y+4	; 0x04
    20e2:	22 30       	cpi	r18, 0x02	; 2
    20e4:	31 05       	cpc	r19, r1
    20e6:	81 f0       	breq	.+32     	; 0x2108 <read_Port+0x68>
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	83 30       	cpi	r24, 0x03	; 3
    20ee:	91 05       	cpc	r25, r1
    20f0:	81 f0       	breq	.+32     	; 0x2112 <read_Port+0x72>
    20f2:	13 c0       	rjmp	.+38     	; 0x211a <read_Port+0x7a>
		{
		case PORTA_ID:
			value= PINA;
    20f4:	e9 e3       	ldi	r30, 0x39	; 57
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	0e c0       	rjmp	.+28     	; 0x211a <read_Port+0x7a>
			break;
		case PORTB_ID:
			value= PINB;
    20fe:	e6 e3       	ldi	r30, 0x36	; 54
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	09 c0       	rjmp	.+18     	; 0x211a <read_Port+0x7a>
			break;
		case PORTC_ID:
			value= PINC;
    2108:	e3 e3       	ldi	r30, 0x33	; 51
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	04 c0       	rjmp	.+8      	; 0x211a <read_Port+0x7a>
			break;
		case PORTD_ID:
			value= PIND;
    2112:	e0 e3       	ldi	r30, 0x30	; 48
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <PWM_Timer0_Start>:
 * Setup the compare value based on the required input duty cycle
 * Setup the direction for OC0 as output pin through the GPIO driver.
 * The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	0f 92       	push	r0
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	89 83       	std	Y+1, r24	; 0x01
	DDRB|=(1<<PB3);
    213a:	a7 e3       	ldi	r26, 0x37	; 55
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e7 e3       	ldi	r30, 0x37	; 55
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	88 60       	ori	r24, 0x08	; 8
    2146:	8c 93       	st	X, r24
	TCCR0=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS01);
    2148:	e3 e5       	ldi	r30, 0x53	; 83
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	8a e6       	ldi	r24, 0x6A	; 106
    214e:	80 83       	st	Z, r24
	TCNT0=0;
    2150:	e2 e5       	ldi	r30, 0x52	; 82
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	10 82       	st	Z, r1

	/* Convert duty cycle (speed ) percentage to duty-cycle value */
	if(duty_cycle==100)
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	84 36       	cpi	r24, 0x64	; 100
    215a:	51 f5       	brne	.+84     	; 0x21b0 <PWM_Timer0_Start+0x86>
	{
		OCR0 = (uint8) (((float32)(duty_cycle)/100) * 255);
    215c:	0c e5       	ldi	r16, 0x5C	; 92
    215e:	10 e0       	ldi	r17, 0x00	; 0
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	88 2f       	mov	r24, r24
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a0 e0       	ldi	r26, 0x00	; 0
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	48 ec       	ldi	r20, 0xC8	; 200
    2180:	52 e4       	ldi	r21, 0x42	; 66
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	53 e4       	ldi	r21, 0x43	; 67
    2196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	f8 01       	movw	r30, r16
    21ac:	80 83       	st	Z, r24
    21ae:	29 c0       	rjmp	.+82     	; 0x2202 <PWM_Timer0_Start+0xd8>
	}
	else
	{
		OCR0 = (uint8) (((float32)(duty_cycle)/100) * 256);
    21b0:	0c e5       	ldi	r16, 0x5C	; 92
    21b2:	10 e0       	ldi	r17, 0x00	; 0
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	88 2f       	mov	r24, r24
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e0       	ldi	r26, 0x00	; 0
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	48 ec       	ldi	r20, 0xC8	; 200
    21d4:	52 e4       	ldi	r21, 0x42	; 66
    21d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	53 e4       	ldi	r21, 0x43	; 67
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	f8 01       	movw	r30, r16
    2200:	80 83       	st	Z, r24
	}
}
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	08 95       	ret

0000220e <__vector_9>:

/*******************************************************************************
 *                         Interrupt Service routines                          *
 *******************************************************************************/
ISR(TIMER1_OVF_vect)
{
    220e:	1f 92       	push	r1
    2210:	0f 92       	push	r0
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	0f 92       	push	r0
    2216:	11 24       	eor	r1, r1
    2218:	2f 93       	push	r18
    221a:	3f 93       	push	r19
    221c:	4f 93       	push	r20
    221e:	5f 93       	push	r21
    2220:	6f 93       	push	r22
    2222:	7f 93       	push	r23
    2224:	8f 93       	push	r24
    2226:	9f 93       	push	r25
    2228:	af 93       	push	r26
    222a:	bf 93       	push	r27
    222c:	ef 93       	push	r30
    222e:	ff 93       	push	r31
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
	if ( g_callBackPtr != NULL_PTR)
    2238:	80 91 82 01 	lds	r24, 0x0182
    223c:	90 91 83 01 	lds	r25, 0x0183
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	29 f0       	breq	.+10     	; 0x224e <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    2244:	e0 91 82 01 	lds	r30, 0x0182
    2248:	f0 91 83 01 	lds	r31, 0x0183
    224c:	09 95       	icall
	}
}
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	ff 91       	pop	r31
    2254:	ef 91       	pop	r30
    2256:	bf 91       	pop	r27
    2258:	af 91       	pop	r26
    225a:	9f 91       	pop	r25
    225c:	8f 91       	pop	r24
    225e:	7f 91       	pop	r23
    2260:	6f 91       	pop	r22
    2262:	5f 91       	pop	r21
    2264:	4f 91       	pop	r20
    2266:	3f 91       	pop	r19
    2268:	2f 91       	pop	r18
    226a:	0f 90       	pop	r0
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	0f 90       	pop	r0
    2270:	1f 90       	pop	r1
    2272:	18 95       	reti

00002274 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2274:	1f 92       	push	r1
    2276:	0f 92       	push	r0
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	0f 92       	push	r0
    227c:	11 24       	eor	r1, r1
    227e:	2f 93       	push	r18
    2280:	3f 93       	push	r19
    2282:	4f 93       	push	r20
    2284:	5f 93       	push	r21
    2286:	6f 93       	push	r22
    2288:	7f 93       	push	r23
    228a:	8f 93       	push	r24
    228c:	9f 93       	push	r25
    228e:	af 93       	push	r26
    2290:	bf 93       	push	r27
    2292:	ef 93       	push	r30
    2294:	ff 93       	push	r31
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
	if ( g_callBackPtr != NULL_PTR)
    229e:	80 91 82 01 	lds	r24, 0x0182
    22a2:	90 91 83 01 	lds	r25, 0x0183
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	29 f0       	breq	.+10     	; 0x22b4 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    22aa:	e0 91 82 01 	lds	r30, 0x0182
    22ae:	f0 91 83 01 	lds	r31, 0x0183
    22b2:	09 95       	icall
	}
}
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	ff 91       	pop	r31
    22ba:	ef 91       	pop	r30
    22bc:	bf 91       	pop	r27
    22be:	af 91       	pop	r26
    22c0:	9f 91       	pop	r25
    22c2:	8f 91       	pop	r24
    22c4:	7f 91       	pop	r23
    22c6:	6f 91       	pop	r22
    22c8:	5f 91       	pop	r21
    22ca:	4f 91       	pop	r20
    22cc:	3f 91       	pop	r19
    22ce:	2f 91       	pop	r18
    22d0:	0f 90       	pop	r0
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	0f 90       	pop	r0
    22d6:	1f 90       	pop	r1
    22d8:	18 95       	reti

000022da <Timer1_init>:
 * 3. Set the compare value if needed ( in ctc mode )
 * 4. Set the timer mode (normal / compare)
 * 5. Enable interrupt
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <Timer1_init+0x6>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
	/* set FOC1A for any timer mode except PWM */
	TCCR1A=(1<<FOC1A);
    22e8:	ef e4       	ldi	r30, 0x4F	; 79
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	88 e0       	ldi	r24, 0x08	; 8
    22ee:	80 83       	st	Z, r24

	/* set timer1 clock */
	TCCR1B=(TCCR1B & 0xF8) | (Config_Ptr->prescalar);
    22f0:	ae e4       	ldi	r26, 0x4E	; 78
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	ee e4       	ldi	r30, 0x4E	; 78
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	98 2f       	mov	r25, r24
    22fc:	98 7f       	andi	r25, 0xF8	; 248
    22fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2300:	fa 81       	ldd	r31, Y+2	; 0x02
    2302:	84 81       	ldd	r24, Z+4	; 0x04
    2304:	89 2b       	or	r24, r25
    2306:	8c 93       	st	X, r24

	/* set timer1 INIITAL VALUE */
	TCNT1= Config_Ptr->initial_value;
    2308:	ac e4       	ldi	r26, 0x4C	; 76
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e9 81       	ldd	r30, Y+1	; 0x01
    230e:	fa 81       	ldd	r31, Y+2	; 0x02
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	11 96       	adiw	r26, 0x01	; 1
    2316:	9c 93       	st	X, r25
    2318:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == OVERFLOW_MODE)
    231a:	e9 81       	ldd	r30, Y+1	; 0x01
    231c:	fa 81       	ldd	r31, Y+2	; 0x02
    231e:	85 81       	ldd	r24, Z+5	; 0x05
    2320:	88 23       	and	r24, r24
    2322:	41 f4       	brne	.+16     	; 0x2334 <Timer1_init+0x5a>
	{
		/*
		 * SET CLOCK   (WGM 13:10 = 0)
		 * ENABLE INTERRUPT MODULE
		 */
		SET_BIT(TIMSK,TOIE1);
    2324:	a9 e5       	ldi	r26, 0x59	; 89
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e9 e5       	ldi	r30, 0x59	; 89
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	84 60       	ori	r24, 0x04	; 4
    2330:	8c 93       	st	X, r24
    2332:	1c c0       	rjmp	.+56     	; 0x236c <Timer1_init+0x92>
	}

	else if((Config_Ptr->mode) == COMPARE_MODE)
    2334:	e9 81       	ldd	r30, Y+1	; 0x01
    2336:	fa 81       	ldd	r31, Y+2	; 0x02
    2338:	85 81       	ldd	r24, Z+5	; 0x05
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	b9 f4       	brne	.+46     	; 0x236c <Timer1_init+0x92>
	{
		TCCR1B|=(1<<WGM12);
    233e:	ae e4       	ldi	r26, 0x4E	; 78
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	ee e4       	ldi	r30, 0x4E	; 78
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	88 60       	ori	r24, 0x08	; 8
    234a:	8c 93       	st	X, r24

		/* set timer1 Compare VALUE */
		OCR1A= Config_Ptr->compare_value;
    234c:	aa e4       	ldi	r26, 0x4A	; 74
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e9 81       	ldd	r30, Y+1	; 0x01
    2352:	fa 81       	ldd	r31, Y+2	; 0x02
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	11 96       	adiw	r26, 0x01	; 1
    235a:	9c 93       	st	X, r25
    235c:	8e 93       	st	-X, r24

		/* ENABLE INTERRUPT MODULE */
		SET_BIT(TIMSK,OCIE1A);
    235e:	a9 e5       	ldi	r26, 0x59	; 89
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e9 e5       	ldi	r30, 0x59	; 89
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	80 61       	ori	r24, 0x10	; 16
    236a:	8c 93       	st	X, r24
	}

}
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <Timer1_denit>:
/*
 * Description :
 * Function to deinit timer driver
 */
void Timer1_denit(void)
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * NO CLOCK SOURCE ( CS12:10 = 0)
	 */
	TCCR1B &= 0xF8;
    237e:	ae e4       	ldi	r26, 0x4E	; 78
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	ee e4       	ldi	r30, 0x4E	; 78
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	88 7f       	andi	r24, 0xF8	; 248
    238a:	8c 93       	st	X, r24
	OCR1A=0;
    238c:	ea e4       	ldi	r30, 0x4A	; 74
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	11 82       	std	Z+1, r1	; 0x01
    2392:	10 82       	st	Z, r1
	TCNT1=0;
    2394:	ec e4       	ldi	r30, 0x4C	; 76
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	11 82       	std	Z+1, r1	; 0x01
    239a:	10 82       	st	Z, r1
}
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <Timer1_setCallBack+0x6>
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	90 93 83 01 	sts	0x0183, r25
    23b8:	80 93 82 01 	sts	0x0182, r24
}
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <TWI_init>:
/*
 * Description:
 * Function responsible to initialize TWI/I2C.
 */
void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    23c6:	0f 93       	push	r16
    23c8:	1f 93       	push	r17
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <TWI_init+0xa>
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate 400 kbps using zero prescalar TWPS1=0,TWPS0=0 and F_CPU=8 Mhz */
	TWBR= ((F_CPU / (Config_Ptr->bit_rate)) -16) / 2;
    23d8:	00 e2       	ldi	r16, 0x20	; 32
    23da:	10 e0       	ldi	r17, 0x00	; 0
    23dc:	e9 81       	ldd	r30, Y+1	; 0x01
    23de:	fa 81       	ldd	r31, Y+2	; 0x02
    23e0:	24 81       	ldd	r18, Z+4	; 0x04
    23e2:	35 81       	ldd	r19, Z+5	; 0x05
    23e4:	46 81       	ldd	r20, Z+6	; 0x06
    23e6:	57 81       	ldd	r21, Z+7	; 0x07
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	92 e1       	ldi	r25, 0x12	; 18
    23ec:	aa e7       	ldi	r26, 0x7A	; 122
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 9c 13 	call	0x2738	; 0x2738 <__udivmodsi4>
    23f8:	da 01       	movw	r26, r20
    23fa:	c9 01       	movw	r24, r18
    23fc:	40 97       	sbiw	r24, 0x10	; 16
    23fe:	a1 09       	sbc	r26, r1
    2400:	b1 09       	sbc	r27, r1
    2402:	b6 95       	lsr	r27
    2404:	a7 95       	ror	r26
    2406:	97 95       	ror	r25
    2408:	87 95       	ror	r24
    240a:	f8 01       	movw	r30, r16
    240c:	80 83       	st	Z, r24
	TWSR=0x00;
    240e:	e1 e2       	ldi	r30, 0x21	; 33
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	10 82       	st	Z, r1

	/* set device address if any master device want to call me */
	TWAR=(Config_Ptr->TWI_Address);       /* my address=0x01 */
    2414:	22 e2       	ldi	r18, 0x22	; 34
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	e9 81       	ldd	r30, Y+1	; 0x01
    241a:	fa 81       	ldd	r31, Y+2	; 0x02
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	a2 81       	ldd	r26, Z+2	; 0x02
    2422:	b3 81       	ldd	r27, Z+3	; 0x03
    2424:	f9 01       	movw	r30, r18
    2426:	80 83       	st	Z, r24

	TWCR=(1<<TWEN);           /* ENABLE TWI */
    2428:	e6 e5       	ldi	r30, 0x56	; 86
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	84 e0       	ldi	r24, 0x04	; 4
    242e:	80 83       	st	Z, r24
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	08 95       	ret

0000243e <TWI_start>:
/*
 * Description:
 * Function responsible to send start bit in TWI/I2C frame.
 */
void TWI_start(void)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
	/*
	 * 1. CLEAR TWINT FLAG before sending the start bit  TWINT =1
	 * 2. ENABLE TWI   TWEN=1
	 * 3. SEND START BIT  TWSTA=1
	 */
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    2446:	e6 e5       	ldi	r30, 0x56	; 86
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	84 ea       	ldi	r24, 0xA4	; 164
    244c:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    244e:	e6 e5       	ldi	r30, 0x56	; 86
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	88 23       	and	r24, r24
    2456:	dc f7       	brge	.-10     	; 0x244e <TWI_start+0x10>

}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <TWI_stop>:
/*
 * Description:
 * Function responsible to send stop bit in TWI/I2C frame.
 */
void TWI_stop(void)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	/*
	 * 1. CLEAR TWINT FLAG before sending the stop bit  TWINT =1
	 * 2. ENABLE TWI   TWEN=1
	 * 3. SEND STOP BIT  TWSTA=1
	 */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2466:	e6 e5       	ldi	r30, 0x56	; 86
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	84 e9       	ldi	r24, 0x94	; 148
    246c:	80 83       	st	Z, r24
	 * the TWINT FLAG IS NOT RAISED AFTER STOP BIT IN CASE OF MASTER DEVICE
	 * so don't chack for TWINT flag in case of master as it will be stuck on pooling check
	 */


}
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <TWI_writeByte>:
/*
 * Description:
 * Function responsible to write byte in TWI/I2C frame.
 */
void TWI_writeByte(uint8 data)
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	0f 92       	push	r0
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	89 83       	std	Y+1, r24	; 0x01
	/* put data in TWI data register */
	TWDR=data;
    2480:	e3 e2       	ldi	r30, 0x23	; 35
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	80 83       	st	Z, r24
	/*
	 * CLEAR TWINT FLAG before sending data   TWINT=1
	 * enable the TWI MODULE  TWIN=1
	 */

	TWCR = (1<<TWINT) | (1<<TWEN);
    2488:	e6 e5       	ldi	r30, 0x56	; 86
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	84 e8       	ldi	r24, 0x84	; 132
    248e:	80 83       	st	Z, r24

	/* WAIT FOR TWINT FLAG TO BE raised ( DATA SENT SUCCESIVELY) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2490:	e6 e5       	ldi	r30, 0x56	; 86
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	88 23       	and	r24, r24
    2498:	dc f7       	brge	.-10     	; 0x2490 <TWI_writeByte+0x1c>

}
    249a:	0f 90       	pop	r0
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <TWI_readByteWithACK>:
/*
 * Description:
 * Function responsible to read byte and send ACK to confirm another read TWI/I2C frame.
 */
uint8 TWI_readByteWithACK(void)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
	 * CLEAR TWINT FLAG before sending data   TWINT=1
	 * enable the TWI MODULE  TWIN=1
	 * ENABLE ACK after reading/receiving data  TWEA=1
	 */

	TWCR =(1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    24aa:	e6 e5       	ldi	r30, 0x56	; 86
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	84 ec       	ldi	r24, 0xC4	; 196
    24b0:	80 83       	st	Z, r24

	/* WAIT FOR TWINT FLAG TO BE raised ( DATA RECEIVED SUCCESIVELY) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    24b2:	e6 e5       	ldi	r30, 0x56	; 86
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	88 23       	and	r24, r24
    24ba:	dc f7       	brge	.-10     	; 0x24b2 <TWI_readByteWithACK+0x10>

	/* Read data */
	return TWDR;
    24bc:	e3 e2       	ldi	r30, 0x23	; 35
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z

}
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <TWI_readByteWithNACK>:
/*
 * Description:
 * Function responsible to read byte and send NACK to confirm that is no need to read again TWI/I2C frame.
 */
uint8 TWI_readByteWithNACK(void)
{
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
	/*
	 * CLEAR TWINT FLAG before sending data   TWINT=1
	 * enable the TWI MODULE  TWIN=1
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    24d0:	e6 e5       	ldi	r30, 0x56	; 86
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	84 e8       	ldi	r24, 0x84	; 132
    24d6:	80 83       	st	Z, r24

	/* WAIT FOR TWINT FLAG TO BE raised ( DATA RECEIVED SUCCESIVELY) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    24d8:	e6 e5       	ldi	r30, 0x56	; 86
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	88 23       	and	r24, r24
    24e0:	dc f7       	brge	.-10     	; 0x24d8 <TWI_readByteWithNACK+0x10>

	/* Read data */
	return TWDR;
    24e2:	e3 e2       	ldi	r30, 0x23	; 35
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z

}
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <TWI_getStatus>:
/*
 * Description:
 * Function responsible to check if the send bit ( start /repeated start/stop/....) TWI/I2C frame.
 */
uint8 TWI_getStatus(void)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	0f 92       	push	r0
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
	uint8 status;

	/* masking to eliminate first 3 bits and get last 5 bits in status bits */
	status= TWSR & 0xF8;
    24f8:	e1 e2       	ldi	r30, 0x21	; 33
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	88 7f       	andi	r24, 0xF8	; 248
    2500:	89 83       	std	Y+1, r24	; 0x01

	return status;
    2502:	89 81       	ldd	r24, Y+1	; 0x01

}
    2504:	0f 90       	pop	r0
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	00 d0       	rcall	.+0      	; 0x2512 <UART_init+0x6>
    2512:	00 d0       	rcall	.+0      	; 0x2514 <UART_init+0x8>
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	9c 83       	std	Y+4, r25	; 0x04
    251a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    251c:	1a 82       	std	Y+2, r1	; 0x02
    251e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X=1 FOR Double transmission speed */
	UCSRA=(1<<U2X);
    2520:	eb e2       	ldi	r30, 0x2B	; 43
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB=(1<<RXEN)|(1<<TXEN);
    2528:	ea e2       	ldi	r30, 0x2A	; 42
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	88 e1       	ldi	r24, 0x18	; 24
    252e:	80 83       	st	Z, r24
	 * USBS    =   number stop bits
	 * UCSZ1:0 =   bits data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/

	SET_BIT(UCSRC,URSEL);
    2530:	a0 e4       	ldi	r26, 0x40	; 64
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e0 e4       	ldi	r30, 0x40	; 64
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	80 68       	ori	r24, 0x80	; 128
    253c:	8c 93       	st	X, r24

	/* insert parity in the bit 4 and bit 5 */
	UCSRC=(UCSRC &0xCF) | ((Config_Ptr->parity) << 4);
    253e:	a0 e4       	ldi	r26, 0x40	; 64
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e0 e4       	ldi	r30, 0x40	; 64
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	28 2f       	mov	r18, r24
    254a:	2f 7c       	andi	r18, 0xCF	; 207
    254c:	eb 81       	ldd	r30, Y+3	; 0x03
    254e:	fc 81       	ldd	r31, Y+4	; 0x04
    2550:	81 81       	ldd	r24, Z+1	; 0x01
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	82 95       	swap	r24
    2558:	92 95       	swap	r25
    255a:	90 7f       	andi	r25, 0xF0	; 240
    255c:	98 27       	eor	r25, r24
    255e:	80 7f       	andi	r24, 0xF0	; 240
    2560:	98 27       	eor	r25, r24
    2562:	82 2b       	or	r24, r18
    2564:	8c 93       	st	X, r24

	/* insert number of STOP BITs in the  bit 3 */
	UCSRC=(UCSRC &0xF8) | ((Config_Ptr->stop_bit) << 3);
    2566:	a0 e4       	ldi	r26, 0x40	; 64
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e0 e4       	ldi	r30, 0x40	; 64
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	28 2f       	mov	r18, r24
    2572:	28 7f       	andi	r18, 0xF8	; 248
    2574:	eb 81       	ldd	r30, Y+3	; 0x03
    2576:	fc 81       	ldd	r31, Y+4	; 0x04
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	88 2f       	mov	r24, r24
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	82 2b       	or	r24, r18
    258c:	8c 93       	st	X, r24

	/* insert number of data BITs in the bit1 , bit2 */
	UCSRC=(UCSRC &0xF6) | ((Config_Ptr->bit_data) << 1);
    258e:	a0 e4       	ldi	r26, 0x40	; 64
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e0 e4       	ldi	r30, 0x40	; 64
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	28 2f       	mov	r18, r24
    259a:	26 7f       	andi	r18, 0xF6	; 246
    259c:	eb 81       	ldd	r30, Y+3	; 0x03
    259e:	fc 81       	ldd	r31, Y+4	; 0x04
    25a0:	80 81       	ld	r24, Z
    25a2:	88 2f       	mov	r24, r24
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	82 2b       	or	r24, r18
    25ac:	8c 93       	st	X, r24


	/* Calculate the UBRR REGISTER VALUE */

	ubrr_value= ((F_CPU / (8 * (Config_Ptr->baud_rate)))-1);
    25ae:	eb 81       	ldd	r30, Y+3	; 0x03
    25b0:	fc 81       	ldd	r31, Y+4	; 0x04
    25b2:	83 81       	ldd	r24, Z+3	; 0x03
    25b4:	94 81       	ldd	r25, Z+4	; 0x04
    25b6:	a5 81       	ldd	r26, Z+5	; 0x05
    25b8:	b6 81       	ldd	r27, Z+6	; 0x06
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	aa 1f       	adc	r26, r26
    25c0:	bb 1f       	adc	r27, r27
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	aa 1f       	adc	r26, r26
    25c8:	bb 1f       	adc	r27, r27
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	aa 1f       	adc	r26, r26
    25d0:	bb 1f       	adc	r27, r27
    25d2:	9c 01       	movw	r18, r24
    25d4:	ad 01       	movw	r20, r26
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	92 e1       	ldi	r25, 0x12	; 18
    25da:	aa e7       	ldi	r26, 0x7A	; 122
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 9c 13 	call	0x2738	; 0x2738 <__udivmodsi4>
    25e6:	da 01       	movw	r26, r20
    25e8:	c9 01       	movw	r24, r18
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH */
	UBRRL= ubrr_value;
    25f0:	e9 e2       	ldi	r30, 0x29	; 41
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	80 83       	st	Z, r24
	UBRRH= ubrr_value >> 8;
    25f8:	e0 e4       	ldi	r30, 0x40	; 64
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	89 2f       	mov	r24, r25
    2602:	99 27       	eor	r25, r25
    2604:	80 83       	st	Z, r24
}
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(uint8 data)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	0f 92       	push	r0
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));          /*  WAIT until Uart Data Register Empty flag is raised to send data */
    2620:	eb e2       	ldi	r30, 0x2B	; 43
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	80 72       	andi	r24, 0x20	; 32
    262c:	90 70       	andi	r25, 0x00	; 0
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	b9 f3       	breq	.-18     	; 0x2620 <UART_sendByte+0xc>
	UDR=data;                                 /* send data  */
    2632:	ec e2       	ldi	r30, 0x2C	; 44
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	80 83       	st	Z, r24

}
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));           /*  wait until receive flag is raised ( wait for unread data) */
    264a:	eb e2       	ldi	r30, 0x2B	; 43
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	88 23       	and	r24, r24
    2652:	dc f7       	brge	.-10     	; 0x264a <UART_recieveByte+0x8>

	return UDR;                               /* this step made the folLowing
    2654:	ec e2       	ldi	r30, 0x2C	; 44
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
	                                             * 1. clear RXCflag
	                                             * 2. read data in UDR   */
}
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <UART_sendString>:
/*
 * Description :
 * Functional responsible for send string to another UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <UART_sendString+0x6>
    2666:	0f 92       	push	r0
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	9b 83       	std	Y+3, r25	; 0x03
    266e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2670:	19 82       	std	Y+1, r1	; 0x01
    2672:	0e c0       	rjmp	.+28     	; 0x2690 <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	9b 81       	ldd	r25, Y+3	; 0x03
    267e:	fc 01       	movw	r30, r24
    2680:	e2 0f       	add	r30, r18
    2682:	f3 1f       	adc	r31, r19
    2684:	80 81       	ld	r24, Z
    2686:	0e 94 0a 13 	call	0x2614	; 0x2614 <UART_sendByte>
		i++;
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	8f 5f       	subi	r24, 0xFF	; 255
    268e:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i=0;

	while(Str[i] != '\0')
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	9b 81       	ldd	r25, Y+3	; 0x03
    269a:	fc 01       	movw	r30, r24
    269c:	e2 0f       	add	r30, r18
    269e:	f3 1f       	adc	r31, r19
    26a0:	80 81       	ld	r24, Z
    26a2:	88 23       	and	r24, r24
    26a4:	39 f7       	brne	.-50     	; 0x2674 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	****************************************************************/
}
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <UART_recieveString>:
/*
 * Description :
 * Functional responsible for receive string to another UART device.
 */
void UART_recieveString(uint8 *Str)     /*  receive until #  */
{
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <UART_recieveString+0xa>
    26bc:	0f 92       	push	r0
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	9b 83       	std	Y+3, r25	; 0x03
    26c4:	8a 83       	std	Y+2, r24	; 0x02

	/* receive first byte */
	/* then receive the whole string until the '#' */

	uint8 i=0;
    26c6:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	9b 81       	ldd	r25, Y+3	; 0x03
    26d2:	8c 01       	movw	r16, r24
    26d4:	02 0f       	add	r16, r18
    26d6:	13 1f       	adc	r17, r19
    26d8:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    26dc:	f8 01       	movw	r30, r16
    26de:	80 83       	st	Z, r24
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <UART_recieveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	8f 5f       	subi	r24, 0xFF	; 255
    26e6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	8a 81       	ldd	r24, Y+2	; 0x02
    26f0:	9b 81       	ldd	r25, Y+3	; 0x03
    26f2:	8c 01       	movw	r16, r24
    26f4:	02 0f       	add	r16, r18
    26f6:	13 1f       	adc	r17, r19
    26f8:	0e 94 21 13 	call	0x2642	; 0x2642 <UART_recieveByte>
    26fc:	f8 01       	movw	r30, r16
    26fe:	80 83       	st	Z, r24
	uint8 i=0;
	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	9b 81       	ldd	r25, Y+3	; 0x03
    270a:	fc 01       	movw	r30, r24
    270c:	e2 0f       	add	r30, r18
    270e:	f3 1f       	adc	r31, r19
    2710:	80 81       	ld	r24, Z
    2712:	83 32       	cpi	r24, 0x23	; 35
    2714:	31 f7       	brne	.-52     	; 0x26e2 <UART_recieveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i]='\0';
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	9b 81       	ldd	r25, Y+3	; 0x03
    2720:	fc 01       	movw	r30, r24
    2722:	e2 0f       	add	r30, r18
    2724:	f3 1f       	adc	r31, r19
    2726:	10 82       	st	Z, r1
}
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	08 95       	ret

00002738 <__udivmodsi4>:
    2738:	a1 e2       	ldi	r26, 0x21	; 33
    273a:	1a 2e       	mov	r1, r26
    273c:	aa 1b       	sub	r26, r26
    273e:	bb 1b       	sub	r27, r27
    2740:	fd 01       	movw	r30, r26
    2742:	0d c0       	rjmp	.+26     	; 0x275e <__udivmodsi4_ep>

00002744 <__udivmodsi4_loop>:
    2744:	aa 1f       	adc	r26, r26
    2746:	bb 1f       	adc	r27, r27
    2748:	ee 1f       	adc	r30, r30
    274a:	ff 1f       	adc	r31, r31
    274c:	a2 17       	cp	r26, r18
    274e:	b3 07       	cpc	r27, r19
    2750:	e4 07       	cpc	r30, r20
    2752:	f5 07       	cpc	r31, r21
    2754:	20 f0       	brcs	.+8      	; 0x275e <__udivmodsi4_ep>
    2756:	a2 1b       	sub	r26, r18
    2758:	b3 0b       	sbc	r27, r19
    275a:	e4 0b       	sbc	r30, r20
    275c:	f5 0b       	sbc	r31, r21

0000275e <__udivmodsi4_ep>:
    275e:	66 1f       	adc	r22, r22
    2760:	77 1f       	adc	r23, r23
    2762:	88 1f       	adc	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	1a 94       	dec	r1
    2768:	69 f7       	brne	.-38     	; 0x2744 <__udivmodsi4_loop>
    276a:	60 95       	com	r22
    276c:	70 95       	com	r23
    276e:	80 95       	com	r24
    2770:	90 95       	com	r25
    2772:	9b 01       	movw	r18, r22
    2774:	ac 01       	movw	r20, r24
    2776:	bd 01       	movw	r22, r26
    2778:	cf 01       	movw	r24, r30
    277a:	08 95       	ret

0000277c <__prologue_saves__>:
    277c:	2f 92       	push	r2
    277e:	3f 92       	push	r3
    2780:	4f 92       	push	r4
    2782:	5f 92       	push	r5
    2784:	6f 92       	push	r6
    2786:	7f 92       	push	r7
    2788:	8f 92       	push	r8
    278a:	9f 92       	push	r9
    278c:	af 92       	push	r10
    278e:	bf 92       	push	r11
    2790:	cf 92       	push	r12
    2792:	df 92       	push	r13
    2794:	ef 92       	push	r14
    2796:	ff 92       	push	r15
    2798:	0f 93       	push	r16
    279a:	1f 93       	push	r17
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	ca 1b       	sub	r28, r26
    27a6:	db 0b       	sbc	r29, r27
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	09 94       	ijmp

000027b4 <__epilogue_restores__>:
    27b4:	2a 88       	ldd	r2, Y+18	; 0x12
    27b6:	39 88       	ldd	r3, Y+17	; 0x11
    27b8:	48 88       	ldd	r4, Y+16	; 0x10
    27ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    27bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    27be:	7d 84       	ldd	r7, Y+13	; 0x0d
    27c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    27c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    27c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    27c6:	b9 84       	ldd	r11, Y+9	; 0x09
    27c8:	c8 84       	ldd	r12, Y+8	; 0x08
    27ca:	df 80       	ldd	r13, Y+7	; 0x07
    27cc:	ee 80       	ldd	r14, Y+6	; 0x06
    27ce:	fd 80       	ldd	r15, Y+5	; 0x05
    27d0:	0c 81       	ldd	r16, Y+4	; 0x04
    27d2:	1b 81       	ldd	r17, Y+3	; 0x03
    27d4:	aa 81       	ldd	r26, Y+2	; 0x02
    27d6:	b9 81       	ldd	r27, Y+1	; 0x01
    27d8:	ce 0f       	add	r28, r30
    27da:	d1 1d       	adc	r29, r1
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	ed 01       	movw	r28, r26
    27e8:	08 95       	ret

000027ea <_exit>:
    27ea:	f8 94       	cli

000027ec <__stop_program>:
    27ec:	ff cf       	rjmp	.-2      	; 0x27ec <__stop_program>
