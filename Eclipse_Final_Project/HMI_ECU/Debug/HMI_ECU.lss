
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  00003aa4  00003b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800156  00800156  00003c2e  2**0
                  ALLOC
  3 .stab         000034d4  00000000  00000000  00003c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001318  00000000  00000000  00007104  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000841c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000855c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000086cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a315  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bfb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c39d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 36       	cpi	r26, 0x6B	; 107
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e3       	ldi	r26, 0x3A	; 58
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e3       	ldi	r24, 0x3A	; 58
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void send1PassToControl(void);
void secondsCounting(void);


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a8 97       	sbiw	r28, 0x28	; 40
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	SREG|=(1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24

	LCD_init();
     b68:	0e 94 73 19 	call	0x32e6	; 0x32e6 <LCD_init>

	UART_ConfigType Uart_Configurations={EIGHT_BITS,PARITY_DISABLED,ONE_STOP,9600};
     b6c:	ce 01       	movw	r24, r28
     b6e:	4d 96       	adiw	r24, 0x1d	; 29
     b70:	9d a3       	std	Y+37, r25	; 0x25
     b72:	8c a3       	std	Y+36, r24	; 0x24
     b74:	e2 e4       	ldi	r30, 0x42	; 66
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	ff a3       	std	Y+39, r31	; 0x27
     b7a:	ee a3       	std	Y+38, r30	; 0x26
     b7c:	f7 e0       	ldi	r31, 0x07	; 7
     b7e:	f8 a7       	std	Y+40, r31	; 0x28
     b80:	ee a1       	ldd	r30, Y+38	; 0x26
     b82:	ff a1       	ldd	r31, Y+39	; 0x27
     b84:	00 80       	ld	r0, Z
     b86:	8e a1       	ldd	r24, Y+38	; 0x26
     b88:	9f a1       	ldd	r25, Y+39	; 0x27
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	9f a3       	std	Y+39, r25	; 0x27
     b8e:	8e a3       	std	Y+38, r24	; 0x26
     b90:	ec a1       	ldd	r30, Y+36	; 0x24
     b92:	fd a1       	ldd	r31, Y+37	; 0x25
     b94:	00 82       	st	Z, r0
     b96:	8c a1       	ldd	r24, Y+36	; 0x24
     b98:	9d a1       	ldd	r25, Y+37	; 0x25
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	9d a3       	std	Y+37, r25	; 0x25
     b9e:	8c a3       	std	Y+36, r24	; 0x24
     ba0:	98 a5       	ldd	r25, Y+40	; 0x28
     ba2:	91 50       	subi	r25, 0x01	; 1
     ba4:	98 a7       	std	Y+40, r25	; 0x28
     ba6:	e8 a5       	ldd	r30, Y+40	; 0x28
     ba8:	ee 23       	and	r30, r30
     baa:	51 f7       	brne	.-44     	; 0xb80 <main+0x3a>
	UART_init(&Uart_Configurations);
     bac:	ce 01       	movw	r24, r28
     bae:	4d 96       	adiw	r24, 0x1d	; 29
     bb0:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_init>

	Timer1_setCallBack(secondsCounting);
     bb4:	80 e9       	ldi	r24, 0x90	; 144
     bb6:	90 e1       	ldi	r25, 0x10	; 16
     bb8:	0e 94 8a 1b 	call	0x3714	; 0x3714 <Timer1_setCallBack>

	UART_sendByte(MC1_READY);
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>

	UART_receive = UART_recieveByte();
     bc2:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
     bc6:	80 93 60 01 	sts	0x0160, r24

	if(UART_receive == PASSWORD_IS_NOT_EXIST)
     bca:	80 91 60 01 	lds	r24, 0x0160
     bce:	85 39       	cpi	r24, 0x95	; 149
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <main+0x8e>
     bd2:	0b c1       	rjmp	.+534    	; 0xdea <main+0x2a4>
	{
		do
		{
			take2PassFromUser();
     bd4:	0e 94 00 07 	call	0xe00	; 0xe00 <take2PassFromUser>
			send2PassToControl();
     bd8:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <send2PassToControl>

			UART_receive = UART_recieveByte();
     bdc:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
     be0:	80 93 60 01 	sts	0x0160, r24
			if(UART_receive == PASSWORD_NOT_SAVED)
     be4:	80 91 60 01 	lds	r24, 0x0160
     be8:	80 34       	cpi	r24, 0x40	; 64
     bea:	09 f0       	breq	.+2      	; 0xbee <main+0xa8>
     bec:	79 c0       	rjmp	.+242    	; 0xce0 <main+0x19a>
			{
				LCD_sendCommand(LCD_CLEAR_COMMAND);
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
				LCD_displayString("passwords not matched");
     bf4:	80 e6       	ldi	r24, 0x60	; 96
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	aa e7       	ldi	r26, 0x7A	; 122
     c02:	b4 e4       	ldi	r27, 0x44	; 68
     c04:	89 8f       	std	Y+25, r24	; 0x19
     c06:	9a 8f       	std	Y+26, r25	; 0x1a
     c08:	ab 8f       	std	Y+27, r26	; 0x1b
     c0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c0c:	69 8d       	ldd	r22, Y+25	; 0x19
     c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	4a ef       	ldi	r20, 0xFA	; 250
     c1a:	54 e4       	ldi	r21, 0x44	; 68
     c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	8d 8b       	std	Y+21, r24	; 0x15
     c26:	9e 8b       	std	Y+22, r25	; 0x16
     c28:	af 8b       	std	Y+23, r26	; 0x17
     c2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c2c:	6d 89       	ldd	r22, Y+21	; 0x15
     c2e:	7e 89       	ldd	r23, Y+22	; 0x16
     c30:	8f 89       	ldd	r24, Y+23	; 0x17
     c32:	98 8d       	ldd	r25, Y+24	; 0x18
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e8       	ldi	r20, 0x80	; 128
     c3a:	5f e3       	ldi	r21, 0x3F	; 63
     c3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c40:	88 23       	and	r24, r24
     c42:	2c f4       	brge	.+10     	; 0xc4e <main+0x108>
		__ticks = 1;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	9c 8b       	std	Y+20, r25	; 0x14
     c4a:	8b 8b       	std	Y+19, r24	; 0x13
     c4c:	3f c0       	rjmp	.+126    	; 0xccc <main+0x186>
	else if (__tmp > 65535)
     c4e:	6d 89       	ldd	r22, Y+21	; 0x15
     c50:	7e 89       	ldd	r23, Y+22	; 0x16
     c52:	8f 89       	ldd	r24, Y+23	; 0x17
     c54:	98 8d       	ldd	r25, Y+24	; 0x18
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	3f ef       	ldi	r19, 0xFF	; 255
     c5a:	4f e7       	ldi	r20, 0x7F	; 127
     c5c:	57 e4       	ldi	r21, 0x47	; 71
     c5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c62:	18 16       	cp	r1, r24
     c64:	4c f5       	brge	.+82     	; 0xcb8 <main+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c66:	69 8d       	ldd	r22, Y+25	; 0x19
     c68:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e2       	ldi	r20, 0x20	; 32
     c74:	51 e4       	ldi	r21, 0x41	; 65
     c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	bc 01       	movw	r22, r24
     c80:	cd 01       	movw	r24, r26
     c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9c 8b       	std	Y+20, r25	; 0x14
     c8c:	8b 8b       	std	Y+19, r24	; 0x13
     c8e:	0f c0       	rjmp	.+30     	; 0xcae <main+0x168>
     c90:	88 ec       	ldi	r24, 0xC8	; 200
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9a 8b       	std	Y+18, r25	; 0x12
     c96:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c98:	89 89       	ldd	r24, Y+17	; 0x11
     c9a:	9a 89       	ldd	r25, Y+18	; 0x12
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <main+0x156>
     ca0:	9a 8b       	std	Y+18, r25	; 0x12
     ca2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca4:	8b 89       	ldd	r24, Y+19	; 0x13
     ca6:	9c 89       	ldd	r25, Y+20	; 0x14
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	9c 8b       	std	Y+20, r25	; 0x14
     cac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cae:	8b 89       	ldd	r24, Y+19	; 0x13
     cb0:	9c 89       	ldd	r25, Y+20	; 0x14
     cb2:	00 97       	sbiw	r24, 0x00	; 0
     cb4:	69 f7       	brne	.-38     	; 0xc90 <main+0x14a>
     cb6:	14 c0       	rjmp	.+40     	; 0xce0 <main+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb8:	6d 89       	ldd	r22, Y+21	; 0x15
     cba:	7e 89       	ldd	r23, Y+22	; 0x16
     cbc:	8f 89       	ldd	r24, Y+23	; 0x17
     cbe:	98 8d       	ldd	r25, Y+24	; 0x18
     cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	9c 8b       	std	Y+20, r25	; 0x14
     cca:	8b 8b       	std	Y+19, r24	; 0x13
     ccc:	8b 89       	ldd	r24, Y+19	; 0x13
     cce:	9c 89       	ldd	r25, Y+20	; 0x14
     cd0:	98 8b       	std	Y+16, r25	; 0x10
     cd2:	8f 87       	std	Y+15, r24	; 0x0f
     cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd6:	98 89       	ldd	r25, Y+16	; 0x10
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <main+0x192>
     cdc:	98 8b       	std	Y+16, r25	; 0x10
     cde:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
			}

		}while(UART_receive == PASSWORD_NOT_SAVED);
     ce0:	80 91 60 01 	lds	r24, 0x0160
     ce4:	80 34       	cpi	r24, 0x40	; 64
     ce6:	09 f4       	brne	.+2      	; 0xcea <main+0x1a4>
     ce8:	75 cf       	rjmp	.-278    	; 0xbd4 <main+0x8e>

		LCD_sendCommand(LCD_CLEAR_COMMAND);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
		LCD_displayString("Password is ");
     cf0:	86 e7       	ldi	r24, 0x76	; 118
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"saved");
     cf8:	23 e8       	ldi	r18, 0x83	; 131
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	a9 01       	movw	r20, r18
     d02:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	aa e7       	ldi	r26, 0x7A	; 122
     d0c:	b4 e4       	ldi	r27, 0x44	; 68
     d0e:	8b 87       	std	Y+11, r24	; 0x0b
     d10:	9c 87       	std	Y+12, r25	; 0x0c
     d12:	ad 87       	std	Y+13, r26	; 0x0d
     d14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d16:	6b 85       	ldd	r22, Y+11	; 0x0b
     d18:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	4a ef       	ldi	r20, 0xFA	; 250
     d24:	54 e4       	ldi	r21, 0x44	; 68
     d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	8f 83       	std	Y+7, r24	; 0x07
     d30:	98 87       	std	Y+8, r25	; 0x08
     d32:	a9 87       	std	Y+9, r26	; 0x09
     d34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d36:	6f 81       	ldd	r22, Y+7	; 0x07
     d38:	78 85       	ldd	r23, Y+8	; 0x08
     d3a:	89 85       	ldd	r24, Y+9	; 0x09
     d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e8       	ldi	r20, 0x80	; 128
     d44:	5f e3       	ldi	r21, 0x3F	; 63
     d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d4a:	88 23       	and	r24, r24
     d4c:	2c f4       	brge	.+10     	; 0xd58 <main+0x212>
		__ticks = 1;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	9e 83       	std	Y+6, r25	; 0x06
     d54:	8d 83       	std	Y+5, r24	; 0x05
     d56:	3f c0       	rjmp	.+126    	; 0xdd6 <main+0x290>
	else if (__tmp > 65535)
     d58:	6f 81       	ldd	r22, Y+7	; 0x07
     d5a:	78 85       	ldd	r23, Y+8	; 0x08
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	3f ef       	ldi	r19, 0xFF	; 255
     d64:	4f e7       	ldi	r20, 0x7F	; 127
     d66:	57 e4       	ldi	r21, 0x47	; 71
     d68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d6c:	18 16       	cp	r1, r24
     d6e:	4c f5       	brge	.+82     	; 0xdc2 <main+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d70:	6b 85       	ldd	r22, Y+11	; 0x0b
     d72:	7c 85       	ldd	r23, Y+12	; 0x0c
     d74:	8d 85       	ldd	r24, Y+13	; 0x0d
     d76:	9e 85       	ldd	r25, Y+14	; 0x0e
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e2       	ldi	r20, 0x20	; 32
     d7e:	51 e4       	ldi	r21, 0x41	; 65
     d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	bc 01       	movw	r22, r24
     d8a:	cd 01       	movw	r24, r26
     d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	9e 83       	std	Y+6, r25	; 0x06
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	0f c0       	rjmp	.+30     	; 0xdb8 <main+0x272>
     d9a:	88 ec       	ldi	r24, 0xC8	; 200
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	8b 83       	std	Y+3, r24	; 0x03
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	9c 81       	ldd	r25, Y+4	; 0x04
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <main+0x260>
     daa:	9c 83       	std	Y+4, r25	; 0x04
     dac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	9e 81       	ldd	r25, Y+6	; 0x06
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	9e 83       	std	Y+6, r25	; 0x06
     db6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db8:	8d 81       	ldd	r24, Y+5	; 0x05
     dba:	9e 81       	ldd	r25, Y+6	; 0x06
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	69 f7       	brne	.-38     	; 0xd9a <main+0x254>
     dc0:	14 c0       	rjmp	.+40     	; 0xdea <main+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc2:	6f 81       	ldd	r22, Y+7	; 0x07
     dc4:	78 85       	ldd	r23, Y+8	; 0x08
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9e 83       	std	Y+6, r25	; 0x06
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	8d 81       	ldd	r24, Y+5	; 0x05
     dd8:	9e 81       	ldd	r25, Y+6	; 0x06
     dda:	9a 83       	std	Y+2, r25	; 0x02
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <main+0x29c>
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01



	while(1)
	{
		UART_receive = UART_recieveByte();
     dea:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
     dee:	80 93 60 01 	sts	0x0160, r24
		while(UART_receive != GO_TO_MAIN_OPTION);
     df2:	80 91 60 01 	lds	r24, 0x0160
     df6:	80 39       	cpi	r24, 0x90	; 144
     df8:	e1 f7       	brne	.-8      	; 0xdf2 <main+0x2ac>
		mainOptions();
     dfa:	0e 94 08 0b 	call	0x1610	; 0x1610 <mainOptions>
     dfe:	f5 cf       	rjmp	.-22     	; 0xdea <main+0x2a4>

00000e00 <take2PassFromUser>:

/*******************************************************************************
 *                              Functions Definitions                           *
 *******************************************************************************/
void take2PassFromUser()
{
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	c6 55       	subi	r28, 0x56	; 86
     e0e:	d0 40       	sbci	r29, 0x00	; 0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 count=0;
     e1a:	fe 01       	movw	r30, r28
     e1c:	eb 5a       	subi	r30, 0xAB	; 171
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	10 82       	st	Z, r1
	LCD_sendCommand(LCD_CLEAR_COMMAND);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
	LCD_displayString("plz enter pass:");
     e28:	89 e8       	ldi	r24, 0x89	; 137
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
	LCD_moveCursor(1,0);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_moveCursor>
     e38:	60 c1       	rjmp	.+704    	; 0x10fa <take2PassFromUser+0x2fa>
	while(count<5)
	{
		key=KEYPAD_getPressedKey();
     e3a:	0e 94 0a 14 	call	0x2814	; 0x2814 <KEYPAD_getPressedKey>
     e3e:	fe 01       	movw	r30, r28
     e40:	ea 5a       	subi	r30, 0xAA	; 170
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 83       	st	Z, r24
     e46:	fe 01       	movw	r30, r28
     e48:	ef 5a       	subi	r30, 0xAF	; 175
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a8 e4       	ldi	r26, 0x48	; 72
     e52:	b2 e4       	ldi	r27, 0x42	; 66
     e54:	80 83       	st	Z, r24
     e56:	91 83       	std	Z+1, r25	; 0x01
     e58:	a2 83       	std	Z+2, r26	; 0x02
     e5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	8e 01       	movw	r16, r28
     e5e:	03 5b       	subi	r16, 0xB3	; 179
     e60:	1f 4f       	sbci	r17, 0xFF	; 255
     e62:	fe 01       	movw	r30, r28
     e64:	ef 5a       	subi	r30, 0xAF	; 175
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	60 81       	ld	r22, Z
     e6a:	71 81       	ldd	r23, Z+1	; 0x01
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	4a ef       	ldi	r20, 0xFA	; 250
     e76:	54 e4       	ldi	r21, 0x44	; 68
     e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	f8 01       	movw	r30, r16
     e82:	80 83       	st	Z, r24
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	a2 83       	std	Z+2, r26	; 0x02
     e88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e8a:	fe 01       	movw	r30, r28
     e8c:	e3 5b       	subi	r30, 0xB3	; 179
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	44 f4       	brge	.+16     	; 0xeb8 <take2PassFromUser+0xb8>
		__ticks = 1;
     ea8:	fe 01       	movw	r30, r28
     eaa:	e5 5b       	subi	r30, 0xB5	; 181
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
     eb6:	64 c0       	rjmp	.+200    	; 0xf80 <take2PassFromUser+0x180>
	else if (__tmp > 65535)
     eb8:	fe 01       	movw	r30, r28
     eba:	e3 5b       	subi	r30, 0xB3	; 179
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	60 81       	ld	r22, Z
     ec0:	71 81       	ldd	r23, Z+1	; 0x01
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	4f e7       	ldi	r20, 0x7F	; 127
     ecc:	57 e4       	ldi	r21, 0x47	; 71
     ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	0c f0       	brlt	.+2      	; 0xed8 <take2PassFromUser+0xd8>
     ed6:	43 c0       	rjmp	.+134    	; 0xf5e <take2PassFromUser+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed8:	fe 01       	movw	r30, r28
     eda:	ef 5a       	subi	r30, 0xAF	; 175
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e2       	ldi	r20, 0x20	; 32
     eec:	51 e4       	ldi	r21, 0x41	; 65
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	8e 01       	movw	r16, r28
     ef8:	05 5b       	subi	r16, 0xB5	; 181
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	bc 01       	movw	r22, r24
     efe:	cd 01       	movw	r24, r26
     f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	f8 01       	movw	r30, r16
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	80 83       	st	Z, r24
     f0e:	1f c0       	rjmp	.+62     	; 0xf4e <take2PassFromUser+0x14e>
     f10:	fe 01       	movw	r30, r28
     f12:	e7 5b       	subi	r30, 0xB7	; 183
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	88 ec       	ldi	r24, 0xC8	; 200
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
     f1e:	fe 01       	movw	r30, r28
     f20:	e7 5b       	subi	r30, 0xB7	; 183
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <take2PassFromUser+0x128>
     f2c:	fe 01       	movw	r30, r28
     f2e:	e7 5b       	subi	r30, 0xB7	; 183
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f36:	de 01       	movw	r26, r28
     f38:	a5 5b       	subi	r26, 0xB5	; 181
     f3a:	bf 4f       	sbci	r27, 0xFF	; 255
     f3c:	fe 01       	movw	r30, r28
     f3e:	e5 5b       	subi	r30, 0xB5	; 181
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	11 96       	adiw	r26, 0x01	; 1
     f4a:	9c 93       	st	X, r25
     f4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	fe 01       	movw	r30, r28
     f50:	e5 5b       	subi	r30, 0xB5	; 181
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	d1 f6       	brne	.-76     	; 0xf10 <take2PassFromUser+0x110>
     f5c:	28 c0       	rjmp	.+80     	; 0xfae <take2PassFromUser+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5e:	8e 01       	movw	r16, r28
     f60:	05 5b       	subi	r16, 0xB5	; 181
     f62:	1f 4f       	sbci	r17, 0xFF	; 255
     f64:	fe 01       	movw	r30, r28
     f66:	e3 5b       	subi	r30, 0xB3	; 179
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	f8 01       	movw	r30, r16
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
     f80:	de 01       	movw	r26, r28
     f82:	a9 5b       	subi	r26, 0xB9	; 185
     f84:	bf 4f       	sbci	r27, 0xFF	; 255
     f86:	fe 01       	movw	r30, r28
     f88:	e5 5b       	subi	r30, 0xB5	; 181
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	11 96       	adiw	r26, 0x01	; 1
     f92:	9c 93       	st	X, r25
     f94:	8e 93       	st	-X, r24
     f96:	fe 01       	movw	r30, r28
     f98:	e9 5b       	subi	r30, 0xB9	; 185
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <take2PassFromUser+0x1a0>
     fa4:	fe 01       	movw	r30, r28
     fa6:	e9 5b       	subi	r30, 0xB9	; 185
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24
		_delay_ms(50);
		if(key <=9 && key>=0)
     fae:	fe 01       	movw	r30, r28
     fb0:	ea 5a       	subi	r30, 0xAA	; 170
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	8a 30       	cpi	r24, 0x0A	; 10
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <take2PassFromUser+0x1bc>
     fba:	9f c0       	rjmp	.+318    	; 0x10fa <take2PassFromUser+0x2fa>
		{
			LCD_displayCharacter('*');
     fbc:	8a e2       	ldi	r24, 0x2A	; 42
     fbe:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_displayCharacter>
			pass1[count]=key;
     fc2:	fe 01       	movw	r30, r28
     fc4:	eb 5a       	subi	r30, 0xAB	; 171
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	80 81       	ld	r24, Z
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	dc 01       	movw	r26, r24
     fd0:	aa 59       	subi	r26, 0x9A	; 154
     fd2:	be 4f       	sbci	r27, 0xFE	; 254
     fd4:	fe 01       	movw	r30, r28
     fd6:	ea 5a       	subi	r30, 0xAA	; 170
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	80 81       	ld	r24, Z
     fdc:	8c 93       	st	X, r24
			count++;
     fde:	de 01       	movw	r26, r28
     fe0:	ab 5a       	subi	r26, 0xAB	; 171
     fe2:	bf 4f       	sbci	r27, 0xFF	; 255
     fe4:	fe 01       	movw	r30, r28
     fe6:	eb 5a       	subi	r30, 0xAB	; 171
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	80 81       	ld	r24, Z
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	8c 93       	st	X, r24
     ff0:	fe 01       	movw	r30, r28
     ff2:	ed 5b       	subi	r30, 0xBD	; 189
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a8 ec       	ldi	r26, 0xC8	; 200
     ffc:	b3 e4       	ldi	r27, 0x43	; 67
     ffe:	80 83       	st	Z, r24
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	a2 83       	std	Z+2, r26	; 0x02
    1004:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1006:	8e 01       	movw	r16, r28
    1008:	01 5c       	subi	r16, 0xC1	; 193
    100a:	1f 4f       	sbci	r17, 0xFF	; 255
    100c:	fe 01       	movw	r30, r28
    100e:	ed 5b       	subi	r30, 0xBD	; 189
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	4a ef       	ldi	r20, 0xFA	; 250
    1020:	54 e4       	ldi	r21, 0x44	; 68
    1022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	f8 01       	movw	r30, r16
    102c:	80 83       	st	Z, r24
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	a2 83       	std	Z+2, r26	; 0x02
    1032:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1034:	fe 01       	movw	r30, r28
    1036:	ff 96       	adiw	r30, 0x3f	; 63
    1038:	60 81       	ld	r22, Z
    103a:	71 81       	ldd	r23, Z+1	; 0x01
    103c:	82 81       	ldd	r24, Z+2	; 0x02
    103e:	93 81       	ldd	r25, Z+3	; 0x03
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e8       	ldi	r20, 0x80	; 128
    1046:	5f e3       	ldi	r21, 0x3F	; 63
    1048:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    104c:	88 23       	and	r24, r24
    104e:	2c f4       	brge	.+10     	; 0x105a <take2PassFromUser+0x25a>
		__ticks = 1;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9e af       	std	Y+62, r25	; 0x3e
    1056:	8d af       	std	Y+61, r24	; 0x3d
    1058:	46 c0       	rjmp	.+140    	; 0x10e6 <take2PassFromUser+0x2e6>
	else if (__tmp > 65535)
    105a:	fe 01       	movw	r30, r28
    105c:	ff 96       	adiw	r30, 0x3f	; 63
    105e:	60 81       	ld	r22, Z
    1060:	71 81       	ldd	r23, Z+1	; 0x01
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	3f ef       	ldi	r19, 0xFF	; 255
    106a:	4f e7       	ldi	r20, 0x7F	; 127
    106c:	57 e4       	ldi	r21, 0x47	; 71
    106e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1072:	18 16       	cp	r1, r24
    1074:	64 f5       	brge	.+88     	; 0x10ce <take2PassFromUser+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1076:	fe 01       	movw	r30, r28
    1078:	ed 5b       	subi	r30, 0xBD	; 189
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e2       	ldi	r20, 0x20	; 32
    108a:	51 e4       	ldi	r21, 0x41	; 65
    108c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9e af       	std	Y+62, r25	; 0x3e
    10a2:	8d af       	std	Y+61, r24	; 0x3d
    10a4:	0f c0       	rjmp	.+30     	; 0x10c4 <take2PassFromUser+0x2c4>
    10a6:	88 ec       	ldi	r24, 0xC8	; 200
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9c af       	std	Y+60, r25	; 0x3c
    10ac:	8b af       	std	Y+59, r24	; 0x3b
    10ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    10b0:	9c ad       	ldd	r25, Y+60	; 0x3c
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <take2PassFromUser+0x2b2>
    10b6:	9c af       	std	Y+60, r25	; 0x3c
    10b8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    10bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	9e af       	std	Y+62, r25	; 0x3e
    10c2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    10c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	69 f7       	brne	.-38     	; 0x10a6 <take2PassFromUser+0x2a6>
    10cc:	16 c0       	rjmp	.+44     	; 0x10fa <take2PassFromUser+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ce:	fe 01       	movw	r30, r28
    10d0:	ff 96       	adiw	r30, 0x3f	; 63
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9e af       	std	Y+62, r25	; 0x3e
    10e4:	8d af       	std	Y+61, r24	; 0x3d
    10e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    10e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    10ea:	9a af       	std	Y+58, r25	; 0x3a
    10ec:	89 af       	std	Y+57, r24	; 0x39
    10ee:	89 ad       	ldd	r24, Y+57	; 0x39
    10f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <take2PassFromUser+0x2f2>
    10f6:	9a af       	std	Y+58, r25	; 0x3a
    10f8:	89 af       	std	Y+57, r24	; 0x39
	uint8 key;
	uint8 count=0;
	LCD_sendCommand(LCD_CLEAR_COMMAND);
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1,0);
	while(count<5)
    10fa:	fe 01       	movw	r30, r28
    10fc:	eb 5a       	subi	r30, 0xAB	; 171
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	80 81       	ld	r24, Z
    1102:	85 30       	cpi	r24, 0x05	; 5
    1104:	08 f4       	brcc	.+2      	; 0x1108 <take2PassFromUser+0x308>
    1106:	99 ce       	rjmp	.-718    	; 0xe3a <take2PassFromUser+0x3a>
			count++;
			_delay_ms(400);
		}
	}

	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
	LCD_displayString("plz enter = to");
    110e:	89 e9       	ldi	r24, 0x99	; 153
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"continue");
    1116:	28 ea       	ldi	r18, 0xA8	; 168
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	a9 01       	movw	r20, r18
    1120:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>
    1124:	78 c0       	rjmp	.+240    	; 0x1216 <take2PassFromUser+0x416>


	while(key != '=')
	{
		key=KEYPAD_getPressedKey();
    1126:	0e 94 0a 14 	call	0x2814	; 0x2814 <KEYPAD_getPressedKey>
    112a:	fe 01       	movw	r30, r28
    112c:	ea 5a       	subi	r30, 0xAA	; 170
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 83       	st	Z, r24
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a8 ec       	ldi	r26, 0xC8	; 200
    1138:	b3 e4       	ldi	r27, 0x43	; 67
    113a:	8d ab       	std	Y+53, r24	; 0x35
    113c:	9e ab       	std	Y+54, r25	; 0x36
    113e:	af ab       	std	Y+55, r26	; 0x37
    1140:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1142:	6d a9       	ldd	r22, Y+53	; 0x35
    1144:	7e a9       	ldd	r23, Y+54	; 0x36
    1146:	8f a9       	ldd	r24, Y+55	; 0x37
    1148:	98 ad       	ldd	r25, Y+56	; 0x38
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	4a ef       	ldi	r20, 0xFA	; 250
    1150:	54 e4       	ldi	r21, 0x44	; 68
    1152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	89 ab       	std	Y+49, r24	; 0x31
    115c:	9a ab       	std	Y+50, r25	; 0x32
    115e:	ab ab       	std	Y+51, r26	; 0x33
    1160:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1162:	69 a9       	ldd	r22, Y+49	; 0x31
    1164:	7a a9       	ldd	r23, Y+50	; 0x32
    1166:	8b a9       	ldd	r24, Y+51	; 0x33
    1168:	9c a9       	ldd	r25, Y+52	; 0x34
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e8       	ldi	r20, 0x80	; 128
    1170:	5f e3       	ldi	r21, 0x3F	; 63
    1172:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1176:	88 23       	and	r24, r24
    1178:	2c f4       	brge	.+10     	; 0x1184 <take2PassFromUser+0x384>
		__ticks = 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	98 ab       	std	Y+48, r25	; 0x30
    1180:	8f a7       	std	Y+47, r24	; 0x2f
    1182:	3f c0       	rjmp	.+126    	; 0x1202 <take2PassFromUser+0x402>
	else if (__tmp > 65535)
    1184:	69 a9       	ldd	r22, Y+49	; 0x31
    1186:	7a a9       	ldd	r23, Y+50	; 0x32
    1188:	8b a9       	ldd	r24, Y+51	; 0x33
    118a:	9c a9       	ldd	r25, Y+52	; 0x34
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	3f ef       	ldi	r19, 0xFF	; 255
    1190:	4f e7       	ldi	r20, 0x7F	; 127
    1192:	57 e4       	ldi	r21, 0x47	; 71
    1194:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1198:	18 16       	cp	r1, r24
    119a:	4c f5       	brge	.+82     	; 0x11ee <take2PassFromUser+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119c:	6d a9       	ldd	r22, Y+53	; 0x35
    119e:	7e a9       	ldd	r23, Y+54	; 0x36
    11a0:	8f a9       	ldd	r24, Y+55	; 0x37
    11a2:	98 ad       	ldd	r25, Y+56	; 0x38
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e2       	ldi	r20, 0x20	; 32
    11aa:	51 e4       	ldi	r21, 0x41	; 65
    11ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	98 ab       	std	Y+48, r25	; 0x30
    11c2:	8f a7       	std	Y+47, r24	; 0x2f
    11c4:	0f c0       	rjmp	.+30     	; 0x11e4 <take2PassFromUser+0x3e4>
    11c6:	88 ec       	ldi	r24, 0xC8	; 200
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	9e a7       	std	Y+46, r25	; 0x2e
    11cc:	8d a7       	std	Y+45, r24	; 0x2d
    11ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    11d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <take2PassFromUser+0x3d2>
    11d6:	9e a7       	std	Y+46, r25	; 0x2e
    11d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11da:	8f a5       	ldd	r24, Y+47	; 0x2f
    11dc:	98 a9       	ldd	r25, Y+48	; 0x30
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	98 ab       	std	Y+48, r25	; 0x30
    11e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11e6:	98 a9       	ldd	r25, Y+48	; 0x30
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	69 f7       	brne	.-38     	; 0x11c6 <take2PassFromUser+0x3c6>
    11ec:	14 c0       	rjmp	.+40     	; 0x1216 <take2PassFromUser+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ee:	69 a9       	ldd	r22, Y+49	; 0x31
    11f0:	7a a9       	ldd	r23, Y+50	; 0x32
    11f2:	8b a9       	ldd	r24, Y+51	; 0x33
    11f4:	9c a9       	ldd	r25, Y+52	; 0x34
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	98 ab       	std	Y+48, r25	; 0x30
    1200:	8f a7       	std	Y+47, r24	; 0x2f
    1202:	8f a5       	ldd	r24, Y+47	; 0x2f
    1204:	98 a9       	ldd	r25, Y+48	; 0x30
    1206:	9c a7       	std	Y+44, r25	; 0x2c
    1208:	8b a7       	std	Y+43, r24	; 0x2b
    120a:	8b a5       	ldd	r24, Y+43	; 0x2b
    120c:	9c a5       	ldd	r25, Y+44	; 0x2c
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <take2PassFromUser+0x40e>
    1212:	9c a7       	std	Y+44, r25	; 0x2c
    1214:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_sendCommand(LCD_CLEAR_COMMAND);
	LCD_displayString("plz enter = to");
	LCD_displayStringRowColumn(1,0,"continue");


	while(key != '=')
    1216:	fe 01       	movw	r30, r28
    1218:	ea 5a       	subi	r30, 0xAA	; 170
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
    121e:	8d 33       	cpi	r24, 0x3D	; 61
    1220:	09 f0       	breq	.+2      	; 0x1224 <take2PassFromUser+0x424>
    1222:	81 cf       	rjmp	.-254    	; 0x1126 <take2PassFromUser+0x326>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(400);
	}

	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
	LCD_displayString("plz re-enter the");
    122a:	81 eb       	ldi	r24, 0xB1	; 177
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"same pass:");
    1232:	22 ec       	ldi	r18, 0xC2	; 194
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	a9 01       	movw	r20, r18
    123c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>
	count=0;
    1240:	fe 01       	movw	r30, r28
    1242:	eb 5a       	subi	r30, 0xAB	; 171
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	10 82       	st	Z, r1
    1248:	0b c1       	rjmp	.+534    	; 0x1460 <take2PassFromUser+0x660>
	while(count<5)
	{
		key=KEYPAD_getPressedKey();
    124a:	0e 94 0a 14 	call	0x2814	; 0x2814 <KEYPAD_getPressedKey>
    124e:	fe 01       	movw	r30, r28
    1250:	ea 5a       	subi	r30, 0xAA	; 170
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	80 83       	st	Z, r24
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a8 e4       	ldi	r26, 0x48	; 72
    125c:	b2 e4       	ldi	r27, 0x42	; 66
    125e:	8f a3       	std	Y+39, r24	; 0x27
    1260:	98 a7       	std	Y+40, r25	; 0x28
    1262:	a9 a7       	std	Y+41, r26	; 0x29
    1264:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1266:	6f a1       	ldd	r22, Y+39	; 0x27
    1268:	78 a5       	ldd	r23, Y+40	; 0x28
    126a:	89 a5       	ldd	r24, Y+41	; 0x29
    126c:	9a a5       	ldd	r25, Y+42	; 0x2a
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	4a ef       	ldi	r20, 0xFA	; 250
    1274:	54 e4       	ldi	r21, 0x44	; 68
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	8b a3       	std	Y+35, r24	; 0x23
    1280:	9c a3       	std	Y+36, r25	; 0x24
    1282:	ad a3       	std	Y+37, r26	; 0x25
    1284:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1286:	6b a1       	ldd	r22, Y+35	; 0x23
    1288:	7c a1       	ldd	r23, Y+36	; 0x24
    128a:	8d a1       	ldd	r24, Y+37	; 0x25
    128c:	9e a1       	ldd	r25, Y+38	; 0x26
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    129a:	88 23       	and	r24, r24
    129c:	2c f4       	brge	.+10     	; 0x12a8 <take2PassFromUser+0x4a8>
		__ticks = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9a a3       	std	Y+34, r25	; 0x22
    12a4:	89 a3       	std	Y+33, r24	; 0x21
    12a6:	3f c0       	rjmp	.+126    	; 0x1326 <take2PassFromUser+0x526>
	else if (__tmp > 65535)
    12a8:	6b a1       	ldd	r22, Y+35	; 0x23
    12aa:	7c a1       	ldd	r23, Y+36	; 0x24
    12ac:	8d a1       	ldd	r24, Y+37	; 0x25
    12ae:	9e a1       	ldd	r25, Y+38	; 0x26
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	4c f5       	brge	.+82     	; 0x1312 <take2PassFromUser+0x512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c0:	6f a1       	ldd	r22, Y+39	; 0x27
    12c2:	78 a5       	ldd	r23, Y+40	; 0x28
    12c4:	89 a5       	ldd	r24, Y+41	; 0x29
    12c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9a a3       	std	Y+34, r25	; 0x22
    12e6:	89 a3       	std	Y+33, r24	; 0x21
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <take2PassFromUser+0x508>
    12ea:	88 ec       	ldi	r24, 0xC8	; 200
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	98 a3       	std	Y+32, r25	; 0x20
    12f0:	8f 8f       	std	Y+31, r24	; 0x1f
    12f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12f4:	98 a1       	ldd	r25, Y+32	; 0x20
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <take2PassFromUser+0x4f6>
    12fa:	98 a3       	std	Y+32, r25	; 0x20
    12fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1300:	9a a1       	ldd	r25, Y+34	; 0x22
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9a a3       	std	Y+34, r25	; 0x22
    1306:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1308:	89 a1       	ldd	r24, Y+33	; 0x21
    130a:	9a a1       	ldd	r25, Y+34	; 0x22
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	69 f7       	brne	.-38     	; 0x12ea <take2PassFromUser+0x4ea>
    1310:	14 c0       	rjmp	.+40     	; 0x133a <take2PassFromUser+0x53a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1312:	6b a1       	ldd	r22, Y+35	; 0x23
    1314:	7c a1       	ldd	r23, Y+36	; 0x24
    1316:	8d a1       	ldd	r24, Y+37	; 0x25
    1318:	9e a1       	ldd	r25, Y+38	; 0x26
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9a a3       	std	Y+34, r25	; 0x22
    1324:	89 a3       	std	Y+33, r24	; 0x21
    1326:	89 a1       	ldd	r24, Y+33	; 0x21
    1328:	9a a1       	ldd	r25, Y+34	; 0x22
    132a:	9e 8f       	std	Y+30, r25	; 0x1e
    132c:	8d 8f       	std	Y+29, r24	; 0x1d
    132e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1330:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <take2PassFromUser+0x532>
    1336:	9e 8f       	std	Y+30, r25	; 0x1e
    1338:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		if(key <=9 && key>=0)
    133a:	fe 01       	movw	r30, r28
    133c:	ea 5a       	subi	r30, 0xAA	; 170
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	8a 30       	cpi	r24, 0x0A	; 10
    1344:	08 f0       	brcs	.+2      	; 0x1348 <take2PassFromUser+0x548>
    1346:	8c c0       	rjmp	.+280    	; 0x1460 <take2PassFromUser+0x660>
		{
			LCD_displayCharacter('*');
    1348:	8a e2       	ldi	r24, 0x2A	; 42
    134a:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_displayCharacter>
			pass2[count]=key;
    134e:	fe 01       	movw	r30, r28
    1350:	eb 5a       	subi	r30, 0xAB	; 171
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	80 81       	ld	r24, Z
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	dc 01       	movw	r26, r24
    135c:	af 59       	subi	r26, 0x9F	; 159
    135e:	be 4f       	sbci	r27, 0xFE	; 254
    1360:	fe 01       	movw	r30, r28
    1362:	ea 5a       	subi	r30, 0xAA	; 170
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	80 81       	ld	r24, Z
    1368:	8c 93       	st	X, r24
			count++;
    136a:	de 01       	movw	r26, r28
    136c:	ab 5a       	subi	r26, 0xAB	; 171
    136e:	bf 4f       	sbci	r27, 0xFF	; 255
    1370:	fe 01       	movw	r30, r28
    1372:	eb 5a       	subi	r30, 0xAB	; 171
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	80 81       	ld	r24, Z
    1378:	8f 5f       	subi	r24, 0xFF	; 255
    137a:	8c 93       	st	X, r24
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a8 ec       	ldi	r26, 0xC8	; 200
    1382:	b3 e4       	ldi	r27, 0x43	; 67
    1384:	89 8f       	std	Y+25, r24	; 0x19
    1386:	9a 8f       	std	Y+26, r25	; 0x1a
    1388:	ab 8f       	std	Y+27, r26	; 0x1b
    138a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138c:	69 8d       	ldd	r22, Y+25	; 0x19
    138e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1390:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1392:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	4a ef       	ldi	r20, 0xFA	; 250
    139a:	54 e4       	ldi	r21, 0x44	; 68
    139c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	8d 8b       	std	Y+21, r24	; 0x15
    13a6:	9e 8b       	std	Y+22, r25	; 0x16
    13a8:	af 8b       	std	Y+23, r26	; 0x17
    13aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13ac:	6d 89       	ldd	r22, Y+21	; 0x15
    13ae:	7e 89       	ldd	r23, Y+22	; 0x16
    13b0:	8f 89       	ldd	r24, Y+23	; 0x17
    13b2:	98 8d       	ldd	r25, Y+24	; 0x18
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e8       	ldi	r20, 0x80	; 128
    13ba:	5f e3       	ldi	r21, 0x3F	; 63
    13bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c0:	88 23       	and	r24, r24
    13c2:	2c f4       	brge	.+10     	; 0x13ce <take2PassFromUser+0x5ce>
		__ticks = 1;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9c 8b       	std	Y+20, r25	; 0x14
    13ca:	8b 8b       	std	Y+19, r24	; 0x13
    13cc:	3f c0       	rjmp	.+126    	; 0x144c <take2PassFromUser+0x64c>
	else if (__tmp > 65535)
    13ce:	6d 89       	ldd	r22, Y+21	; 0x15
    13d0:	7e 89       	ldd	r23, Y+22	; 0x16
    13d2:	8f 89       	ldd	r24, Y+23	; 0x17
    13d4:	98 8d       	ldd	r25, Y+24	; 0x18
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	3f ef       	ldi	r19, 0xFF	; 255
    13da:	4f e7       	ldi	r20, 0x7F	; 127
    13dc:	57 e4       	ldi	r21, 0x47	; 71
    13de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e2:	18 16       	cp	r1, r24
    13e4:	4c f5       	brge	.+82     	; 0x1438 <take2PassFromUser+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e6:	69 8d       	ldd	r22, Y+25	; 0x19
    13e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e2       	ldi	r20, 0x20	; 32
    13f4:	51 e4       	ldi	r21, 0x41	; 65
    13f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	bc 01       	movw	r22, r24
    1400:	cd 01       	movw	r24, r26
    1402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	9c 8b       	std	Y+20, r25	; 0x14
    140c:	8b 8b       	std	Y+19, r24	; 0x13
    140e:	0f c0       	rjmp	.+30     	; 0x142e <take2PassFromUser+0x62e>
    1410:	88 ec       	ldi	r24, 0xC8	; 200
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9a 8b       	std	Y+18, r25	; 0x12
    1416:	89 8b       	std	Y+17, r24	; 0x11
    1418:	89 89       	ldd	r24, Y+17	; 0x11
    141a:	9a 89       	ldd	r25, Y+18	; 0x12
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <take2PassFromUser+0x61c>
    1420:	9a 8b       	std	Y+18, r25	; 0x12
    1422:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1424:	8b 89       	ldd	r24, Y+19	; 0x13
    1426:	9c 89       	ldd	r25, Y+20	; 0x14
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	9c 8b       	std	Y+20, r25	; 0x14
    142c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142e:	8b 89       	ldd	r24, Y+19	; 0x13
    1430:	9c 89       	ldd	r25, Y+20	; 0x14
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	69 f7       	brne	.-38     	; 0x1410 <take2PassFromUser+0x610>
    1436:	14 c0       	rjmp	.+40     	; 0x1460 <take2PassFromUser+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1438:	6d 89       	ldd	r22, Y+21	; 0x15
    143a:	7e 89       	ldd	r23, Y+22	; 0x16
    143c:	8f 89       	ldd	r24, Y+23	; 0x17
    143e:	98 8d       	ldd	r25, Y+24	; 0x18
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	9c 8b       	std	Y+20, r25	; 0x14
    144a:	8b 8b       	std	Y+19, r24	; 0x13
    144c:	8b 89       	ldd	r24, Y+19	; 0x13
    144e:	9c 89       	ldd	r25, Y+20	; 0x14
    1450:	98 8b       	std	Y+16, r25	; 0x10
    1452:	8f 87       	std	Y+15, r24	; 0x0f
    1454:	8f 85       	ldd	r24, Y+15	; 0x0f
    1456:	98 89       	ldd	r25, Y+16	; 0x10
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <take2PassFromUser+0x658>
    145c:	98 8b       	std	Y+16, r25	; 0x10
    145e:	8f 87       	std	Y+15, r24	; 0x0f

	LCD_sendCommand(LCD_CLEAR_COMMAND);
	LCD_displayString("plz re-enter the");
	LCD_displayStringRowColumn(1,0,"same pass:");
	count=0;
	while(count<5)
    1460:	fe 01       	movw	r30, r28
    1462:	eb 5a       	subi	r30, 0xAB	; 171
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	80 81       	ld	r24, Z
    1468:	85 30       	cpi	r24, 0x05	; 5
    146a:	08 f4       	brcc	.+2      	; 0x146e <take2PassFromUser+0x66e>
    146c:	ee ce       	rjmp	.-548    	; 0x124a <take2PassFromUser+0x44a>
    146e:	78 c0       	rjmp	.+240    	; 0x1560 <take2PassFromUser+0x760>
		}
	}

	while(key != '=')
	{
		key=KEYPAD_getPressedKey();
    1470:	0e 94 0a 14 	call	0x2814	; 0x2814 <KEYPAD_getPressedKey>
    1474:	fe 01       	movw	r30, r28
    1476:	ea 5a       	subi	r30, 0xAA	; 170
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 83       	st	Z, r24
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a8 ec       	ldi	r26, 0xC8	; 200
    1482:	b3 e4       	ldi	r27, 0x43	; 67
    1484:	8b 87       	std	Y+11, r24	; 0x0b
    1486:	9c 87       	std	Y+12, r25	; 0x0c
    1488:	ad 87       	std	Y+13, r26	; 0x0d
    148a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	6b 85       	ldd	r22, Y+11	; 0x0b
    148e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1490:	8d 85       	ldd	r24, Y+13	; 0x0d
    1492:	9e 85       	ldd	r25, Y+14	; 0x0e
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	4a ef       	ldi	r20, 0xFA	; 250
    149a:	54 e4       	ldi	r21, 0x44	; 68
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8f 83       	std	Y+7, r24	; 0x07
    14a6:	98 87       	std	Y+8, r25	; 0x08
    14a8:	a9 87       	std	Y+9, r26	; 0x09
    14aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ac:	6f 81       	ldd	r22, Y+7	; 0x07
    14ae:	78 85       	ldd	r23, Y+8	; 0x08
    14b0:	89 85       	ldd	r24, Y+9	; 0x09
    14b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <take2PassFromUser+0x6ce>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <take2PassFromUser+0x74c>
	else if (__tmp > 65535)
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <take2PassFromUser+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9e 83       	std	Y+6, r25	; 0x06
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	0f c0       	rjmp	.+30     	; 0x152e <take2PassFromUser+0x72e>
    1510:	88 ec       	ldi	r24, 0xC8	; 200
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	8b 83       	std	Y+3, r24	; 0x03
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <take2PassFromUser+0x71c>
    1520:	9c 83       	std	Y+4, r25	; 0x04
    1522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f7       	brne	.-38     	; 0x1510 <take2PassFromUser+0x710>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <take2PassFromUser+0x760>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	6f 81       	ldd	r22, Y+7	; 0x07
    153a:	78 85       	ldd	r23, Y+8	; 0x08
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <take2PassFromUser+0x758>
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	89 83       	std	Y+1, r24	; 0x01
			count++;
			_delay_ms(400);
		}
	}

	while(key != '=')
    1560:	fe 01       	movw	r30, r28
    1562:	ea 5a       	subi	r30, 0xAA	; 170
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 81       	ld	r24, Z
    1568:	8d 33       	cpi	r24, 0x3D	; 61
    156a:	09 f0       	breq	.+2      	; 0x156e <take2PassFromUser+0x76e>
    156c:	81 cf       	rjmp	.-254    	; 0x1470 <take2PassFromUser+0x670>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(400);
	}
}
    156e:	ca 5a       	subi	r28, 0xAA	; 170
    1570:	df 4f       	sbci	r29, 0xFF	; 255
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	08 95       	ret

00001586 <sendPass1>:

void sendPass1()
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
	uint8 count;
	for(count=0;count<5;count++)
    1590:	19 82       	std	Y+1, r1	; 0x01
    1592:	0c c0       	rjmp	.+24     	; 0x15ac <sendPass1+0x26>
	{
		UART_sendByte(pass1[count]);
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	88 2f       	mov	r24, r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	fc 01       	movw	r30, r24
    159c:	ea 59       	subi	r30, 0x9A	; 154
    159e:	fe 4f       	sbci	r31, 0xFE	; 254
    15a0:	80 81       	ld	r24, Z
    15a2:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
}

void sendPass1()
{
	uint8 count;
	for(count=0;count<5;count++)
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	8f 5f       	subi	r24, 0xFF	; 255
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	85 30       	cpi	r24, 0x05	; 5
    15b0:	88 f3       	brcs	.-30     	; 0x1594 <sendPass1+0xe>
	{
		UART_sendByte(pass1[count]);
	}
}
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <send2PassToControl>:

void send2PassToControl()
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(MC1_READY);
    15c2:	80 e1       	ldi	r24, 0x10	; 16
    15c4:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
	sendPass1();
    15c8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <sendPass1>

	UART_sendByte(MC1_READY);
    15cc:	80 e1       	ldi	r24, 0x10	; 16
    15ce:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
	sendPass2();
    15d2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <sendPass2>
}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <sendPass2>:

void sendPass2()
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	0f 92       	push	r0
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
	uint8 count;
	for(count=0;count<5;count++)
    15e6:	19 82       	std	Y+1, r1	; 0x01
    15e8:	0c c0       	rjmp	.+24     	; 0x1602 <sendPass2+0x26>
	{
		UART_sendByte(pass2[count]);
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	fc 01       	movw	r30, r24
    15f2:	ef 59       	subi	r30, 0x9F	; 159
    15f4:	fe 4f       	sbci	r31, 0xFE	; 254
    15f6:	80 81       	ld	r24, Z
    15f8:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
}

void sendPass2()
{
	uint8 count;
	for(count=0;count<5;count++)
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	8f 5f       	subi	r24, 0xFF	; 255
    1600:	89 83       	std	Y+1, r24	; 0x01
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	85 30       	cpi	r24, 0x05	; 5
    1606:	88 f3       	brcs	.-30     	; 0x15ea <sendPass2+0xe>
	{
		UART_sendByte(pass2[count]);
	}

}
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <mainOptions>:

void mainOptions()
{
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	cc 55       	subi	r28, 0x5C	; 92
    161e:	d0 40       	sbci	r29, 0x00	; 0
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
	LCD_displayString("+ : Open Door");
    1630:	8d ec       	ldi	r24, 0xCD	; 205
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    1638:	2b ed       	ldi	r18, 0xDB	; 219
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	a9 01       	movw	r20, r18
    1642:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>

	option=KEYPAD_getPressedKey();
    1646:	0e 94 0a 14 	call	0x2814	; 0x2814 <KEYPAD_getPressedKey>
    164a:	80 93 5a 01 	sts	0x015A, r24
    164e:	fe 01       	movw	r30, r28
    1650:	ed 5b       	subi	r30, 0xBD	; 189
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a8 e4       	ldi	r26, 0x48	; 72
    165a:	b2 e4       	ldi	r27, 0x42	; 66
    165c:	80 83       	st	Z, r24
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	a2 83       	std	Z+2, r26	; 0x02
    1662:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1664:	8e 01       	movw	r16, r28
    1666:	01 5c       	subi	r16, 0xC1	; 193
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	ed 5b       	subi	r30, 0xBD	; 189
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	4a ef       	ldi	r20, 0xFA	; 250
    167e:	54 e4       	ldi	r21, 0x44	; 68
    1680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	f8 01       	movw	r30, r16
    168a:	80 83       	st	Z, r24
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	a2 83       	std	Z+2, r26	; 0x02
    1690:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1692:	fe 01       	movw	r30, r28
    1694:	ff 96       	adiw	r30, 0x3f	; 63
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	93 81       	ldd	r25, Z+3	; 0x03
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e8       	ldi	r20, 0x80	; 128
    16a4:	5f e3       	ldi	r21, 0x3F	; 63
    16a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16aa:	88 23       	and	r24, r24
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <mainOptions+0xa8>
		__ticks = 1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9e af       	std	Y+62, r25	; 0x3e
    16b4:	8d af       	std	Y+61, r24	; 0x3d
    16b6:	46 c0       	rjmp	.+140    	; 0x1744 <mainOptions+0x134>
	else if (__tmp > 65535)
    16b8:	fe 01       	movw	r30, r28
    16ba:	ff 96       	adiw	r30, 0x3f	; 63
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	64 f5       	brge	.+88     	; 0x172c <mainOptions+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	fe 01       	movw	r30, r28
    16d6:	ed 5b       	subi	r30, 0xBD	; 189
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e2       	ldi	r20, 0x20	; 32
    16e8:	51 e4       	ldi	r21, 0x41	; 65
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9e af       	std	Y+62, r25	; 0x3e
    1700:	8d af       	std	Y+61, r24	; 0x3d
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <mainOptions+0x112>
    1704:	88 ec       	ldi	r24, 0xC8	; 200
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9c af       	std	Y+60, r25	; 0x3c
    170a:	8b af       	std	Y+59, r24	; 0x3b
    170c:	8b ad       	ldd	r24, Y+59	; 0x3b
    170e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <mainOptions+0x100>
    1714:	9c af       	std	Y+60, r25	; 0x3c
    1716:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1718:	8d ad       	ldd	r24, Y+61	; 0x3d
    171a:	9e ad       	ldd	r25, Y+62	; 0x3e
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	9e af       	std	Y+62, r25	; 0x3e
    1720:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1722:	8d ad       	ldd	r24, Y+61	; 0x3d
    1724:	9e ad       	ldd	r25, Y+62	; 0x3e
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	69 f7       	brne	.-38     	; 0x1704 <mainOptions+0xf4>
    172a:	16 c0       	rjmp	.+44     	; 0x1758 <mainOptions+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172c:	fe 01       	movw	r30, r28
    172e:	ff 96       	adiw	r30, 0x3f	; 63
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9e af       	std	Y+62, r25	; 0x3e
    1742:	8d af       	std	Y+61, r24	; 0x3d
    1744:	8d ad       	ldd	r24, Y+61	; 0x3d
    1746:	9e ad       	ldd	r25, Y+62	; 0x3e
    1748:	9a af       	std	Y+58, r25	; 0x3a
    174a:	89 af       	std	Y+57, r24	; 0x39
    174c:	89 ad       	ldd	r24, Y+57	; 0x39
    174e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <mainOptions+0x140>
    1754:	9a af       	std	Y+58, r25	; 0x3a
    1756:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);

	if( option == '+' )
    1758:	80 91 5a 01 	lds	r24, 0x015A
    175c:	8b 32       	cpi	r24, 0x2B	; 43
    175e:	09 f0       	breq	.+2      	; 0x1762 <mainOptions+0x152>
    1760:	20 c1       	rjmp	.+576    	; 0x19a2 <mainOptions+0x392>
	{
		UART_sendByte(OPEN_DOOR_OPTION);
    1762:	80 e8       	ldi	r24, 0x80	; 128
    1764:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
		do{
			take1PassFromUser();
    1768:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <take1PassFromUser>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 ea       	ldi	r26, 0xA0	; 160
    1772:	b0 e4       	ldi	r27, 0x40	; 64
    1774:	8d ab       	std	Y+53, r24	; 0x35
    1776:	9e ab       	std	Y+54, r25	; 0x36
    1778:	af ab       	std	Y+55, r26	; 0x37
    177a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177c:	6d a9       	ldd	r22, Y+53	; 0x35
    177e:	7e a9       	ldd	r23, Y+54	; 0x36
    1780:	8f a9       	ldd	r24, Y+55	; 0x37
    1782:	98 ad       	ldd	r25, Y+56	; 0x38
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a ef       	ldi	r20, 0xFA	; 250
    178a:	54 e4       	ldi	r21, 0x44	; 68
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	89 ab       	std	Y+49, r24	; 0x31
    1796:	9a ab       	std	Y+50, r25	; 0x32
    1798:	ab ab       	std	Y+51, r26	; 0x33
    179a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    179c:	69 a9       	ldd	r22, Y+49	; 0x31
    179e:	7a a9       	ldd	r23, Y+50	; 0x32
    17a0:	8b a9       	ldd	r24, Y+51	; 0x33
    17a2:	9c a9       	ldd	r25, Y+52	; 0x34
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	2c f4       	brge	.+10     	; 0x17be <mainOptions+0x1ae>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	98 ab       	std	Y+48, r25	; 0x30
    17ba:	8f a7       	std	Y+47, r24	; 0x2f
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <mainOptions+0x22c>
	else if (__tmp > 65535)
    17be:	69 a9       	ldd	r22, Y+49	; 0x31
    17c0:	7a a9       	ldd	r23, Y+50	; 0x32
    17c2:	8b a9       	ldd	r24, Y+51	; 0x33
    17c4:	9c a9       	ldd	r25, Y+52	; 0x34
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	57 e4       	ldi	r21, 0x47	; 71
    17ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	4c f5       	brge	.+82     	; 0x1828 <mainOptions+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	6d a9       	ldd	r22, Y+53	; 0x35
    17d8:	7e a9       	ldd	r23, Y+54	; 0x36
    17da:	8f a9       	ldd	r24, Y+55	; 0x37
    17dc:	98 ad       	ldd	r25, Y+56	; 0x38
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	98 ab       	std	Y+48, r25	; 0x30
    17fc:	8f a7       	std	Y+47, r24	; 0x2f
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <mainOptions+0x20e>
    1800:	88 ec       	ldi	r24, 0xC8	; 200
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9e a7       	std	Y+46, r25	; 0x2e
    1806:	8d a7       	std	Y+45, r24	; 0x2d
    1808:	8d a5       	ldd	r24, Y+45	; 0x2d
    180a:	9e a5       	ldd	r25, Y+46	; 0x2e
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <mainOptions+0x1fc>
    1810:	9e a7       	std	Y+46, r25	; 0x2e
    1812:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	8f a5       	ldd	r24, Y+47	; 0x2f
    1816:	98 a9       	ldd	r25, Y+48	; 0x30
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	98 ab       	std	Y+48, r25	; 0x30
    181c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1820:	98 a9       	ldd	r25, Y+48	; 0x30
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	69 f7       	brne	.-38     	; 0x1800 <mainOptions+0x1f0>
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <mainOptions+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	69 a9       	ldd	r22, Y+49	; 0x31
    182a:	7a a9       	ldd	r23, Y+50	; 0x32
    182c:	8b a9       	ldd	r24, Y+51	; 0x33
    182e:	9c a9       	ldd	r25, Y+52	; 0x34
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	98 ab       	std	Y+48, r25	; 0x30
    183a:	8f a7       	std	Y+47, r24	; 0x2f
    183c:	8f a5       	ldd	r24, Y+47	; 0x2f
    183e:	98 a9       	ldd	r25, Y+48	; 0x30
    1840:	9c a7       	std	Y+44, r25	; 0x2c
    1842:	8b a7       	std	Y+43, r24	; 0x2b
    1844:	8b a5       	ldd	r24, Y+43	; 0x2b
    1846:	9c a5       	ldd	r25, Y+44	; 0x2c
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <mainOptions+0x238>
    184c:	9c a7       	std	Y+44, r25	; 0x2c
    184e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(5);
			send1PassToControl();
    1850:	0e 94 73 10 	call	0x20e6	; 0x20e6 <send1PassToControl>
			UART_receive = UART_recieveByte();
    1854:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    1858:	80 93 60 01 	sts	0x0160, r24
		}while(UART_receive == PASSWORD_NOT_MATCHED);
    185c:	80 91 60 01 	lds	r24, 0x0160
    1860:	80 36       	cpi	r24, 0x60	; 96
    1862:	09 f4       	brne	.+2      	; 0x1866 <mainOptions+0x256>
    1864:	81 cf       	rjmp	.-254    	; 0x1768 <mainOptions+0x158>

		if(UART_receive == PASSWORD_MATCHED)
    1866:	80 91 60 01 	lds	r24, 0x0160
    186a:	80 35       	cpi	r24, 0x50	; 80
    186c:	09 f0       	breq	.+2      	; 0x1870 <mainOptions+0x260>
    186e:	3f c0       	rjmp	.+126    	; 0x18ee <mainOptions+0x2de>
		{
			UART_receive = UART_recieveByte();
    1870:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    1874:	80 93 60 01 	sts	0x0160, r24
			if(UART_receive == DOOR_IS_UNLOCKING)
    1878:	80 91 60 01 	lds	r24, 0x0160
    187c:	83 39       	cpi	r24, 0x93	; 147
    187e:	89 f4       	brne	.+34     	; 0x18a2 <mainOptions+0x292>
			{
				LCD_sendCommand(LCD_CLEAR_COMMAND);
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
				LCD_displayStringRowColumn(0,5,"Door is");
    1886:	2b ee       	ldi	r18, 0xEB	; 235
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	65 e0       	ldi	r22, 0x05	; 5
    188e:	a9 01       	movw	r20, r18
    1890:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,4,"Unlocking");
    1894:	23 ef       	ldi	r18, 0xF3	; 243
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	64 e0       	ldi	r22, 0x04	; 4
    189c:	a9 01       	movw	r20, r18
    189e:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>
			}

			UART_receive = UART_recieveByte();
    18a2:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    18a6:	80 93 60 01 	sts	0x0160, r24
			if(UART_receive == DOOR_IS_OPENED)
    18aa:	80 91 60 01 	lds	r24, 0x0160
    18ae:	82 39       	cpi	r24, 0x92	; 146
    18b0:	51 f4       	brne	.+20     	; 0x18c6 <mainOptions+0x2b6>
			{
				LCD_sendCommand(LCD_CLEAR_COMMAND);
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
				LCD_displayStringRowColumn(0,0,"Door is Opened");
    18b8:	2d ef       	ldi	r18, 0xFD	; 253
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	a9 01       	movw	r20, r18
    18c2:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>
			}

			UART_receive = UART_recieveByte();
    18c6:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    18ca:	80 93 60 01 	sts	0x0160, r24
			if(UART_receive == DOOR_IS_LOCKING)
    18ce:	80 91 60 01 	lds	r24, 0x0160
    18d2:	81 39       	cpi	r24, 0x91	; 145
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <mainOptions+0x2c8>
    18d6:	56 c2       	rjmp	.+1196   	; 0x1d84 <mainOptions+0x774>
			{
				LCD_sendCommand(LCD_CLEAR_COMMAND);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
				LCD_displayStringRowColumn(0,0,"Door is Locking");
    18de:	2c e0       	ldi	r18, 0x0C	; 12
    18e0:	31 e0       	ldi	r19, 0x01	; 1
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	a9 01       	movw	r20, r18
    18e8:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>
    18ec:	4b c2       	rjmp	.+1174   	; 0x1d84 <mainOptions+0x774>
			}
		}
		else if(UART_receive == PASS_WRONG_3_TIMES)
    18ee:	80 91 60 01 	lds	r24, 0x0160
    18f2:	86 39       	cpi	r24, 0x96	; 150
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <mainOptions+0x2e8>
    18f6:	46 c2       	rjmp	.+1164   	; 0x1d84 <mainOptions+0x774>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
			LCD_displayString("ERROR,Alarm mode");
    18fe:	8c e1       	ldi	r24, 0x1C	; 28
    1900:	91 e0       	ldi	r25, 0x01	; 1
    1902:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"is activated");
    1906:	2d e2       	ldi	r18, 0x2D	; 45
    1908:	31 e0       	ldi	r19, 0x01	; 1
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	a9 01       	movw	r20, r18
    1910:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>

			Timer1_ConfigType Timer1_Configurations={0,7812,F_CPU_1024,COMPARE_MODE};  /*setup timer1 for 60 sec blocking keypad */
    1914:	ce 01       	movw	r24, r28
    1916:	89 5b       	subi	r24, 0xB9	; 185
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	65 96       	adiw	r28, 0x15	; 21
    191c:	9f af       	std	Y+63, r25	; 0x3f
    191e:	8e af       	std	Y+62, r24	; 0x3e
    1920:	65 97       	sbiw	r28, 0x15	; 21
    1922:	8f e4       	ldi	r24, 0x4F	; 79
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	67 96       	adiw	r28, 0x17	; 23
    1928:	9f af       	std	Y+63, r25	; 0x3f
    192a:	8e af       	std	Y+62, r24	; 0x3e
    192c:	67 97       	sbiw	r28, 0x17	; 23
    192e:	96 e0       	ldi	r25, 0x06	; 6
    1930:	68 96       	adiw	r28, 0x18	; 24
    1932:	9f af       	std	Y+63, r25	; 0x3f
    1934:	68 97       	sbiw	r28, 0x18	; 24
    1936:	67 96       	adiw	r28, 0x17	; 23
    1938:	ee ad       	ldd	r30, Y+62	; 0x3e
    193a:	ff ad       	ldd	r31, Y+63	; 0x3f
    193c:	67 97       	sbiw	r28, 0x17	; 23
    193e:	00 80       	ld	r0, Z
    1940:	67 96       	adiw	r28, 0x17	; 23
    1942:	8e ad       	ldd	r24, Y+62	; 0x3e
    1944:	9f ad       	ldd	r25, Y+63	; 0x3f
    1946:	67 97       	sbiw	r28, 0x17	; 23
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	67 96       	adiw	r28, 0x17	; 23
    194c:	9f af       	std	Y+63, r25	; 0x3f
    194e:	8e af       	std	Y+62, r24	; 0x3e
    1950:	67 97       	sbiw	r28, 0x17	; 23
    1952:	65 96       	adiw	r28, 0x15	; 21
    1954:	ee ad       	ldd	r30, Y+62	; 0x3e
    1956:	ff ad       	ldd	r31, Y+63	; 0x3f
    1958:	65 97       	sbiw	r28, 0x15	; 21
    195a:	00 82       	st	Z, r0
    195c:	65 96       	adiw	r28, 0x15	; 21
    195e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1960:	9f ad       	ldd	r25, Y+63	; 0x3f
    1962:	65 97       	sbiw	r28, 0x15	; 21
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	65 96       	adiw	r28, 0x15	; 21
    1968:	9f af       	std	Y+63, r25	; 0x3f
    196a:	8e af       	std	Y+62, r24	; 0x3e
    196c:	65 97       	sbiw	r28, 0x15	; 21
    196e:	68 96       	adiw	r28, 0x18	; 24
    1970:	9f ad       	ldd	r25, Y+63	; 0x3f
    1972:	68 97       	sbiw	r28, 0x18	; 24
    1974:	91 50       	subi	r25, 0x01	; 1
    1976:	68 96       	adiw	r28, 0x18	; 24
    1978:	9f af       	std	Y+63, r25	; 0x3f
    197a:	68 97       	sbiw	r28, 0x18	; 24
    197c:	68 96       	adiw	r28, 0x18	; 24
    197e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1980:	68 97       	sbiw	r28, 0x18	; 24
    1982:	ee 23       	and	r30, r30
    1984:	c1 f6       	brne	.-80     	; 0x1936 <mainOptions+0x326>
			Timer1_init(&Timer1_Configurations);                                       /* during alarm mode */
    1986:	ce 01       	movw	r24, r28
    1988:	89 5b       	subi	r24, 0xB9	; 185
    198a:	9f 4f       	sbci	r25, 0xFF	; 255
    198c:	0e 94 26 1b 	call	0x364c	; 0x364c <Timer1_init>
			second_counter=0;
    1990:	10 92 57 01 	sts	0x0157, r1
			while(second_counter != 60);
    1994:	80 91 57 01 	lds	r24, 0x0157
    1998:	8c 33       	cpi	r24, 0x3C	; 60
    199a:	e1 f7       	brne	.-8      	; 0x1994 <mainOptions+0x384>
			Timer1_denit();
    199c:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Timer1_denit>
    19a0:	f1 c1       	rjmp	.+994    	; 0x1d84 <mainOptions+0x774>
		}
	}

	else if( option == '-')
    19a2:	80 91 5a 01 	lds	r24, 0x015A
    19a6:	8d 32       	cpi	r24, 0x2D	; 45
    19a8:	09 f0       	breq	.+2      	; 0x19ac <mainOptions+0x39c>
    19aa:	ec c1       	rjmp	.+984    	; 0x1d84 <mainOptions+0x774>
	{
		UART_sendByte(CHANGE_PASS_OPTION);
    19ac:	81 e8       	ldi	r24, 0x81	; 129
    19ae:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
		do
		{
			take1PassFromUser();
    19b2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <take1PassFromUser>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 ea       	ldi	r26, 0xA0	; 160
    19bc:	b0 e4       	ldi	r27, 0x40	; 64
    19be:	8f a3       	std	Y+39, r24	; 0x27
    19c0:	98 a7       	std	Y+40, r25	; 0x28
    19c2:	a9 a7       	std	Y+41, r26	; 0x29
    19c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c6:	6f a1       	ldd	r22, Y+39	; 0x27
    19c8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ca:	89 a5       	ldd	r24, Y+41	; 0x29
    19cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	4a ef       	ldi	r20, 0xFA	; 250
    19d4:	54 e4       	ldi	r21, 0x44	; 68
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	8b a3       	std	Y+35, r24	; 0x23
    19e0:	9c a3       	std	Y+36, r25	; 0x24
    19e2:	ad a3       	std	Y+37, r26	; 0x25
    19e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19e6:	6b a1       	ldd	r22, Y+35	; 0x23
    19e8:	7c a1       	ldd	r23, Y+36	; 0x24
    19ea:	8d a1       	ldd	r24, Y+37	; 0x25
    19ec:	9e a1       	ldd	r25, Y+38	; 0x26
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e8       	ldi	r20, 0x80	; 128
    19f4:	5f e3       	ldi	r21, 0x3F	; 63
    19f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fa:	88 23       	and	r24, r24
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <mainOptions+0x3f8>
		__ticks = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9a a3       	std	Y+34, r25	; 0x22
    1a04:	89 a3       	std	Y+33, r24	; 0x21
    1a06:	3f c0       	rjmp	.+126    	; 0x1a86 <mainOptions+0x476>
	else if (__tmp > 65535)
    1a08:	6b a1       	ldd	r22, Y+35	; 0x23
    1a0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	57 e4       	ldi	r21, 0x47	; 71
    1a18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	4c f5       	brge	.+82     	; 0x1a72 <mainOptions+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a20:	6f a1       	ldd	r22, Y+39	; 0x27
    1a22:	78 a5       	ldd	r23, Y+40	; 0x28
    1a24:	89 a5       	ldd	r24, Y+41	; 0x29
    1a26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9a a3       	std	Y+34, r25	; 0x22
    1a46:	89 a3       	std	Y+33, r24	; 0x21
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <mainOptions+0x458>
    1a4a:	88 ec       	ldi	r24, 0xC8	; 200
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	98 a3       	std	Y+32, r25	; 0x20
    1a50:	8f 8f       	std	Y+31, r24	; 0x1f
    1a52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a54:	98 a1       	ldd	r25, Y+32	; 0x20
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <mainOptions+0x446>
    1a5a:	98 a3       	std	Y+32, r25	; 0x20
    1a5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a60:	9a a1       	ldd	r25, Y+34	; 0x22
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	9a a3       	std	Y+34, r25	; 0x22
    1a66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	89 a1       	ldd	r24, Y+33	; 0x21
    1a6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <mainOptions+0x43a>
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <mainOptions+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a72:	6b a1       	ldd	r22, Y+35	; 0x23
    1a74:	7c a1       	ldd	r23, Y+36	; 0x24
    1a76:	8d a1       	ldd	r24, Y+37	; 0x25
    1a78:	9e a1       	ldd	r25, Y+38	; 0x26
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9a a3       	std	Y+34, r25	; 0x22
    1a84:	89 a3       	std	Y+33, r24	; 0x21
    1a86:	89 a1       	ldd	r24, Y+33	; 0x21
    1a88:	9a a1       	ldd	r25, Y+34	; 0x22
    1a8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <mainOptions+0x482>
    1a96:	9e 8f       	std	Y+30, r25	; 0x1e
    1a98:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(5);
			send1PassToControl();
    1a9a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <send1PassToControl>
			UART_receive = UART_recieveByte();
    1a9e:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    1aa2:	80 93 60 01 	sts	0x0160, r24
		}while(UART_receive == PASSWORD_NOT_MATCHED);
    1aa6:	80 91 60 01 	lds	r24, 0x0160
    1aaa:	80 36       	cpi	r24, 0x60	; 96
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <mainOptions+0x4a0>
    1aae:	81 cf       	rjmp	.-254    	; 0x19b2 <mainOptions+0x3a2>

		if(UART_receive == PASSWORD_MATCHED)
    1ab0:	80 91 60 01 	lds	r24, 0x0160
    1ab4:	80 35       	cpi	r24, 0x50	; 80
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <mainOptions+0x4aa>
    1ab8:	0c c1       	rjmp	.+536    	; 0x1cd2 <mainOptions+0x6c2>
		{
			do
			{
				take2PassFromUser();
    1aba:	0e 94 00 07 	call	0xe00	; 0xe00 <take2PassFromUser>
				send2PassToControl();
    1abe:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <send2PassToControl>

				UART_receive = UART_recieveByte();
    1ac2:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    1ac6:	80 93 60 01 	sts	0x0160, r24
				if(UART_receive == PASSWORD_NOT_SAVED){
    1aca:	80 91 60 01 	lds	r24, 0x0160
    1ace:	80 34       	cpi	r24, 0x40	; 64
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <mainOptions+0x4c4>
    1ad2:	79 c0       	rjmp	.+242    	; 0x1bc6 <mainOptions+0x5b6>
					LCD_sendCommand(LCD_CLEAR_COMMAND);
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
					LCD_displayString("passwords not matched");
    1ada:	80 e6       	ldi	r24, 0x60	; 96
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	aa e7       	ldi	r26, 0x7A	; 122
    1ae8:	b4 e4       	ldi	r27, 0x44	; 68
    1aea:	89 8f       	std	Y+25, r24	; 0x19
    1aec:	9a 8f       	std	Y+26, r25	; 0x1a
    1aee:	ab 8f       	std	Y+27, r26	; 0x1b
    1af0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af2:	69 8d       	ldd	r22, Y+25	; 0x19
    1af4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a ef       	ldi	r20, 0xFA	; 250
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8d 8b       	std	Y+21, r24	; 0x15
    1b0c:	9e 8b       	std	Y+22, r25	; 0x16
    1b0e:	af 8b       	std	Y+23, r26	; 0x17
    1b10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <mainOptions+0x524>
		__ticks = 1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9c 8b       	std	Y+20, r25	; 0x14
    1b30:	8b 8b       	std	Y+19, r24	; 0x13
    1b32:	3f c0       	rjmp	.+126    	; 0x1bb2 <mainOptions+0x5a2>
	else if (__tmp > 65535)
    1b34:	6d 89       	ldd	r22, Y+21	; 0x15
    1b36:	7e 89       	ldd	r23, Y+22	; 0x16
    1b38:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	4c f5       	brge	.+82     	; 0x1b9e <mainOptions+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e2       	ldi	r20, 0x20	; 32
    1b5a:	51 e4       	ldi	r21, 0x41	; 65
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9c 8b       	std	Y+20, r25	; 0x14
    1b72:	8b 8b       	std	Y+19, r24	; 0x13
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <mainOptions+0x584>
    1b76:	88 ec       	ldi	r24, 0xC8	; 200
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9a 8b       	std	Y+18, r25	; 0x12
    1b7c:	89 8b       	std	Y+17, r24	; 0x11
    1b7e:	89 89       	ldd	r24, Y+17	; 0x11
    1b80:	9a 89       	ldd	r25, Y+18	; 0x12
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <mainOptions+0x572>
    1b86:	9a 8b       	std	Y+18, r25	; 0x12
    1b88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	9c 8b       	std	Y+20, r25	; 0x14
    1b92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b94:	8b 89       	ldd	r24, Y+19	; 0x13
    1b96:	9c 89       	ldd	r25, Y+20	; 0x14
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	69 f7       	brne	.-38     	; 0x1b76 <mainOptions+0x566>
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <mainOptions+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9c 8b       	std	Y+20, r25	; 0x14
    1bb0:	8b 8b       	std	Y+19, r24	; 0x13
    1bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb6:	98 8b       	std	Y+16, r25	; 0x10
    1bb8:	8f 87       	std	Y+15, r24	; 0x0f
    1bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbc:	98 89       	ldd	r25, Y+16	; 0x10
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <mainOptions+0x5ae>
    1bc2:	98 8b       	std	Y+16, r25	; 0x10
    1bc4:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
				}

			}while(UART_receive == PASSWORD_NOT_SAVED);
    1bc6:	80 91 60 01 	lds	r24, 0x0160
    1bca:	80 34       	cpi	r24, 0x40	; 64
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <mainOptions+0x5c0>
    1bce:	75 cf       	rjmp	.-278    	; 0x1aba <mainOptions+0x4aa>

				LCD_sendCommand(LCD_CLEAR_COMMAND);
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
				LCD_displayString("Password is ");
    1bd6:	86 e7       	ldi	r24, 0x76	; 118
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
				LCD_displayStringRowColumn(1,0,"saved");
    1bde:	23 e8       	ldi	r18, 0x83	; 131
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	a9 01       	movw	r20, r18
    1be8:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	aa e7       	ldi	r26, 0x7A	; 122
    1bf2:	b4 e4       	ldi	r27, 0x44	; 68
    1bf4:	8b 87       	std	Y+11, r24	; 0x0b
    1bf6:	9c 87       	std	Y+12, r25	; 0x0c
    1bf8:	ad 87       	std	Y+13, r26	; 0x0d
    1bfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a ef       	ldi	r20, 0xFA	; 250
    1c0a:	54 e4       	ldi	r21, 0x44	; 68
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	8f 83       	std	Y+7, r24	; 0x07
    1c16:	98 87       	std	Y+8, r25	; 0x08
    1c18:	a9 87       	std	Y+9, r26	; 0x09
    1c1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <mainOptions+0x62e>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <mainOptions+0x6ac>
	else if (__tmp > 65535)
    1c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c40:	78 85       	ldd	r23, Y+8	; 0x08
    1c42:	89 85       	ldd	r24, Y+9	; 0x09
    1c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <mainOptions+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9e 83       	std	Y+6, r25	; 0x06
    1c7c:	8d 83       	std	Y+5, r24	; 0x05
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <mainOptions+0x68e>
    1c80:	88 ec       	ldi	r24, 0xC8	; 200
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	8b 83       	std	Y+3, r24	; 0x03
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <mainOptions+0x67c>
    1c90:	9c 83       	std	Y+4, r25	; 0x04
    1c92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <mainOptions+0x670>
    1ca6:	6e c0       	rjmp	.+220    	; 0x1d84 <mainOptions+0x774>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <mainOptions+0x6b8>
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	59 c0       	rjmp	.+178    	; 0x1d84 <mainOptions+0x774>
				_delay_ms(1000);

		}
		else if(UART_receive == PASS_WRONG_3_TIMES)
    1cd2:	80 91 60 01 	lds	r24, 0x0160
    1cd6:	86 39       	cpi	r24, 0x96	; 150
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <mainOptions+0x6cc>
    1cda:	54 c0       	rjmp	.+168    	; 0x1d84 <mainOptions+0x774>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
			LCD_displayString("ERROR,Alarm mode");
    1ce2:	8c e1       	ldi	r24, 0x1C	; 28
    1ce4:	91 e0       	ldi	r25, 0x01	; 1
    1ce6:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"is activated");
    1cea:	2d e2       	ldi	r18, 0x2D	; 45
    1cec:	31 e0       	ldi	r19, 0x01	; 1
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	a9 01       	movw	r20, r18
    1cf4:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>

			Timer1_ConfigType Timer1_Configurations={0,7812,F_CPU_1024,COMPARE_MODE};  /*setup timer1 for 60 sec blocking keypad */
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	83 5b       	subi	r24, 0xB3	; 179
    1cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfe:	6a 96       	adiw	r28, 0x1a	; 26
    1d00:	9f af       	std	Y+63, r25	; 0x3f
    1d02:	8e af       	std	Y+62, r24	; 0x3e
    1d04:	6a 97       	sbiw	r28, 0x1a	; 26
    1d06:	89 e4       	ldi	r24, 0x49	; 73
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	6c 96       	adiw	r28, 0x1c	; 28
    1d0c:	9f af       	std	Y+63, r25	; 0x3f
    1d0e:	8e af       	std	Y+62, r24	; 0x3e
    1d10:	6c 97       	sbiw	r28, 0x1c	; 28
    1d12:	96 e0       	ldi	r25, 0x06	; 6
    1d14:	6d 96       	adiw	r28, 0x1d	; 29
    1d16:	9f af       	std	Y+63, r25	; 0x3f
    1d18:	6d 97       	sbiw	r28, 0x1d	; 29
    1d1a:	6c 96       	adiw	r28, 0x1c	; 28
    1d1c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d1e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d20:	6c 97       	sbiw	r28, 0x1c	; 28
    1d22:	00 80       	ld	r0, Z
    1d24:	6c 96       	adiw	r28, 0x1c	; 28
    1d26:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d28:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d2a:	6c 97       	sbiw	r28, 0x1c	; 28
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	6c 96       	adiw	r28, 0x1c	; 28
    1d30:	9f af       	std	Y+63, r25	; 0x3f
    1d32:	8e af       	std	Y+62, r24	; 0x3e
    1d34:	6c 97       	sbiw	r28, 0x1c	; 28
    1d36:	6a 96       	adiw	r28, 0x1a	; 26
    1d38:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d3a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d3c:	6a 97       	sbiw	r28, 0x1a	; 26
    1d3e:	00 82       	st	Z, r0
    1d40:	6a 96       	adiw	r28, 0x1a	; 26
    1d42:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d44:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d46:	6a 97       	sbiw	r28, 0x1a	; 26
    1d48:	01 96       	adiw	r24, 0x01	; 1
    1d4a:	6a 96       	adiw	r28, 0x1a	; 26
    1d4c:	9f af       	std	Y+63, r25	; 0x3f
    1d4e:	8e af       	std	Y+62, r24	; 0x3e
    1d50:	6a 97       	sbiw	r28, 0x1a	; 26
    1d52:	6d 96       	adiw	r28, 0x1d	; 29
    1d54:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d56:	6d 97       	sbiw	r28, 0x1d	; 29
    1d58:	91 50       	subi	r25, 0x01	; 1
    1d5a:	6d 96       	adiw	r28, 0x1d	; 29
    1d5c:	9f af       	std	Y+63, r25	; 0x3f
    1d5e:	6d 97       	sbiw	r28, 0x1d	; 29
    1d60:	6d 96       	adiw	r28, 0x1d	; 29
    1d62:	ef ad       	ldd	r30, Y+63	; 0x3f
    1d64:	6d 97       	sbiw	r28, 0x1d	; 29
    1d66:	ee 23       	and	r30, r30
    1d68:	c1 f6       	brne	.-80     	; 0x1d1a <mainOptions+0x70a>
			Timer1_init(&Timer1_Configurations);                                       /* during alarm mode */
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	83 5b       	subi	r24, 0xB3	; 179
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	0e 94 26 1b 	call	0x364c	; 0x364c <Timer1_init>
			second_counter=0;
    1d74:	10 92 57 01 	sts	0x0157, r1
			while(second_counter != 60);
    1d78:	80 91 57 01 	lds	r24, 0x0157
    1d7c:	8c 33       	cpi	r24, 0x3C	; 60
    1d7e:	e1 f7       	brne	.-8      	; 0x1d78 <mainOptions+0x768>
			Timer1_denit();
    1d80:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <Timer1_denit>
		}
	}
}
    1d84:	c4 5a       	subi	r28, 0xA4	; 164
    1d86:	df 4f       	sbci	r29, 0xFF	; 255
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	08 95       	ret

00001d9c <take1PassFromUser>:


void take1PassFromUser()
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	ac 97       	sbiw	r28, 0x2c	; 44
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 count=0;
    1db0:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
	LCD_displayString("plz enter pass:");
    1db8:	89 e8       	ldi	r24, 0x89	; 137
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
	LCD_moveCursor(1,0);
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_moveCursor>
    1dc8:	f9 c0       	rjmp	.+498    	; 0x1fbc <take1PassFromUser+0x220>
	while(count<5)
	{
		key=KEYPAD_getPressedKey();
    1dca:	0e 94 0a 14 	call	0x2814	; 0x2814 <KEYPAD_getPressedKey>
    1dce:	8c a7       	std	Y+44, r24	; 0x2c
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a8 e4       	ldi	r26, 0x48	; 72
    1dd6:	b2 e4       	ldi	r27, 0x42	; 66
    1dd8:	8f a3       	std	Y+39, r24	; 0x27
    1dda:	98 a7       	std	Y+40, r25	; 0x28
    1ddc:	a9 a7       	std	Y+41, r26	; 0x29
    1dde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	6f a1       	ldd	r22, Y+39	; 0x27
    1de2:	78 a5       	ldd	r23, Y+40	; 0x28
    1de4:	89 a5       	ldd	r24, Y+41	; 0x29
    1de6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a ef       	ldi	r20, 0xFA	; 250
    1dee:	54 e4       	ldi	r21, 0x44	; 68
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	8b a3       	std	Y+35, r24	; 0x23
    1dfa:	9c a3       	std	Y+36, r25	; 0x24
    1dfc:	ad a3       	std	Y+37, r26	; 0x25
    1dfe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e00:	6b a1       	ldd	r22, Y+35	; 0x23
    1e02:	7c a1       	ldd	r23, Y+36	; 0x24
    1e04:	8d a1       	ldd	r24, Y+37	; 0x25
    1e06:	9e a1       	ldd	r25, Y+38	; 0x26
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <take1PassFromUser+0x86>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9a a3       	std	Y+34, r25	; 0x22
    1e1e:	89 a3       	std	Y+33, r24	; 0x21
    1e20:	3f c0       	rjmp	.+126    	; 0x1ea0 <take1PassFromUser+0x104>
	else if (__tmp > 65535)
    1e22:	6b a1       	ldd	r22, Y+35	; 0x23
    1e24:	7c a1       	ldd	r23, Y+36	; 0x24
    1e26:	8d a1       	ldd	r24, Y+37	; 0x25
    1e28:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	3f ef       	ldi	r19, 0xFF	; 255
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	4c f5       	brge	.+82     	; 0x1e8c <take1PassFromUser+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9a a3       	std	Y+34, r25	; 0x22
    1e60:	89 a3       	std	Y+33, r24	; 0x21
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <take1PassFromUser+0xe6>
    1e64:	88 ec       	ldi	r24, 0xC8	; 200
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	98 a3       	std	Y+32, r25	; 0x20
    1e6a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e6e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <take1PassFromUser+0xd4>
    1e74:	98 a3       	std	Y+32, r25	; 0x20
    1e76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	9a a3       	std	Y+34, r25	; 0x22
    1e80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	89 a1       	ldd	r24, Y+33	; 0x21
    1e84:	9a a1       	ldd	r25, Y+34	; 0x22
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <take1PassFromUser+0xc8>
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <take1PassFromUser+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e90:	8d a1       	ldd	r24, Y+37	; 0x25
    1e92:	9e a1       	ldd	r25, Y+38	; 0x26
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9a a3       	std	Y+34, r25	; 0x22
    1e9e:	89 a3       	std	Y+33, r24	; 0x21
    1ea0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <take1PassFromUser+0x110>
    1eb0:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		if(key <=9 && key>=0)
    1eb4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1eb6:	8a 30       	cpi	r24, 0x0A	; 10
    1eb8:	08 f0       	brcs	.+2      	; 0x1ebc <take1PassFromUser+0x120>
    1eba:	80 c0       	rjmp	.+256    	; 0x1fbc <take1PassFromUser+0x220>
		{
			LCD_displayCharacter('*');
    1ebc:	8a e2       	ldi	r24, 0x2A	; 42
    1ebe:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_displayCharacter>
			main_option_pass[count]=key;
    1ec2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	fc 01       	movw	r30, r24
    1eca:	e5 5a       	subi	r30, 0xA5	; 165
    1ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ece:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ed0:	80 83       	st	Z, r24
			count++;
    1ed2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed4:	8f 5f       	subi	r24, 0xFF	; 255
    1ed6:	8b a7       	std	Y+43, r24	; 0x2b
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	af ea       	ldi	r26, 0xAF	; 175
    1ede:	b3 e4       	ldi	r27, 0x43	; 67
    1ee0:	89 8f       	std	Y+25, r24	; 0x19
    1ee2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	4a ef       	ldi	r20, 0xFA	; 250
    1ef6:	54 e4       	ldi	r21, 0x44	; 68
    1ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	8d 8b       	std	Y+21, r24	; 0x15
    1f02:	9e 8b       	std	Y+22, r25	; 0x16
    1f04:	af 8b       	std	Y+23, r26	; 0x17
    1f06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <take1PassFromUser+0x18e>
		__ticks = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9c 8b       	std	Y+20, r25	; 0x14
    1f26:	8b 8b       	std	Y+19, r24	; 0x13
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <take1PassFromUser+0x20c>
	else if (__tmp > 65535)
    1f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f30:	98 8d       	ldd	r25, Y+24	; 0x18
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	4c f5       	brge	.+82     	; 0x1f94 <take1PassFromUser+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f42:	69 8d       	ldd	r22, Y+25	; 0x19
    1f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9c 8b       	std	Y+20, r25	; 0x14
    1f68:	8b 8b       	std	Y+19, r24	; 0x13
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <take1PassFromUser+0x1ee>
    1f6c:	88 ec       	ldi	r24, 0xC8	; 200
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9a 8b       	std	Y+18, r25	; 0x12
    1f72:	89 8b       	std	Y+17, r24	; 0x11
    1f74:	89 89       	ldd	r24, Y+17	; 0x11
    1f76:	9a 89       	ldd	r25, Y+18	; 0x12
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <take1PassFromUser+0x1dc>
    1f7c:	9a 8b       	std	Y+18, r25	; 0x12
    1f7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	8b 89       	ldd	r24, Y+19	; 0x13
    1f82:	9c 89       	ldd	r25, Y+20	; 0x14
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9c 8b       	std	Y+20, r25	; 0x14
    1f88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <take1PassFromUser+0x1d0>
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <take1PassFromUser+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	6d 89       	ldd	r22, Y+21	; 0x15
    1f96:	7e 89       	ldd	r23, Y+22	; 0x16
    1f98:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9c 8b       	std	Y+20, r25	; 0x14
    1fa6:	8b 8b       	std	Y+19, r24	; 0x13
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	98 8b       	std	Y+16, r25	; 0x10
    1fae:	8f 87       	std	Y+15, r24	; 0x0f
    1fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb2:	98 89       	ldd	r25, Y+16	; 0x10
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <take1PassFromUser+0x218>
    1fb8:	98 8b       	std	Y+16, r25	; 0x10
    1fba:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 key;
	uint8 count=0;
	LCD_sendCommand(LCD_CLEAR_COMMAND);
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1,0);
	while(count<5)
    1fbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fbe:	85 30       	cpi	r24, 0x05	; 5
    1fc0:	08 f4       	brcc	.+2      	; 0x1fc4 <take1PassFromUser+0x228>
    1fc2:	03 cf       	rjmp	.-506    	; 0x1dca <take1PassFromUser+0x2e>
			main_option_pass[count]=key;
			count++;
			_delay_ms(350);
		}
	}
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
	LCD_displayString("plz enter = to");
    1fca:	89 e9       	ldi	r24, 0x99	; 153
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"continue");
    1fd2:	28 ea       	ldi	r18, 0xA8	; 168
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	a9 01       	movw	r20, r18
    1fdc:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <LCD_displayStringRowColumn>
    1fe0:	75 c0       	rjmp	.+234    	; 0x20cc <take1PassFromUser+0x330>

	while(key != '=')
	{
		key=KEYPAD_getPressedKey();
    1fe2:	0e 94 0a 14 	call	0x2814	; 0x2814 <KEYPAD_getPressedKey>
    1fe6:	8c a7       	std	Y+44, r24	; 0x2c
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	a6 e9       	ldi	r26, 0x96	; 150
    1fee:	b3 e4       	ldi	r27, 0x43	; 67
    1ff0:	8b 87       	std	Y+11, r24	; 0x0b
    1ff2:	9c 87       	std	Y+12, r25	; 0x0c
    1ff4:	ad 87       	std	Y+13, r26	; 0x0d
    1ff6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	4a ef       	ldi	r20, 0xFA	; 250
    2006:	54 e4       	ldi	r21, 0x44	; 68
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	8f 83       	std	Y+7, r24	; 0x07
    2012:	98 87       	std	Y+8, r25	; 0x08
    2014:	a9 87       	std	Y+9, r26	; 0x09
    2016:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2018:	6f 81       	ldd	r22, Y+7	; 0x07
    201a:	78 85       	ldd	r23, Y+8	; 0x08
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e8       	ldi	r20, 0x80	; 128
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202c:	88 23       	and	r24, r24
    202e:	2c f4       	brge	.+10     	; 0x203a <take1PassFromUser+0x29e>
		__ticks = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9e 83       	std	Y+6, r25	; 0x06
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	3f c0       	rjmp	.+126    	; 0x20b8 <take1PassFromUser+0x31c>
	else if (__tmp > 65535)
    203a:	6f 81       	ldd	r22, Y+7	; 0x07
    203c:	78 85       	ldd	r23, Y+8	; 0x08
    203e:	89 85       	ldd	r24, Y+9	; 0x09
    2040:	9a 85       	ldd	r25, Y+10	; 0x0a
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	3f ef       	ldi	r19, 0xFF	; 255
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	57 e4       	ldi	r21, 0x47	; 71
    204a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	4c f5       	brge	.+82     	; 0x20a4 <take1PassFromUser+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2052:	6b 85       	ldd	r22, Y+11	; 0x0b
    2054:	7c 85       	ldd	r23, Y+12	; 0x0c
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	9e 85       	ldd	r25, Y+14	; 0x0e
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
    207a:	0f c0       	rjmp	.+30     	; 0x209a <take1PassFromUser+0x2fe>
    207c:	88 ec       	ldi	r24, 0xC8	; 200
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9c 83       	std	Y+4, r25	; 0x04
    2082:	8b 83       	std	Y+3, r24	; 0x03
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	9c 81       	ldd	r25, Y+4	; 0x04
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <take1PassFromUser+0x2ec>
    208c:	9c 83       	std	Y+4, r25	; 0x04
    208e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	9e 81       	ldd	r25, Y+6	; 0x06
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	69 f7       	brne	.-38     	; 0x207c <take1PassFromUser+0x2e0>
    20a2:	14 c0       	rjmp	.+40     	; 0x20cc <take1PassFromUser+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
    20b8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ba:	9e 81       	ldd	r25, Y+6	; 0x06
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <take1PassFromUser+0x328>
    20c8:	9a 83       	std	Y+2, r25	; 0x02
    20ca:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_sendCommand(LCD_CLEAR_COMMAND);
	LCD_displayString("plz enter = to");
	LCD_displayStringRowColumn(1,0,"continue");

	while(key != '=')
    20cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    20ce:	8d 33       	cpi	r24, 0x3D	; 61
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <take1PassFromUser+0x338>
    20d2:	87 cf       	rjmp	.-242    	; 0x1fe2 <take1PassFromUser+0x246>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(300);
	}

}
    20d4:	ac 96       	adiw	r28, 0x2c	; 44
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <send1PassToControl>:

void send1PassToControl()
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	0f 92       	push	r0
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
	uint8 count;

	UART_sendByte(MC1_READY);
    20f0:	80 e1       	ldi	r24, 0x10	; 16
    20f2:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
	for(count=0;count<5;count++)
    20f6:	19 82       	std	Y+1, r1	; 0x01
    20f8:	0c c0       	rjmp	.+24     	; 0x2112 <send1PassToControl+0x2c>
	{
		UART_sendByte(main_option_pass[count]);
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	fc 01       	movw	r30, r24
    2102:	e5 5a       	subi	r30, 0xA5	; 165
    2104:	fe 4f       	sbci	r31, 0xFE	; 254
    2106:	80 81       	ld	r24, Z
    2108:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
void send1PassToControl()
{
	uint8 count;

	UART_sendByte(MC1_READY);
	for(count=0;count<5;count++)
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	8f 5f       	subi	r24, 0xFF	; 255
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	85 30       	cpi	r24, 0x05	; 5
    2116:	88 f3       	brcs	.-30     	; 0x20fa <send1PassToControl+0x14>
	{
		UART_sendByte(main_option_pass[count]);
	}
}
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <secondsCounting>:

void secondsCounting(void)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
	 second_counter++;
    2128:	80 91 57 01 	lds	r24, 0x0157
    212c:	8f 5f       	subi	r24, 0xFF	; 255
    212e:	80 93 57 01 	sts	0x0157, r24
}
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	27 97       	sbiw	r28, 0x07	; 7
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	6a 83       	std	Y+2, r22	; 0x02
    2150:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if((pin_num > NUM_OF_PINS_PER_PORT) | (port_num > NUM_OF_PORTS ))
    2152:	1f 82       	std	Y+7, r1	; 0x07
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	89 30       	cpi	r24, 0x09	; 9
    2158:	10 f0       	brcs	.+4      	; 0x215e <GPIO_setupPinDirection+0x26>
    215a:	21 e0       	ldi	r18, 0x01	; 1
    215c:	2f 83       	std	Y+7, r18	; 0x07
    215e:	1e 82       	std	Y+6, r1	; 0x06
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	85 30       	cpi	r24, 0x05	; 5
    2164:	10 f0       	brcs	.+4      	; 0x216a <GPIO_setupPinDirection+0x32>
    2166:	31 e0       	ldi	r19, 0x01	; 1
    2168:	3e 83       	std	Y+6, r19	; 0x06
    216a:	8f 81       	ldd	r24, Y+7	; 0x07
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	89 2b       	or	r24, r25
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	89 27       	eor	r24, r25
    2174:	88 23       	and	r24, r24
    2176:	09 f4       	brne	.+2      	; 0x217a <GPIO_setupPinDirection+0x42>
    2178:	d1 c0       	rjmp	.+418    	; 0x231c <GPIO_setupPinDirection+0x1e4>
	}

	else
	{
		/* setup the pin direction */
		switch(port_num)
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	3d 83       	std	Y+5, r19	; 0x05
    2182:	2c 83       	std	Y+4, r18	; 0x04
    2184:	8c 81       	ldd	r24, Y+4	; 0x04
    2186:	9d 81       	ldd	r25, Y+5	; 0x05
    2188:	81 30       	cpi	r24, 0x01	; 1
    218a:	91 05       	cpc	r25, r1
    218c:	09 f4       	brne	.+2      	; 0x2190 <GPIO_setupPinDirection+0x58>
    218e:	43 c0       	rjmp	.+134    	; 0x2216 <GPIO_setupPinDirection+0xde>
    2190:	2c 81       	ldd	r18, Y+4	; 0x04
    2192:	3d 81       	ldd	r19, Y+5	; 0x05
    2194:	22 30       	cpi	r18, 0x02	; 2
    2196:	31 05       	cpc	r19, r1
    2198:	2c f4       	brge	.+10     	; 0x21a4 <GPIO_setupPinDirection+0x6c>
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	9d 81       	ldd	r25, Y+5	; 0x05
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	71 f0       	breq	.+28     	; 0x21be <GPIO_setupPinDirection+0x86>
    21a2:	bc c0       	rjmp	.+376    	; 0x231c <GPIO_setupPinDirection+0x1e4>
    21a4:	2c 81       	ldd	r18, Y+4	; 0x04
    21a6:	3d 81       	ldd	r19, Y+5	; 0x05
    21a8:	22 30       	cpi	r18, 0x02	; 2
    21aa:	31 05       	cpc	r19, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <GPIO_setupPinDirection+0x78>
    21ae:	5f c0       	rjmp	.+190    	; 0x226e <GPIO_setupPinDirection+0x136>
    21b0:	8c 81       	ldd	r24, Y+4	; 0x04
    21b2:	9d 81       	ldd	r25, Y+5	; 0x05
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	91 05       	cpc	r25, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <GPIO_setupPinDirection+0x84>
    21ba:	85 c0       	rjmp	.+266    	; 0x22c6 <GPIO_setupPinDirection+0x18e>
    21bc:	af c0       	rjmp	.+350    	; 0x231c <GPIO_setupPinDirection+0x1e4>
		{
		case PORTA_ID:
			if(direction==PIN_INPUT)
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	88 23       	and	r24, r24
    21c2:	a9 f4       	brne	.+42     	; 0x21ee <GPIO_setupPinDirection+0xb6>
			{
				CLEAR_BIT(DDRA,pin_num);
    21c4:	aa e3       	ldi	r26, 0x3A	; 58
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	ea e3       	ldi	r30, 0x3A	; 58
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	48 2f       	mov	r20, r24
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	02 2e       	mov	r0, r18
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <GPIO_setupPinDirection+0xaa>
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	0a 94       	dec	r0
    21e4:	e2 f7       	brpl	.-8      	; 0x21de <GPIO_setupPinDirection+0xa6>
    21e6:	80 95       	com	r24
    21e8:	84 23       	and	r24, r20
    21ea:	8c 93       	st	X, r24
    21ec:	97 c0       	rjmp	.+302    	; 0x231c <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
    21ee:	aa e3       	ldi	r26, 0x3A	; 58
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	ea e3       	ldi	r30, 0x3A	; 58
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	48 2f       	mov	r20, r24
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	02 2e       	mov	r0, r18
    2206:	02 c0       	rjmp	.+4      	; 0x220c <GPIO_setupPinDirection+0xd4>
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	0a 94       	dec	r0
    220e:	e2 f7       	brpl	.-8      	; 0x2208 <GPIO_setupPinDirection+0xd0>
    2210:	84 2b       	or	r24, r20
    2212:	8c 93       	st	X, r24
    2214:	83 c0       	rjmp	.+262    	; 0x231c <GPIO_setupPinDirection+0x1e4>
			}
			break;

		case PORTB_ID:
			if(direction==PIN_INPUT)
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	88 23       	and	r24, r24
    221a:	a9 f4       	brne	.+42     	; 0x2246 <GPIO_setupPinDirection+0x10e>
			{
				CLEAR_BIT(DDRB,pin_num);
    221c:	a7 e3       	ldi	r26, 0x37	; 55
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e7 e3       	ldi	r30, 0x37	; 55
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <GPIO_setupPinDirection+0x102>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <GPIO_setupPinDirection+0xfe>
    223e:	80 95       	com	r24
    2240:	84 23       	and	r24, r20
    2242:	8c 93       	st	X, r24
    2244:	6b c0       	rjmp	.+214    	; 0x231c <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
    2246:	a7 e3       	ldi	r26, 0x37	; 55
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e7 e3       	ldi	r30, 0x37	; 55
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	48 2f       	mov	r20, r24
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	02 2e       	mov	r0, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <GPIO_setupPinDirection+0x12c>
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <GPIO_setupPinDirection+0x128>
    2268:	84 2b       	or	r24, r20
    226a:	8c 93       	st	X, r24
    226c:	57 c0       	rjmp	.+174    	; 0x231c <GPIO_setupPinDirection+0x1e4>
			}
			break;

		case PORTC_ID:
			if(direction==PIN_INPUT)
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	88 23       	and	r24, r24
    2272:	a9 f4       	brne	.+42     	; 0x229e <GPIO_setupPinDirection+0x166>
			{
				CLEAR_BIT(DDRC,pin_num);
    2274:	a4 e3       	ldi	r26, 0x34	; 52
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e4 e3       	ldi	r30, 0x34	; 52
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	48 2f       	mov	r20, r24
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	02 2e       	mov	r0, r18
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <GPIO_setupPinDirection+0x15a>
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	0a 94       	dec	r0
    2294:	e2 f7       	brpl	.-8      	; 0x228e <GPIO_setupPinDirection+0x156>
    2296:	80 95       	com	r24
    2298:	84 23       	and	r24, r20
    229a:	8c 93       	st	X, r24
    229c:	3f c0       	rjmp	.+126    	; 0x231c <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
    229e:	a4 e3       	ldi	r26, 0x34	; 52
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e4 e3       	ldi	r30, 0x34	; 52
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	48 2f       	mov	r20, r24
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	02 2e       	mov	r0, r18
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <GPIO_setupPinDirection+0x184>
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	0a 94       	dec	r0
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <GPIO_setupPinDirection+0x180>
    22c0:	84 2b       	or	r24, r20
    22c2:	8c 93       	st	X, r24
    22c4:	2b c0       	rjmp	.+86     	; 0x231c <GPIO_setupPinDirection+0x1e4>
			}
			break;

		case PORTD_ID:
			if(direction==PIN_INPUT)
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	88 23       	and	r24, r24
    22ca:	a9 f4       	brne	.+42     	; 0x22f6 <GPIO_setupPinDirection+0x1be>
			{
				CLEAR_BIT(DDRD,pin_num);
    22cc:	a1 e3       	ldi	r26, 0x31	; 49
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e1 e3       	ldi	r30, 0x31	; 49
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	48 2f       	mov	r20, r24
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	02 2e       	mov	r0, r18
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <GPIO_setupPinDirection+0x1b2>
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	0a 94       	dec	r0
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <GPIO_setupPinDirection+0x1ae>
    22ee:	80 95       	com	r24
    22f0:	84 23       	and	r24, r20
    22f2:	8c 93       	st	X, r24
    22f4:	13 c0       	rjmp	.+38     	; 0x231c <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
    22f6:	a1 e3       	ldi	r26, 0x31	; 49
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e1 e3       	ldi	r30, 0x31	; 49
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	48 2f       	mov	r20, r24
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	02 2e       	mov	r0, r18
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <GPIO_setupPinDirection+0x1dc>
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	0a 94       	dec	r0
    2316:	e2 f7       	brpl	.-8      	; 0x2310 <GPIO_setupPinDirection+0x1d8>
    2318:	84 2b       	or	r24, r20
    231a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    231c:	27 96       	adiw	r28, 0x07	; 7
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	27 97       	sbiw	r28, 0x07	; 7
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	6a 83       	std	Y+2, r22	; 0x02
    2346:	4b 83       	std	Y+3, r20	; 0x03

	if((port_num > NUM_OF_PORTS ) | (pin_num > NUM_OF_PINS_PER_PORT))
    2348:	1f 82       	std	Y+7, r1	; 0x07
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	85 30       	cpi	r24, 0x05	; 5
    234e:	10 f0       	brcs	.+4      	; 0x2354 <GPIO_writePin+0x26>
    2350:	21 e0       	ldi	r18, 0x01	; 1
    2352:	2f 83       	std	Y+7, r18	; 0x07
    2354:	1e 82       	std	Y+6, r1	; 0x06
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	89 30       	cpi	r24, 0x09	; 9
    235a:	10 f0       	brcs	.+4      	; 0x2360 <GPIO_writePin+0x32>
    235c:	31 e0       	ldi	r19, 0x01	; 1
    235e:	3e 83       	std	Y+6, r19	; 0x06
    2360:	8f 81       	ldd	r24, Y+7	; 0x07
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	89 2b       	or	r24, r25
    2366:	91 e0       	ldi	r25, 0x01	; 1
    2368:	89 27       	eor	r24, r25
    236a:	88 23       	and	r24, r24
    236c:	09 f4       	brne	.+2      	; 0x2370 <GPIO_writePin+0x42>
    236e:	d1 c0       	rjmp	.+418    	; 0x2512 <GPIO_writePin+0x1e4>
		/* Do Nothing*/
	}

	else
	{
		switch(port_num)
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	3d 83       	std	Y+5, r19	; 0x05
    2378:	2c 83       	std	Y+4, r18	; 0x04
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	9d 81       	ldd	r25, Y+5	; 0x05
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	91 05       	cpc	r25, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <GPIO_writePin+0x58>
    2384:	43 c0       	rjmp	.+134    	; 0x240c <GPIO_writePin+0xde>
    2386:	2c 81       	ldd	r18, Y+4	; 0x04
    2388:	3d 81       	ldd	r19, Y+5	; 0x05
    238a:	22 30       	cpi	r18, 0x02	; 2
    238c:	31 05       	cpc	r19, r1
    238e:	2c f4       	brge	.+10     	; 0x239a <GPIO_writePin+0x6c>
    2390:	8c 81       	ldd	r24, Y+4	; 0x04
    2392:	9d 81       	ldd	r25, Y+5	; 0x05
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	71 f0       	breq	.+28     	; 0x23b4 <GPIO_writePin+0x86>
    2398:	bc c0       	rjmp	.+376    	; 0x2512 <GPIO_writePin+0x1e4>
    239a:	2c 81       	ldd	r18, Y+4	; 0x04
    239c:	3d 81       	ldd	r19, Y+5	; 0x05
    239e:	22 30       	cpi	r18, 0x02	; 2
    23a0:	31 05       	cpc	r19, r1
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <GPIO_writePin+0x78>
    23a4:	5f c0       	rjmp	.+190    	; 0x2464 <GPIO_writePin+0x136>
    23a6:	8c 81       	ldd	r24, Y+4	; 0x04
    23a8:	9d 81       	ldd	r25, Y+5	; 0x05
    23aa:	83 30       	cpi	r24, 0x03	; 3
    23ac:	91 05       	cpc	r25, r1
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <GPIO_writePin+0x84>
    23b0:	85 c0       	rjmp	.+266    	; 0x24bc <GPIO_writePin+0x18e>
    23b2:	af c0       	rjmp	.+350    	; 0x2512 <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH)
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	81 30       	cpi	r24, 0x01	; 1
    23b8:	a1 f4       	brne	.+40     	; 0x23e2 <GPIO_writePin+0xb4>
			{
				SET_BIT(PORTA,pin_num);
    23ba:	ab e3       	ldi	r26, 0x3B	; 59
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	eb e3       	ldi	r30, 0x3B	; 59
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	48 2f       	mov	r20, r24
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 2e       	mov	r0, r18
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <GPIO_writePin+0xaa>
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	0a 94       	dec	r0
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <GPIO_writePin+0xa6>
    23dc:	84 2b       	or	r24, r20
    23de:	8c 93       	st	X, r24
    23e0:	98 c0       	rjmp	.+304    	; 0x2512 <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    23e2:	ab e3       	ldi	r26, 0x3B	; 59
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	eb e3       	ldi	r30, 0x3B	; 59
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	48 2f       	mov	r20, r24
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	02 2e       	mov	r0, r18
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <GPIO_writePin+0xd2>
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	0a 94       	dec	r0
    2402:	e2 f7       	brpl	.-8      	; 0x23fc <GPIO_writePin+0xce>
    2404:	80 95       	com	r24
    2406:	84 23       	and	r24, r20
    2408:	8c 93       	st	X, r24
    240a:	83 c0       	rjmp	.+262    	; 0x2512 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTB_ID:
			if(value==LOGIC_HIGH)
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	a1 f4       	brne	.+40     	; 0x243a <GPIO_writePin+0x10c>
			{
				SET_BIT(PORTB,pin_num);
    2412:	a8 e3       	ldi	r26, 0x38	; 56
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e8 e3       	ldi	r30, 0x38	; 56
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	48 2f       	mov	r20, r24
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	02 2e       	mov	r0, r18
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <GPIO_writePin+0x102>
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	0a 94       	dec	r0
    2432:	e2 f7       	brpl	.-8      	; 0x242c <GPIO_writePin+0xfe>
    2434:	84 2b       	or	r24, r20
    2436:	8c 93       	st	X, r24
    2438:	6c c0       	rjmp	.+216    	; 0x2512 <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    243a:	a8 e3       	ldi	r26, 0x38	; 56
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e8 e3       	ldi	r30, 0x38	; 56
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	48 2f       	mov	r20, r24
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	02 2e       	mov	r0, r18
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <GPIO_writePin+0x12a>
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	0a 94       	dec	r0
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <GPIO_writePin+0x126>
    245c:	80 95       	com	r24
    245e:	84 23       	and	r24, r20
    2460:	8c 93       	st	X, r24
    2462:	57 c0       	rjmp	.+174    	; 0x2512 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTC_ID:
			if(value==LOGIC_HIGH)
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	a1 f4       	brne	.+40     	; 0x2492 <GPIO_writePin+0x164>
			{
				SET_BIT(PORTC,pin_num);
    246a:	a5 e3       	ldi	r26, 0x35	; 53
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e5 e3       	ldi	r30, 0x35	; 53
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	48 2f       	mov	r20, r24
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	28 2f       	mov	r18, r24
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	02 2e       	mov	r0, r18
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <GPIO_writePin+0x15a>
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	0a 94       	dec	r0
    248a:	e2 f7       	brpl	.-8      	; 0x2484 <GPIO_writePin+0x156>
    248c:	84 2b       	or	r24, r20
    248e:	8c 93       	st	X, r24
    2490:	40 c0       	rjmp	.+128    	; 0x2512 <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2492:	a5 e3       	ldi	r26, 0x35	; 53
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e5 e3       	ldi	r30, 0x35	; 53
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	48 2f       	mov	r20, r24
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	28 2f       	mov	r18, r24
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	02 2e       	mov	r0, r18
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <GPIO_writePin+0x182>
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	0a 94       	dec	r0
    24b2:	e2 f7       	brpl	.-8      	; 0x24ac <GPIO_writePin+0x17e>
    24b4:	80 95       	com	r24
    24b6:	84 23       	and	r24, r20
    24b8:	8c 93       	st	X, r24
    24ba:	2b c0       	rjmp	.+86     	; 0x2512 <GPIO_writePin+0x1e4>
			}
			break;

		case PORTD_ID:
			if(value==LOGIC_HIGH)
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	a1 f4       	brne	.+40     	; 0x24ea <GPIO_writePin+0x1bc>
			{
				SET_BIT(PORTD,pin_num);
    24c2:	a2 e3       	ldi	r26, 0x32	; 50
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e2 e3       	ldi	r30, 0x32	; 50
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	48 2f       	mov	r20, r24
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	02 2e       	mov	r0, r18
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <GPIO_writePin+0x1b2>
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	0a 94       	dec	r0
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <GPIO_writePin+0x1ae>
    24e4:	84 2b       	or	r24, r20
    24e6:	8c 93       	st	X, r24
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    24ea:	a2 e3       	ldi	r26, 0x32	; 50
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e2 e3       	ldi	r30, 0x32	; 50
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	48 2f       	mov	r20, r24
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	28 2f       	mov	r18, r24
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	02 2e       	mov	r0, r18
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <GPIO_writePin+0x1da>
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	0a 94       	dec	r0
    250a:	e2 f7       	brpl	.-8      	; 0x2504 <GPIO_writePin+0x1d6>
    250c:	80 95       	com	r24
    250e:	84 23       	and	r24, r20
    2510:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2512:	27 96       	adiw	r28, 0x07	; 7
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	27 97       	sbiw	r28, 0x07	; 7
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	8a 83       	std	Y+2, r24	; 0x02
    253a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value= LOGIC_LOW;
    253c:	19 82       	std	Y+1, r1	; 0x01

	if((port_num > NUM_OF_PORTS ) | (pin_num > NUM_OF_PINS_PER_PORT))
    253e:	1f 82       	std	Y+7, r1	; 0x07
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	85 30       	cpi	r24, 0x05	; 5
    2544:	10 f0       	brcs	.+4      	; 0x254a <GPIO_readPin+0x26>
    2546:	21 e0       	ldi	r18, 0x01	; 1
    2548:	2f 83       	std	Y+7, r18	; 0x07
    254a:	1e 82       	std	Y+6, r1	; 0x06
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	89 30       	cpi	r24, 0x09	; 9
    2550:	10 f0       	brcs	.+4      	; 0x2556 <GPIO_readPin+0x32>
    2552:	31 e0       	ldi	r19, 0x01	; 1
    2554:	3e 83       	std	Y+6, r19	; 0x06
    2556:	8f 81       	ldd	r24, Y+7	; 0x07
    2558:	4e 81       	ldd	r20, Y+6	; 0x06
    255a:	84 2b       	or	r24, r20
    255c:	91 e0       	ldi	r25, 0x01	; 1
    255e:	89 27       	eor	r24, r25
    2560:	88 23       	and	r24, r24
    2562:	09 f4       	brne	.+2      	; 0x2566 <GPIO_readPin+0x42>
    2564:	80 c0       	rjmp	.+256    	; 0x2666 <GPIO_readPin+0x142>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	3d 83       	std	Y+5, r19	; 0x05
    256e:	2c 83       	std	Y+4, r18	; 0x04
    2570:	4c 81       	ldd	r20, Y+4	; 0x04
    2572:	5d 81       	ldd	r21, Y+5	; 0x05
    2574:	41 30       	cpi	r20, 0x01	; 1
    2576:	51 05       	cpc	r21, r1
    2578:	79 f1       	breq	.+94     	; 0x25d8 <GPIO_readPin+0xb4>
    257a:	8c 81       	ldd	r24, Y+4	; 0x04
    257c:	9d 81       	ldd	r25, Y+5	; 0x05
    257e:	82 30       	cpi	r24, 0x02	; 2
    2580:	91 05       	cpc	r25, r1
    2582:	34 f4       	brge	.+12     	; 0x2590 <GPIO_readPin+0x6c>
    2584:	2c 81       	ldd	r18, Y+4	; 0x04
    2586:	3d 81       	ldd	r19, Y+5	; 0x05
    2588:	21 15       	cp	r18, r1
    258a:	31 05       	cpc	r19, r1
    258c:	69 f0       	breq	.+26     	; 0x25a8 <GPIO_readPin+0x84>
    258e:	6b c0       	rjmp	.+214    	; 0x2666 <GPIO_readPin+0x142>
    2590:	4c 81       	ldd	r20, Y+4	; 0x04
    2592:	5d 81       	ldd	r21, Y+5	; 0x05
    2594:	42 30       	cpi	r20, 0x02	; 2
    2596:	51 05       	cpc	r21, r1
    2598:	b9 f1       	breq	.+110    	; 0x2608 <GPIO_readPin+0xe4>
    259a:	8c 81       	ldd	r24, Y+4	; 0x04
    259c:	9d 81       	ldd	r25, Y+5	; 0x05
    259e:	83 30       	cpi	r24, 0x03	; 3
    25a0:	91 05       	cpc	r25, r1
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <GPIO_readPin+0x82>
    25a4:	49 c0       	rjmp	.+146    	; 0x2638 <GPIO_readPin+0x114>
    25a6:	5f c0       	rjmp	.+190    	; 0x2666 <GPIO_readPin+0x142>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    25a8:	e9 e3       	ldi	r30, 0x39	; 57
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	88 2f       	mov	r24, r24
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a9 01       	movw	r20, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <GPIO_readPin+0x9c>
    25bc:	55 95       	asr	r21
    25be:	47 95       	ror	r20
    25c0:	8a 95       	dec	r24
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <GPIO_readPin+0x98>
    25c4:	ca 01       	movw	r24, r20
    25c6:	81 70       	andi	r24, 0x01	; 1
    25c8:	90 70       	andi	r25, 0x00	; 0
    25ca:	88 23       	and	r24, r24
    25cc:	19 f0       	breq	.+6      	; 0x25d4 <GPIO_readPin+0xb0>
			{
				value= LOGIC_HIGH;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	49 c0       	rjmp	.+146    	; 0x2666 <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    25d4:	19 82       	std	Y+1, r1	; 0x01
    25d6:	47 c0       	rjmp	.+142    	; 0x2666 <GPIO_readPin+0x142>
			}
			break;

		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    25d8:	e6 e3       	ldi	r30, 0x36	; 54
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	88 2f       	mov	r24, r24
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	a9 01       	movw	r20, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <GPIO_readPin+0xcc>
    25ec:	55 95       	asr	r21
    25ee:	47 95       	ror	r20
    25f0:	8a 95       	dec	r24
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <GPIO_readPin+0xc8>
    25f4:	ca 01       	movw	r24, r20
    25f6:	81 70       	andi	r24, 0x01	; 1
    25f8:	90 70       	andi	r25, 0x00	; 0
    25fa:	88 23       	and	r24, r24
    25fc:	19 f0       	breq	.+6      	; 0x2604 <GPIO_readPin+0xe0>
			{
				value= LOGIC_HIGH;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	31 c0       	rjmp	.+98     	; 0x2666 <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    2604:	19 82       	std	Y+1, r1	; 0x01
    2606:	2f c0       	rjmp	.+94     	; 0x2666 <GPIO_readPin+0x142>
			}
			break;

		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2608:	e3 e3       	ldi	r30, 0x33	; 51
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	88 2f       	mov	r24, r24
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a9 01       	movw	r20, r18
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <GPIO_readPin+0xfc>
    261c:	55 95       	asr	r21
    261e:	47 95       	ror	r20
    2620:	8a 95       	dec	r24
    2622:	e2 f7       	brpl	.-8      	; 0x261c <GPIO_readPin+0xf8>
    2624:	ca 01       	movw	r24, r20
    2626:	81 70       	andi	r24, 0x01	; 1
    2628:	90 70       	andi	r25, 0x00	; 0
    262a:	88 23       	and	r24, r24
    262c:	19 f0       	breq	.+6      	; 0x2634 <GPIO_readPin+0x110>
			{
				value= LOGIC_HIGH;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	19 c0       	rjmp	.+50     	; 0x2666 <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    2634:	19 82       	std	Y+1, r1	; 0x01
    2636:	17 c0       	rjmp	.+46     	; 0x2666 <GPIO_readPin+0x142>
			}
			break;

		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2638:	e0 e3       	ldi	r30, 0x30	; 48
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	88 2f       	mov	r24, r24
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a9 01       	movw	r20, r18
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <GPIO_readPin+0x12c>
    264c:	55 95       	asr	r21
    264e:	47 95       	ror	r20
    2650:	8a 95       	dec	r24
    2652:	e2 f7       	brpl	.-8      	; 0x264c <GPIO_readPin+0x128>
    2654:	ca 01       	movw	r24, r20
    2656:	81 70       	andi	r24, 0x01	; 1
    2658:	90 70       	andi	r25, 0x00	; 0
    265a:	88 23       	and	r24, r24
    265c:	19 f0       	breq	.+6      	; 0x2664 <GPIO_readPin+0x140>
			{
				value= LOGIC_HIGH;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	01 c0       	rjmp	.+2      	; 0x2666 <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    2664:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    2666:	89 81       	ldd	r24, Y+1	; 0x01
}
    2668:	27 96       	adiw	r28, 0x07	; 7
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <GPIO_setupPortDirection+0x6>
    2680:	00 d0       	rcall	.+0      	; 0x2682 <GPIO_setupPortDirection+0x8>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS )
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	85 30       	cpi	r24, 0x05	; 5
    268e:	90 f5       	brcc	.+100    	; 0x26f4 <GPIO_setupPortDirection+0x7a>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	3c 83       	std	Y+4, r19	; 0x04
    2698:	2b 83       	std	Y+3, r18	; 0x03
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	81 30       	cpi	r24, 0x01	; 1
    26a0:	91 05       	cpc	r25, r1
    26a2:	d1 f0       	breq	.+52     	; 0x26d8 <GPIO_setupPortDirection+0x5e>
    26a4:	2b 81       	ldd	r18, Y+3	; 0x03
    26a6:	3c 81       	ldd	r19, Y+4	; 0x04
    26a8:	22 30       	cpi	r18, 0x02	; 2
    26aa:	31 05       	cpc	r19, r1
    26ac:	2c f4       	brge	.+10     	; 0x26b8 <GPIO_setupPortDirection+0x3e>
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	9c 81       	ldd	r25, Y+4	; 0x04
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	61 f0       	breq	.+24     	; 0x26ce <GPIO_setupPortDirection+0x54>
    26b6:	1e c0       	rjmp	.+60     	; 0x26f4 <GPIO_setupPortDirection+0x7a>
    26b8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ba:	3c 81       	ldd	r19, Y+4	; 0x04
    26bc:	22 30       	cpi	r18, 0x02	; 2
    26be:	31 05       	cpc	r19, r1
    26c0:	81 f0       	breq	.+32     	; 0x26e2 <GPIO_setupPortDirection+0x68>
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	83 30       	cpi	r24, 0x03	; 3
    26c8:	91 05       	cpc	r25, r1
    26ca:	81 f0       	breq	.+32     	; 0x26ec <GPIO_setupPortDirection+0x72>
    26cc:	13 c0       	rjmp	.+38     	; 0x26f4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA=direction;
    26ce:	ea e3       	ldi	r30, 0x3A	; 58
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	80 83       	st	Z, r24
    26d6:	0e c0       	rjmp	.+28     	; 0x26f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB=direction;
    26d8:	e7 e3       	ldi	r30, 0x37	; 55
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	80 83       	st	Z, r24
    26e0:	09 c0       	rjmp	.+18     	; 0x26f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC=direction;
    26e2:	e4 e3       	ldi	r30, 0x34	; 52
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	80 83       	st	Z, r24
    26ea:	04 c0       	rjmp	.+8      	; 0x26f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD=direction;
    26ec:	e1 e3       	ldi	r30, 0x31	; 49
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	00 d0       	rcall	.+0      	; 0x2708 <GPIO_writePort+0x6>
    2708:	00 d0       	rcall	.+0      	; 0x270a <GPIO_writePort+0x8>
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS )
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	85 30       	cpi	r24, 0x05	; 5
    2716:	90 f5       	brcc	.+100    	; 0x277c <GPIO_writePort+0x7a>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	3c 83       	std	Y+4, r19	; 0x04
    2720:	2b 83       	std	Y+3, r18	; 0x03
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	91 05       	cpc	r25, r1
    272a:	d1 f0       	breq	.+52     	; 0x2760 <GPIO_writePort+0x5e>
    272c:	2b 81       	ldd	r18, Y+3	; 0x03
    272e:	3c 81       	ldd	r19, Y+4	; 0x04
    2730:	22 30       	cpi	r18, 0x02	; 2
    2732:	31 05       	cpc	r19, r1
    2734:	2c f4       	brge	.+10     	; 0x2740 <GPIO_writePort+0x3e>
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	61 f0       	breq	.+24     	; 0x2756 <GPIO_writePort+0x54>
    273e:	1e c0       	rjmp	.+60     	; 0x277c <GPIO_writePort+0x7a>
    2740:	2b 81       	ldd	r18, Y+3	; 0x03
    2742:	3c 81       	ldd	r19, Y+4	; 0x04
    2744:	22 30       	cpi	r18, 0x02	; 2
    2746:	31 05       	cpc	r19, r1
    2748:	81 f0       	breq	.+32     	; 0x276a <GPIO_writePort+0x68>
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	83 30       	cpi	r24, 0x03	; 3
    2750:	91 05       	cpc	r25, r1
    2752:	81 f0       	breq	.+32     	; 0x2774 <GPIO_writePort+0x72>
    2754:	13 c0       	rjmp	.+38     	; 0x277c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    2756:	eb e3       	ldi	r30, 0x3B	; 59
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	80 83       	st	Z, r24
    275e:	0e c0       	rjmp	.+28     	; 0x277c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    2760:	e8 e3       	ldi	r30, 0x38	; 56
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	80 83       	st	Z, r24
    2768:	09 c0       	rjmp	.+18     	; 0x277c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    276a:	e5 e3       	ldi	r30, 0x35	; 53
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	80 83       	st	Z, r24
    2772:	04 c0       	rjmp	.+8      	; 0x277c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    2774:	e2 e3       	ldi	r30, 0x32	; 50
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	80 83       	st	Z, r24
			break;
		}
	}
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <read_Port>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 read_Port(uint8 port_num)
{
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	00 d0       	rcall	.+0      	; 0x2790 <read_Port+0x6>
    2790:	00 d0       	rcall	.+0      	; 0x2792 <read_Port+0x8>
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=LOGIC_LOW;
    2798:	19 82       	std	Y+1, r1	; 0x01

	if(port_num > NUM_OF_PORTS )
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	85 30       	cpi	r24, 0x05	; 5
    279e:	90 f5       	brcc	.+100    	; 0x2804 <read_Port+0x7a>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	3c 83       	std	Y+4, r19	; 0x04
    27a8:	2b 83       	std	Y+3, r18	; 0x03
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	9c 81       	ldd	r25, Y+4	; 0x04
    27ae:	81 30       	cpi	r24, 0x01	; 1
    27b0:	91 05       	cpc	r25, r1
    27b2:	d1 f0       	breq	.+52     	; 0x27e8 <read_Port+0x5e>
    27b4:	2b 81       	ldd	r18, Y+3	; 0x03
    27b6:	3c 81       	ldd	r19, Y+4	; 0x04
    27b8:	22 30       	cpi	r18, 0x02	; 2
    27ba:	31 05       	cpc	r19, r1
    27bc:	2c f4       	brge	.+10     	; 0x27c8 <read_Port+0x3e>
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	9c 81       	ldd	r25, Y+4	; 0x04
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	61 f0       	breq	.+24     	; 0x27de <read_Port+0x54>
    27c6:	1e c0       	rjmp	.+60     	; 0x2804 <read_Port+0x7a>
    27c8:	2b 81       	ldd	r18, Y+3	; 0x03
    27ca:	3c 81       	ldd	r19, Y+4	; 0x04
    27cc:	22 30       	cpi	r18, 0x02	; 2
    27ce:	31 05       	cpc	r19, r1
    27d0:	81 f0       	breq	.+32     	; 0x27f2 <read_Port+0x68>
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	83 30       	cpi	r24, 0x03	; 3
    27d8:	91 05       	cpc	r25, r1
    27da:	81 f0       	breq	.+32     	; 0x27fc <read_Port+0x72>
    27dc:	13 c0       	rjmp	.+38     	; 0x2804 <read_Port+0x7a>
		{
		case PORTA_ID:
			value= PINA;
    27de:	e9 e3       	ldi	r30, 0x39	; 57
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	0e c0       	rjmp	.+28     	; 0x2804 <read_Port+0x7a>
			break;
		case PORTB_ID:
			value= PINB;
    27e8:	e6 e3       	ldi	r30, 0x36	; 54
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	09 c0       	rjmp	.+18     	; 0x2804 <read_Port+0x7a>
			break;
		case PORTC_ID:
			value= PINC;
    27f2:	e3 e3       	ldi	r30, 0x33	; 51
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	04 c0       	rjmp	.+8      	; 0x2804 <read_Port+0x7a>
			break;
		case PORTD_ID:
			value= PIND;
    27fc:	e0 e3       	ldi	r30, 0x30	; 48
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    2804:	89 81       	ldd	r24, Y+1	; 0x01
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <KEYPAD_getPressedKey>:

/**************************************************
 *             Functions Definitions              *
 *************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	60 97       	sbiw	r28, 0x10	; 16
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
	uint8 row,col;

	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	61 e0       	ldi	r22, 0x01	; 1
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	62 e0       	ldi	r22, 0x02	; 2
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	63 e0       	ldi	r22, 0x03	; 3
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	64 e0       	ldi	r22, 0x04	; 4
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	65 e0       	ldi	r22, 0x05	; 5
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	66 e0       	ldi	r22, 0x06	; 6
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS==4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	67 e0       	ldi	r22, 0x07	; 7
    2872:	40 e0       	ldi	r20, 0x00	; 0
    2874:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row=0; row<KEYPAD_NUM_ROWS; row++)
    2878:	18 8a       	std	Y+16, r1	; 0x10
    287a:	ab c0       	rjmp	.+342    	; 0x29d2 <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	68 89       	ldd	r22, Y+16	; 0x10
    2880:	41 e0       	ldi	r20, 0x01	; 1
    2882:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin according to button connection*/
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_PRESSED);
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	0e 94 97 11 	call	0x232e	; 0x232e <GPIO_writePin>
			for(col=0; col<KEYPAD_NUM_COLS; col++)
    2890:	1f 86       	std	Y+15, r1	; 0x0f
    2892:	22 c0       	rjmp	.+68     	; 0x28d8 <KEYPAD_getPressedKey+0xc4>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col)== KEYPAD_BUTTON_PRESSED)
    2894:	8f 85       	ldd	r24, Y+15	; 0x0f
    2896:	98 2f       	mov	r25, r24
    2898:	9c 5f       	subi	r25, 0xFC	; 252
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	69 2f       	mov	r22, r25
    289e:	0e 94 92 12 	call	0x2524	; 0x2524 <GPIO_readPin>
    28a2:	88 23       	and	r24, r24
    28a4:	b1 f4       	brne	.+44     	; 0x28d2 <KEYPAD_getPressedKey+0xbe>
                        #endif
                    #elif(KEYPAD_NUM_COLS==4)
                        #ifdef STANDRAD_KEYPAD
		                    return (row*KEYPAD_NUM_COLS)+col+1;
                        #else
		                    return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    28a6:	88 89       	ldd	r24, Y+16	; 0x10
    28a8:	88 2f       	mov	r24, r24
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	88 0f       	add	r24, r24
    28ae:	99 1f       	adc	r25, r25
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	98 2f       	mov	r25, r24
    28b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b8:	89 0f       	add	r24, r25
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	0e 94 ee 14 	call	0x29dc	; 0x29dc <KEYPAD_4x4_adjustKeyNumber>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
			_delay_ms(5);
		}
	}
}
    28c0:	60 96       	adiw	r28, 0x10	; 16
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret
			*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);

			/* Set/Clear the row output pin according to button connection*/
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_PRESSED);
			for(col=0; col<KEYPAD_NUM_COLS; col++)
    28d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	8f 87       	std	Y+15, r24	; 0x0f
    28d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28da:	84 30       	cpi	r24, 0x04	; 4
    28dc:	d8 f2       	brcs	.-74     	; 0x2894 <KEYPAD_getPressedKey+0x80>
	                    #endif
                    #endif
				}
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	68 89       	ldd	r22, Y+16	; 0x10
    28e2:	40 e0       	ldi	r20, 0x00	; 0
    28e4:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	a0 ea       	ldi	r26, 0xA0	; 160
    28ee:	b0 e4       	ldi	r27, 0x40	; 64
    28f0:	8b 87       	std	Y+11, r24	; 0x0b
    28f2:	9c 87       	std	Y+12, r25	; 0x0c
    28f4:	ad 87       	std	Y+13, r26	; 0x0d
    28f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4a ef       	ldi	r20, 0xFA	; 250
    2906:	54 e4       	ldi	r21, 0x44	; 68
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	8f 83       	std	Y+7, r24	; 0x07
    2912:	98 87       	std	Y+8, r25	; 0x08
    2914:	a9 87       	std	Y+9, r26	; 0x09
    2916:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2918:	6f 81       	ldd	r22, Y+7	; 0x07
    291a:	78 85       	ldd	r23, Y+8	; 0x08
    291c:	89 85       	ldd	r24, Y+9	; 0x09
    291e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	2c f4       	brge	.+10     	; 0x293a <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
    2938:	3f c0       	rjmp	.+126    	; 0x29b8 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    293a:	6f 81       	ldd	r22, Y+7	; 0x07
    293c:	78 85       	ldd	r23, Y+8	; 0x08
    293e:	89 85       	ldd	r24, Y+9	; 0x09
    2940:	9a 85       	ldd	r25, Y+10	; 0x0a
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	4f e7       	ldi	r20, 0x7F	; 127
    2948:	57 e4       	ldi	r21, 0x47	; 71
    294a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    294e:	18 16       	cp	r1, r24
    2950:	4c f5       	brge	.+82     	; 0x29a4 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2952:	6b 85       	ldd	r22, Y+11	; 0x0b
    2954:	7c 85       	ldd	r23, Y+12	; 0x0c
    2956:	8d 85       	ldd	r24, Y+13	; 0x0d
    2958:	9e 85       	ldd	r25, Y+14	; 0x0e
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	0f c0       	rjmp	.+30     	; 0x299a <KEYPAD_getPressedKey+0x186>
    297c:	88 ec       	ldi	r24, 0xC8	; 200
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9c 83       	std	Y+4, r25	; 0x04
    2982:	8b 83       	std	Y+3, r24	; 0x03
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	9c 81       	ldd	r25, Y+4	; 0x04
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <KEYPAD_getPressedKey+0x174>
    298c:	9c 83       	std	Y+4, r25	; 0x04
    298e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2990:	8d 81       	ldd	r24, Y+5	; 0x05
    2992:	9e 81       	ldd	r25, Y+6	; 0x06
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	9e 83       	std	Y+6, r25	; 0x06
    2998:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	69 f7       	brne	.-38     	; 0x297c <KEYPAD_getPressedKey+0x168>
    29a2:	14 c0       	rjmp	.+40     	; 0x29cc <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a4:	6f 81       	ldd	r22, Y+7	; 0x07
    29a6:	78 85       	ldd	r23, Y+8	; 0x08
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	8d 83       	std	Y+5, r24	; 0x05
    29b8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ba:	9e 81       	ldd	r25, Y+6	; 0x06
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <KEYPAD_getPressedKey+0x1b0>
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif

	while(1)
	{
		for(row=0; row<KEYPAD_NUM_ROWS; row++)
    29cc:	88 89       	ldd	r24, Y+16	; 0x10
    29ce:	8f 5f       	subi	r24, 0xFF	; 255
    29d0:	88 8b       	std	Y+16, r24	; 0x10
    29d2:	88 89       	ldd	r24, Y+16	; 0x10
    29d4:	84 30       	cpi	r24, 0x04	; 4
    29d6:	08 f4       	brcc	.+2      	; 0x29da <KEYPAD_getPressedKey+0x1c6>
    29d8:	51 cf       	rjmp	.-350    	; 0x287c <KEYPAD_getPressedKey+0x68>
    29da:	4e cf       	rjmp	.-356    	; 0x2878 <KEYPAD_getPressedKey+0x64>

000029dc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button=0;
    29ea:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    29ec:	8a 81       	ldd	r24, Y+2	; 0x02
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	3c 83       	std	Y+4, r19	; 0x04
    29f4:	2b 83       	std	Y+3, r18	; 0x03
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	88 30       	cpi	r24, 0x08	; 8
    29fc:	91 05       	cpc	r25, r1
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2a00:	70 c0       	rjmp	.+224    	; 0x2ae2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2a02:	2b 81       	ldd	r18, Y+3	; 0x03
    2a04:	3c 81       	ldd	r19, Y+4	; 0x04
    2a06:	29 30       	cpi	r18, 0x09	; 9
    2a08:	31 05       	cpc	r19, r1
    2a0a:	5c f5       	brge	.+86     	; 0x2a62 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	84 30       	cpi	r24, 0x04	; 4
    2a12:	91 05       	cpc	r25, r1
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2a16:	59 c0       	rjmp	.+178    	; 0x2aca <KEYPAD_4x4_adjustKeyNumber+0xee>
    2a18:	2b 81       	ldd	r18, Y+3	; 0x03
    2a1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a1c:	25 30       	cpi	r18, 0x05	; 5
    2a1e:	31 05       	cpc	r19, r1
    2a20:	9c f4       	brge	.+38     	; 0x2a48 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	82 30       	cpi	r24, 0x02	; 2
    2a28:	91 05       	cpc	r25, r1
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <KEYPAD_4x4_adjustKeyNumber+0x52>
    2a2c:	48 c0       	rjmp	.+144    	; 0x2abe <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2a2e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a30:	3c 81       	ldd	r19, Y+4	; 0x04
    2a32:	23 30       	cpi	r18, 0x03	; 3
    2a34:	31 05       	cpc	r19, r1
    2a36:	0c f0       	brlt	.+2      	; 0x2a3a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2a38:	45 c0       	rjmp	.+138    	; 0x2ac4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	91 05       	cpc	r25, r1
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2a44:	39 c0       	rjmp	.+114    	; 0x2ab8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2a46:	67 c0       	rjmp	.+206    	; 0x2b16 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2a48:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a4c:	26 30       	cpi	r18, 0x06	; 6
    2a4e:	31 05       	cpc	r19, r1
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2a52:	41 c0       	rjmp	.+130    	; 0x2ad6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	87 30       	cpi	r24, 0x07	; 7
    2a5a:	91 05       	cpc	r25, r1
    2a5c:	0c f0       	brlt	.+2      	; 0x2a60 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2a5e:	3e c0       	rjmp	.+124    	; 0x2adc <KEYPAD_4x4_adjustKeyNumber+0x100>
    2a60:	37 c0       	rjmp	.+110    	; 0x2ad0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2a62:	2b 81       	ldd	r18, Y+3	; 0x03
    2a64:	3c 81       	ldd	r19, Y+4	; 0x04
    2a66:	2c 30       	cpi	r18, 0x0C	; 12
    2a68:	31 05       	cpc	r19, r1
    2a6a:	09 f4       	brne	.+2      	; 0x2a6e <KEYPAD_4x4_adjustKeyNumber+0x92>
    2a6c:	46 c0       	rjmp	.+140    	; 0x2afa <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	9c 81       	ldd	r25, Y+4	; 0x04
    2a72:	8d 30       	cpi	r24, 0x0D	; 13
    2a74:	91 05       	cpc	r25, r1
    2a76:	5c f4       	brge	.+22     	; 0x2a8e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2a78:	2b 81       	ldd	r18, Y+3	; 0x03
    2a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a7c:	2a 30       	cpi	r18, 0x0A	; 10
    2a7e:	31 05       	cpc	r19, r1
    2a80:	b1 f1       	breq	.+108    	; 0x2aee <KEYPAD_4x4_adjustKeyNumber+0x112>
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	8b 30       	cpi	r24, 0x0B	; 11
    2a88:	91 05       	cpc	r25, r1
    2a8a:	a4 f5       	brge	.+104    	; 0x2af4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2a8c:	2d c0       	rjmp	.+90     	; 0x2ae8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a90:	3c 81       	ldd	r19, Y+4	; 0x04
    2a92:	2e 30       	cpi	r18, 0x0E	; 14
    2a94:	31 05       	cpc	r19, r1
    2a96:	b9 f1       	breq	.+110    	; 0x2b06 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9c:	8e 30       	cpi	r24, 0x0E	; 14
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	7c f1       	brlt	.+94     	; 0x2b00 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    2aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa6:	2f 30       	cpi	r18, 0x0F	; 15
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	79 f1       	breq	.+94     	; 0x2b0a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab0:	80 31       	cpi	r24, 0x10	; 16
    2ab2:	91 05       	cpc	r25, r1
    2ab4:	69 f1       	breq	.+90     	; 0x2b10 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2ab6:	2f c0       	rjmp	.+94     	; 0x2b16 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button=7;
    2ab8:	87 e0       	ldi	r24, 0x07	; 7
    2aba:	89 83       	std	Y+1, r24	; 0x01
    2abc:	2e c0       	rjmp	.+92     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button=8;
    2abe:	88 e0       	ldi	r24, 0x08	; 8
    2ac0:	89 83       	std	Y+1, r24	; 0x01
    2ac2:	2b c0       	rjmp	.+86     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button=9;
    2ac4:	89 e0       	ldi	r24, 0x09	; 9
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	28 c0       	rjmp	.+80     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button='/';
    2aca:	8f e2       	ldi	r24, 0x2F	; 47
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	25 c0       	rjmp	.+74     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button=4;
    2ad0:	84 e0       	ldi	r24, 0x04	; 4
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    2ad4:	22 c0       	rjmp	.+68     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button=5;
    2ad6:	85 e0       	ldi	r24, 0x05	; 5
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	1f c0       	rjmp	.+62     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button=6;
    2adc:	86 e0       	ldi	r24, 0x06	; 6
    2ade:	89 83       	std	Y+1, r24	; 0x01
    2ae0:	1c c0       	rjmp	.+56     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button='*';
    2ae2:	8a e2       	ldi	r24, 0x2A	; 42
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	19 c0       	rjmp	.+50     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button=1;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	89 83       	std	Y+1, r24	; 0x01
    2aec:	16 c0       	rjmp	.+44     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button=2;
    2aee:	82 e0       	ldi	r24, 0x02	; 2
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	13 c0       	rjmp	.+38     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button=3;
    2af4:	83 e0       	ldi	r24, 0x03	; 3
    2af6:	89 83       	std	Y+1, r24	; 0x01
    2af8:	10 c0       	rjmp	.+32     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button='-';
    2afa:	8d e2       	ldi	r24, 0x2D	; 45
    2afc:	89 83       	std	Y+1, r24	; 0x01
    2afe:	0d c0       	rjmp	.+26     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button=13;
    2b00:	8d e0       	ldi	r24, 0x0D	; 13
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	0a c0       	rjmp	.+20     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button=0;
    2b06:	19 82       	std	Y+1, r1	; 0x01
    2b08:	08 c0       	rjmp	.+16     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button='=';
    2b0a:	8d e3       	ldi	r24, 0x3D	; 61
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	05 c0       	rjmp	.+10     	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button='+';
    2b10:	8b e2       	ldi	r24, 0x2B	; 43
    2b12:	89 83       	std	Y+1, r24	; 0x01
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button=button_number;
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
	}

	return keypad_button;
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
*/
void LCD_sendCommand(uint8 command)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	e9 97       	sbiw	r28, 0x39	; 57
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);    /* instruction mode RS=0 */
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	60 e0       	ldi	r22, 0x00	; 0
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	0e 94 97 11 	call	0x232e	; 0x232e <GPIO_writePin>
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a0 e8       	ldi	r26, 0x80	; 128
    2b50:	bf e3       	ldi	r27, 0x3F	; 63
    2b52:	8d ab       	std	Y+53, r24	; 0x35
    2b54:	9e ab       	std	Y+54, r25	; 0x36
    2b56:	af ab       	std	Y+55, r26	; 0x37
    2b58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b60:	98 ad       	ldd	r25, Y+56	; 0x38
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	4a ef       	ldi	r20, 0xFA	; 250
    2b68:	54 e4       	ldi	r21, 0x44	; 68
    2b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	89 ab       	std	Y+49, r24	; 0x31
    2b74:	9a ab       	std	Y+50, r25	; 0x32
    2b76:	ab ab       	std	Y+51, r26	; 0x33
    2b78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b80:	9c a9       	ldd	r25, Y+52	; 0x34
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	5f e3       	ldi	r21, 0x3F	; 63
    2b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8e:	88 23       	and	r24, r24
    2b90:	2c f4       	brge	.+10     	; 0x2b9c <LCD_sendCommand+0x72>
		__ticks = 1;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	98 ab       	std	Y+48, r25	; 0x30
    2b98:	8f a7       	std	Y+47, r24	; 0x2f
    2b9a:	3f c0       	rjmp	.+126    	; 0x2c1a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2b9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ba2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	3f ef       	ldi	r19, 0xFF	; 255
    2ba8:	4f e7       	ldi	r20, 0x7F	; 127
    2baa:	57 e4       	ldi	r21, 0x47	; 71
    2bac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb0:	18 16       	cp	r1, r24
    2bb2:	4c f5       	brge	.+82     	; 0x2c06 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb4:	6d a9       	ldd	r22, Y+53	; 0x35
    2bb6:	7e a9       	ldd	r23, Y+54	; 0x36
    2bb8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bba:	98 ad       	ldd	r25, Y+56	; 0x38
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	40 e2       	ldi	r20, 0x20	; 32
    2bc2:	51 e4       	ldi	r21, 0x41	; 65
    2bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	bc 01       	movw	r22, r24
    2bce:	cd 01       	movw	r24, r26
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	98 ab       	std	Y+48, r25	; 0x30
    2bda:	8f a7       	std	Y+47, r24	; 0x2f
    2bdc:	0f c0       	rjmp	.+30     	; 0x2bfc <LCD_sendCommand+0xd2>
    2bde:	88 ec       	ldi	r24, 0xC8	; 200
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	9e a7       	std	Y+46, r25	; 0x2e
    2be4:	8d a7       	std	Y+45, r24	; 0x2d
    2be6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2be8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <LCD_sendCommand+0xc0>
    2bee:	9e a7       	std	Y+46, r25	; 0x2e
    2bf0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	98 ab       	std	Y+48, r25	; 0x30
    2bfa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bfe:	98 a9       	ldd	r25, Y+48	; 0x30
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	69 f7       	brne	.-38     	; 0x2bde <LCD_sendCommand+0xb4>
    2c04:	14 c0       	rjmp	.+40     	; 0x2c2e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c06:	69 a9       	ldd	r22, Y+49	; 0x31
    2c08:	7a a9       	ldd	r23, Y+50	; 0x32
    2c0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	98 ab       	std	Y+48, r25	; 0x30
    2c18:	8f a7       	std	Y+47, r24	; 0x2f
    2c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c1e:	9c a7       	std	Y+44, r25	; 0x2c
    2c20:	8b a7       	std	Y+43, r24	; 0x2b
    2c22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c24:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <LCD_sendCommand+0xfc>
    2c2a:	9c a7       	std	Y+44, r25	; 0x2c
    2c2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);      /* delay for tas=50 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);    /* enable LCD E=1 */
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	61 e0       	ldi	r22, 0x01	; 1
    2c32:	41 e0       	ldi	r20, 0x01	; 1
    2c34:	0e 94 97 11 	call	0x232e	; 0x232e <GPIO_writePin>
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	a0 e8       	ldi	r26, 0x80	; 128
    2c3e:	bf e3       	ldi	r27, 0x3F	; 63
    2c40:	8f a3       	std	Y+39, r24	; 0x27
    2c42:	98 a7       	std	Y+40, r25	; 0x28
    2c44:	a9 a7       	std	Y+41, r26	; 0x29
    2c46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c48:	6f a1       	ldd	r22, Y+39	; 0x27
    2c4a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	4a ef       	ldi	r20, 0xFA	; 250
    2c56:	54 e4       	ldi	r21, 0x44	; 68
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	8b a3       	std	Y+35, r24	; 0x23
    2c62:	9c a3       	std	Y+36, r25	; 0x24
    2c64:	ad a3       	std	Y+37, r26	; 0x25
    2c66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c68:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e8       	ldi	r20, 0x80	; 128
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	2c f4       	brge	.+10     	; 0x2c8a <LCD_sendCommand+0x160>
		__ticks = 1;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	9a a3       	std	Y+34, r25	; 0x22
    2c86:	89 a3       	std	Y+33, r24	; 0x21
    2c88:	3f c0       	rjmp	.+126    	; 0x2d08 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2c8a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c8c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c8e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c90:	9e a1       	ldd	r25, Y+38	; 0x26
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	3f ef       	ldi	r19, 0xFF	; 255
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	57 e4       	ldi	r21, 0x47	; 71
    2c9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	4c f5       	brge	.+82     	; 0x2cf4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ca4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e2       	ldi	r20, 0x20	; 32
    2cb0:	51 e4       	ldi	r21, 0x41	; 65
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	9a a3       	std	Y+34, r25	; 0x22
    2cc8:	89 a3       	std	Y+33, r24	; 0x21
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <LCD_sendCommand+0x1c0>
    2ccc:	88 ec       	ldi	r24, 0xC8	; 200
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	98 a3       	std	Y+32, r25	; 0x20
    2cd2:	8f 8f       	std	Y+31, r24	; 0x1f
    2cd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cd6:	98 a1       	ldd	r25, Y+32	; 0x20
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <LCD_sendCommand+0x1ae>
    2cdc:	98 a3       	std	Y+32, r25	; 0x20
    2cde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	9a a3       	std	Y+34, r25	; 0x22
    2ce8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cea:	89 a1       	ldd	r24, Y+33	; 0x21
    2cec:	9a a1       	ldd	r25, Y+34	; 0x22
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	69 f7       	brne	.-38     	; 0x2ccc <LCD_sendCommand+0x1a2>
    2cf2:	14 c0       	rjmp	.+40     	; 0x2d1c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf4:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf6:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cfa:	9e a1       	ldd	r25, Y+38	; 0x26
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	9a a3       	std	Y+34, r25	; 0x22
    2d06:	89 a3       	std	Y+33, r24	; 0x21
    2d08:	89 a1       	ldd	r24, Y+33	; 0x21
    2d0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d0e:	8d 8f       	std	Y+29, r24	; 0x1d
    2d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <LCD_sendCommand+0x1ea>
    2d18:	9e 8f       	std	Y+30, r25	; 0x1e
    2d1a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);      /* delay for tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);    /* disable LCD E=0 */
	_delay_ms(1);      /* delay for th = 13 ns */

    #elif(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(LCD_DATA_PORT_ID,command);               /* out the required command*/
    2d1c:	82 e0       	ldi	r24, 0x02	; 2
    2d1e:	69 ad       	ldd	r22, Y+57	; 0x39
    2d20:	0e 94 81 13 	call	0x2702	; 0x2702 <GPIO_writePort>
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	a0 e8       	ldi	r26, 0x80	; 128
    2d2a:	bf e3       	ldi	r27, 0x3F	; 63
    2d2c:	89 8f       	std	Y+25, r24	; 0x19
    2d2e:	9a 8f       	std	Y+26, r25	; 0x1a
    2d30:	ab 8f       	std	Y+27, r26	; 0x1b
    2d32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d34:	69 8d       	ldd	r22, Y+25	; 0x19
    2d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	4a ef       	ldi	r20, 0xFA	; 250
    2d42:	54 e4       	ldi	r21, 0x44	; 68
    2d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	8d 8b       	std	Y+21, r24	; 0x15
    2d4e:	9e 8b       	std	Y+22, r25	; 0x16
    2d50:	af 8b       	std	Y+23, r26	; 0x17
    2d52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d54:	6d 89       	ldd	r22, Y+21	; 0x15
    2d56:	7e 89       	ldd	r23, Y+22	; 0x16
    2d58:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e8       	ldi	r20, 0x80	; 128
    2d62:	5f e3       	ldi	r21, 0x3F	; 63
    2d64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d68:	88 23       	and	r24, r24
    2d6a:	2c f4       	brge	.+10     	; 0x2d76 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	9c 8b       	std	Y+20, r25	; 0x14
    2d72:	8b 8b       	std	Y+19, r24	; 0x13
    2d74:	3f c0       	rjmp	.+126    	; 0x2df4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2d76:	6d 89       	ldd	r22, Y+21	; 0x15
    2d78:	7e 89       	ldd	r23, Y+22	; 0x16
    2d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	3f ef       	ldi	r19, 0xFF	; 255
    2d82:	4f e7       	ldi	r20, 0x7F	; 127
    2d84:	57 e4       	ldi	r21, 0x47	; 71
    2d86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d8a:	18 16       	cp	r1, r24
    2d8c:	4c f5       	brge	.+82     	; 0x2de0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e2       	ldi	r20, 0x20	; 32
    2d9c:	51 e4       	ldi	r21, 0x41	; 65
    2d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	bc 01       	movw	r22, r24
    2da8:	cd 01       	movw	r24, r26
    2daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	9c 8b       	std	Y+20, r25	; 0x14
    2db4:	8b 8b       	std	Y+19, r24	; 0x13
    2db6:	0f c0       	rjmp	.+30     	; 0x2dd6 <LCD_sendCommand+0x2ac>
    2db8:	88 ec       	ldi	r24, 0xC8	; 200
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	9a 8b       	std	Y+18, r25	; 0x12
    2dbe:	89 8b       	std	Y+17, r24	; 0x11
    2dc0:	89 89       	ldd	r24, Y+17	; 0x11
    2dc2:	9a 89       	ldd	r25, Y+18	; 0x12
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <LCD_sendCommand+0x29a>
    2dc8:	9a 8b       	std	Y+18, r25	; 0x12
    2dca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dce:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	9c 8b       	std	Y+20, r25	; 0x14
    2dd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	69 f7       	brne	.-38     	; 0x2db8 <LCD_sendCommand+0x28e>
    2dde:	14 c0       	rjmp	.+40     	; 0x2e08 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de0:	6d 89       	ldd	r22, Y+21	; 0x15
    2de2:	7e 89       	ldd	r23, Y+22	; 0x16
    2de4:	8f 89       	ldd	r24, Y+23	; 0x17
    2de6:	98 8d       	ldd	r25, Y+24	; 0x18
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	9c 8b       	std	Y+20, r25	; 0x14
    2df2:	8b 8b       	std	Y+19, r24	; 0x13
    2df4:	8b 89       	ldd	r24, Y+19	; 0x13
    2df6:	9c 89       	ldd	r25, Y+20	; 0x14
    2df8:	98 8b       	std	Y+16, r25	; 0x10
    2dfa:	8f 87       	std	Y+15, r24	; 0x0f
    2dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfe:	98 89       	ldd	r25, Y+16	; 0x10
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <LCD_sendCommand+0x2d6>
    2e04:	98 8b       	std	Y+16, r25	; 0x10
    2e06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);      /* delay for tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);    /* disable LCD E=0 */
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	61 e0       	ldi	r22, 0x01	; 1
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	0e 94 97 11 	call	0x232e	; 0x232e <GPIO_writePin>
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	a0 e8       	ldi	r26, 0x80	; 128
    2e18:	bf e3       	ldi	r27, 0x3F	; 63
    2e1a:	8b 87       	std	Y+11, r24	; 0x0b
    2e1c:	9c 87       	std	Y+12, r25	; 0x0c
    2e1e:	ad 87       	std	Y+13, r26	; 0x0d
    2e20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	4a ef       	ldi	r20, 0xFA	; 250
    2e30:	54 e4       	ldi	r21, 0x44	; 68
    2e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	8f 83       	std	Y+7, r24	; 0x07
    2e3c:	98 87       	std	Y+8, r25	; 0x08
    2e3e:	a9 87       	std	Y+9, r26	; 0x09
    2e40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e42:	6f 81       	ldd	r22, Y+7	; 0x07
    2e44:	78 85       	ldd	r23, Y+8	; 0x08
    2e46:	89 85       	ldd	r24, Y+9	; 0x09
    2e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e8       	ldi	r20, 0x80	; 128
    2e50:	5f e3       	ldi	r21, 0x3F	; 63
    2e52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e56:	88 23       	and	r24, r24
    2e58:	2c f4       	brge	.+10     	; 0x2e64 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	9e 83       	std	Y+6, r25	; 0x06
    2e60:	8d 83       	std	Y+5, r24	; 0x05
    2e62:	3f c0       	rjmp	.+126    	; 0x2ee2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2e64:	6f 81       	ldd	r22, Y+7	; 0x07
    2e66:	78 85       	ldd	r23, Y+8	; 0x08
    2e68:	89 85       	ldd	r24, Y+9	; 0x09
    2e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	3f ef       	ldi	r19, 0xFF	; 255
    2e70:	4f e7       	ldi	r20, 0x7F	; 127
    2e72:	57 e4       	ldi	r21, 0x47	; 71
    2e74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e78:	18 16       	cp	r1, r24
    2e7a:	4c f5       	brge	.+82     	; 0x2ece <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e2       	ldi	r20, 0x20	; 32
    2e8a:	51 e4       	ldi	r21, 0x41	; 65
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	bc 01       	movw	r22, r24
    2e96:	cd 01       	movw	r24, r26
    2e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	9e 83       	std	Y+6, r25	; 0x06
    2ea2:	8d 83       	std	Y+5, r24	; 0x05
    2ea4:	0f c0       	rjmp	.+30     	; 0x2ec4 <LCD_sendCommand+0x39a>
    2ea6:	88 ec       	ldi	r24, 0xC8	; 200
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	9c 83       	std	Y+4, r25	; 0x04
    2eac:	8b 83       	std	Y+3, r24	; 0x03
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <LCD_sendCommand+0x388>
    2eb6:	9c 83       	std	Y+4, r25	; 0x04
    2eb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eba:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	9e 83       	std	Y+6, r25	; 0x06
    2ec2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	69 f7       	brne	.-38     	; 0x2ea6 <LCD_sendCommand+0x37c>
    2ecc:	14 c0       	rjmp	.+40     	; 0x2ef6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ece:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed0:	78 85       	ldd	r23, Y+8	; 0x08
    2ed2:	89 85       	ldd	r24, Y+9	; 0x09
    2ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	9e 83       	std	Y+6, r25	; 0x06
    2ee0:	8d 83       	std	Y+5, r24	; 0x05
    2ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee6:	9a 83       	std	Y+2, r25	; 0x02
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	9a 81       	ldd	r25, Y+2	; 0x02
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <LCD_sendCommand+0x3c4>
    2ef2:	9a 83       	std	Y+2, r25	; 0x02
    2ef4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);      /* delay for th = 13 ns */

    #endif

}
    2ef6:	e9 96       	adiw	r28, 0x39	; 57
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	de bf       	out	0x3e, r29	; 62
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	cd bf       	out	0x3d, r28	; 61
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 command)
{
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
    2f10:	e9 97       	sbiw	r28, 0x39	; 57
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	cd bf       	out	0x3d, r28	; 61
    2f1c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);    /* instruction mode RS=1 */
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	41 e0       	ldi	r20, 0x01	; 1
    2f24:	0e 94 97 11 	call	0x232e	; 0x232e <GPIO_writePin>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	a0 e8       	ldi	r26, 0x80	; 128
    2f2e:	bf e3       	ldi	r27, 0x3F	; 63
    2f30:	8d ab       	std	Y+53, r24	; 0x35
    2f32:	9e ab       	std	Y+54, r25	; 0x36
    2f34:	af ab       	std	Y+55, r26	; 0x37
    2f36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f38:	6d a9       	ldd	r22, Y+53	; 0x35
    2f3a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f3c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f3e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	4a ef       	ldi	r20, 0xFA	; 250
    2f46:	54 e4       	ldi	r21, 0x44	; 68
    2f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	89 ab       	std	Y+49, r24	; 0x31
    2f52:	9a ab       	std	Y+50, r25	; 0x32
    2f54:	ab ab       	std	Y+51, r26	; 0x33
    2f56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f58:	69 a9       	ldd	r22, Y+49	; 0x31
    2f5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	40 e8       	ldi	r20, 0x80	; 128
    2f66:	5f e3       	ldi	r21, 0x3F	; 63
    2f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f6c:	88 23       	and	r24, r24
    2f6e:	2c f4       	brge	.+10     	; 0x2f7a <LCD_displayCharacter+0x72>
		__ticks = 1;
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	98 ab       	std	Y+48, r25	; 0x30
    2f76:	8f a7       	std	Y+47, r24	; 0x2f
    2f78:	3f c0       	rjmp	.+126    	; 0x2ff8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2f7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f80:	9c a9       	ldd	r25, Y+52	; 0x34
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	3f ef       	ldi	r19, 0xFF	; 255
    2f86:	4f e7       	ldi	r20, 0x7F	; 127
    2f88:	57 e4       	ldi	r21, 0x47	; 71
    2f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f8e:	18 16       	cp	r1, r24
    2f90:	4c f5       	brge	.+82     	; 0x2fe4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f92:	6d a9       	ldd	r22, Y+53	; 0x35
    2f94:	7e a9       	ldd	r23, Y+54	; 0x36
    2f96:	8f a9       	ldd	r24, Y+55	; 0x37
    2f98:	98 ad       	ldd	r25, Y+56	; 0x38
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e2       	ldi	r20, 0x20	; 32
    2fa0:	51 e4       	ldi	r21, 0x41	; 65
    2fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	bc 01       	movw	r22, r24
    2fac:	cd 01       	movw	r24, r26
    2fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	98 ab       	std	Y+48, r25	; 0x30
    2fb8:	8f a7       	std	Y+47, r24	; 0x2f
    2fba:	0f c0       	rjmp	.+30     	; 0x2fda <LCD_displayCharacter+0xd2>
    2fbc:	88 ec       	ldi	r24, 0xC8	; 200
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	9e a7       	std	Y+46, r25	; 0x2e
    2fc2:	8d a7       	std	Y+45, r24	; 0x2d
    2fc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <LCD_displayCharacter+0xc0>
    2fcc:	9e a7       	std	Y+46, r25	; 0x2e
    2fce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fd2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	98 ab       	std	Y+48, r25	; 0x30
    2fd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fdc:	98 a9       	ldd	r25, Y+48	; 0x30
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	69 f7       	brne	.-38     	; 0x2fbc <LCD_displayCharacter+0xb4>
    2fe2:	14 c0       	rjmp	.+40     	; 0x300c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe4:	69 a9       	ldd	r22, Y+49	; 0x31
    2fe6:	7a a9       	ldd	r23, Y+50	; 0x32
    2fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    2fea:	9c a9       	ldd	r25, Y+52	; 0x34
    2fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	98 ab       	std	Y+48, r25	; 0x30
    2ff6:	8f a7       	std	Y+47, r24	; 0x2f
    2ff8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ffa:	98 a9       	ldd	r25, Y+48	; 0x30
    2ffc:	9c a7       	std	Y+44, r25	; 0x2c
    2ffe:	8b a7       	std	Y+43, r24	; 0x2b
    3000:	8b a5       	ldd	r24, Y+43	; 0x2b
    3002:	9c a5       	ldd	r25, Y+44	; 0x2c
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	f1 f7       	brne	.-4      	; 0x3004 <LCD_displayCharacter+0xfc>
    3008:	9c a7       	std	Y+44, r25	; 0x2c
    300a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);      /* delay for tas=50 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);    /* enable LCD E=1 */
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	61 e0       	ldi	r22, 0x01	; 1
    3010:	41 e0       	ldi	r20, 0x01	; 1
    3012:	0e 94 97 11 	call	0x232e	; 0x232e <GPIO_writePin>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	a0 e8       	ldi	r26, 0x80	; 128
    301c:	bf e3       	ldi	r27, 0x3F	; 63
    301e:	8f a3       	std	Y+39, r24	; 0x27
    3020:	98 a7       	std	Y+40, r25	; 0x28
    3022:	a9 a7       	std	Y+41, r26	; 0x29
    3024:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3026:	6f a1       	ldd	r22, Y+39	; 0x27
    3028:	78 a5       	ldd	r23, Y+40	; 0x28
    302a:	89 a5       	ldd	r24, Y+41	; 0x29
    302c:	9a a5       	ldd	r25, Y+42	; 0x2a
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	4a ef       	ldi	r20, 0xFA	; 250
    3034:	54 e4       	ldi	r21, 0x44	; 68
    3036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	8b a3       	std	Y+35, r24	; 0x23
    3040:	9c a3       	std	Y+36, r25	; 0x24
    3042:	ad a3       	std	Y+37, r26	; 0x25
    3044:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3046:	6b a1       	ldd	r22, Y+35	; 0x23
    3048:	7c a1       	ldd	r23, Y+36	; 0x24
    304a:	8d a1       	ldd	r24, Y+37	; 0x25
    304c:	9e a1       	ldd	r25, Y+38	; 0x26
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e8       	ldi	r20, 0x80	; 128
    3054:	5f e3       	ldi	r21, 0x3F	; 63
    3056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305a:	88 23       	and	r24, r24
    305c:	2c f4       	brge	.+10     	; 0x3068 <LCD_displayCharacter+0x160>
		__ticks = 1;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	9a a3       	std	Y+34, r25	; 0x22
    3064:	89 a3       	std	Y+33, r24	; 0x21
    3066:	3f c0       	rjmp	.+126    	; 0x30e6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    3068:	6b a1       	ldd	r22, Y+35	; 0x23
    306a:	7c a1       	ldd	r23, Y+36	; 0x24
    306c:	8d a1       	ldd	r24, Y+37	; 0x25
    306e:	9e a1       	ldd	r25, Y+38	; 0x26
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	3f ef       	ldi	r19, 0xFF	; 255
    3074:	4f e7       	ldi	r20, 0x7F	; 127
    3076:	57 e4       	ldi	r21, 0x47	; 71
    3078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    307c:	18 16       	cp	r1, r24
    307e:	4c f5       	brge	.+82     	; 0x30d2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3080:	6f a1       	ldd	r22, Y+39	; 0x27
    3082:	78 a5       	ldd	r23, Y+40	; 0x28
    3084:	89 a5       	ldd	r24, Y+41	; 0x29
    3086:	9a a5       	ldd	r25, Y+42	; 0x2a
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e2       	ldi	r20, 0x20	; 32
    308e:	51 e4       	ldi	r21, 0x41	; 65
    3090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	9a a3       	std	Y+34, r25	; 0x22
    30a6:	89 a3       	std	Y+33, r24	; 0x21
    30a8:	0f c0       	rjmp	.+30     	; 0x30c8 <LCD_displayCharacter+0x1c0>
    30aa:	88 ec       	ldi	r24, 0xC8	; 200
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	98 a3       	std	Y+32, r25	; 0x20
    30b0:	8f 8f       	std	Y+31, r24	; 0x1f
    30b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30b4:	98 a1       	ldd	r25, Y+32	; 0x20
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	f1 f7       	brne	.-4      	; 0x30b6 <LCD_displayCharacter+0x1ae>
    30ba:	98 a3       	std	Y+32, r25	; 0x20
    30bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30be:	89 a1       	ldd	r24, Y+33	; 0x21
    30c0:	9a a1       	ldd	r25, Y+34	; 0x22
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	9a a3       	std	Y+34, r25	; 0x22
    30c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c8:	89 a1       	ldd	r24, Y+33	; 0x21
    30ca:	9a a1       	ldd	r25, Y+34	; 0x22
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	69 f7       	brne	.-38     	; 0x30aa <LCD_displayCharacter+0x1a2>
    30d0:	14 c0       	rjmp	.+40     	; 0x30fa <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d2:	6b a1       	ldd	r22, Y+35	; 0x23
    30d4:	7c a1       	ldd	r23, Y+36	; 0x24
    30d6:	8d a1       	ldd	r24, Y+37	; 0x25
    30d8:	9e a1       	ldd	r25, Y+38	; 0x26
    30da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	9a a3       	std	Y+34, r25	; 0x22
    30e4:	89 a3       	std	Y+33, r24	; 0x21
    30e6:	89 a1       	ldd	r24, Y+33	; 0x21
    30e8:	9a a1       	ldd	r25, Y+34	; 0x22
    30ea:	9e 8f       	std	Y+30, r25	; 0x1e
    30ec:	8d 8f       	std	Y+29, r24	; 0x1d
    30ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	f1 f7       	brne	.-4      	; 0x30f2 <LCD_displayCharacter+0x1ea>
    30f6:	9e 8f       	std	Y+30, r25	; 0x1e
    30f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);      /* delay for tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);    /* disable LCD E=0 */
	_delay_ms(1);      /* delay for th = 13 ns */

    #elif(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(LCD_DATA_PORT_ID,command);               /* out the required command*/
    30fa:	82 e0       	ldi	r24, 0x02	; 2
    30fc:	69 ad       	ldd	r22, Y+57	; 0x39
    30fe:	0e 94 81 13 	call	0x2702	; 0x2702 <GPIO_writePort>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	a0 e8       	ldi	r26, 0x80	; 128
    3108:	bf e3       	ldi	r27, 0x3F	; 63
    310a:	89 8f       	std	Y+25, r24	; 0x19
    310c:	9a 8f       	std	Y+26, r25	; 0x1a
    310e:	ab 8f       	std	Y+27, r26	; 0x1b
    3110:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3112:	69 8d       	ldd	r22, Y+25	; 0x19
    3114:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3116:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3118:	9c 8d       	ldd	r25, Y+28	; 0x1c
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	4a ef       	ldi	r20, 0xFA	; 250
    3120:	54 e4       	ldi	r21, 0x44	; 68
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	8d 8b       	std	Y+21, r24	; 0x15
    312c:	9e 8b       	std	Y+22, r25	; 0x16
    312e:	af 8b       	std	Y+23, r26	; 0x17
    3130:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3132:	6d 89       	ldd	r22, Y+21	; 0x15
    3134:	7e 89       	ldd	r23, Y+22	; 0x16
    3136:	8f 89       	ldd	r24, Y+23	; 0x17
    3138:	98 8d       	ldd	r25, Y+24	; 0x18
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	40 e8       	ldi	r20, 0x80	; 128
    3140:	5f e3       	ldi	r21, 0x3F	; 63
    3142:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3146:	88 23       	and	r24, r24
    3148:	2c f4       	brge	.+10     	; 0x3154 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	9c 8b       	std	Y+20, r25	; 0x14
    3150:	8b 8b       	std	Y+19, r24	; 0x13
    3152:	3f c0       	rjmp	.+126    	; 0x31d2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3154:	6d 89       	ldd	r22, Y+21	; 0x15
    3156:	7e 89       	ldd	r23, Y+22	; 0x16
    3158:	8f 89       	ldd	r24, Y+23	; 0x17
    315a:	98 8d       	ldd	r25, Y+24	; 0x18
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	3f ef       	ldi	r19, 0xFF	; 255
    3160:	4f e7       	ldi	r20, 0x7F	; 127
    3162:	57 e4       	ldi	r21, 0x47	; 71
    3164:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3168:	18 16       	cp	r1, r24
    316a:	4c f5       	brge	.+82     	; 0x31be <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316c:	69 8d       	ldd	r22, Y+25	; 0x19
    316e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3170:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3172:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e2       	ldi	r20, 0x20	; 32
    317a:	51 e4       	ldi	r21, 0x41	; 65
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	bc 01       	movw	r22, r24
    3186:	cd 01       	movw	r24, r26
    3188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	9c 8b       	std	Y+20, r25	; 0x14
    3192:	8b 8b       	std	Y+19, r24	; 0x13
    3194:	0f c0       	rjmp	.+30     	; 0x31b4 <LCD_displayCharacter+0x2ac>
    3196:	88 ec       	ldi	r24, 0xC8	; 200
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	9a 8b       	std	Y+18, r25	; 0x12
    319c:	89 8b       	std	Y+17, r24	; 0x11
    319e:	89 89       	ldd	r24, Y+17	; 0x11
    31a0:	9a 89       	ldd	r25, Y+18	; 0x12
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <LCD_displayCharacter+0x29a>
    31a6:	9a 8b       	std	Y+18, r25	; 0x12
    31a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31aa:	8b 89       	ldd	r24, Y+19	; 0x13
    31ac:	9c 89       	ldd	r25, Y+20	; 0x14
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	9c 8b       	std	Y+20, r25	; 0x14
    31b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b4:	8b 89       	ldd	r24, Y+19	; 0x13
    31b6:	9c 89       	ldd	r25, Y+20	; 0x14
    31b8:	00 97       	sbiw	r24, 0x00	; 0
    31ba:	69 f7       	brne	.-38     	; 0x3196 <LCD_displayCharacter+0x28e>
    31bc:	14 c0       	rjmp	.+40     	; 0x31e6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31be:	6d 89       	ldd	r22, Y+21	; 0x15
    31c0:	7e 89       	ldd	r23, Y+22	; 0x16
    31c2:	8f 89       	ldd	r24, Y+23	; 0x17
    31c4:	98 8d       	ldd	r25, Y+24	; 0x18
    31c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	9c 8b       	std	Y+20, r25	; 0x14
    31d0:	8b 8b       	std	Y+19, r24	; 0x13
    31d2:	8b 89       	ldd	r24, Y+19	; 0x13
    31d4:	9c 89       	ldd	r25, Y+20	; 0x14
    31d6:	98 8b       	std	Y+16, r25	; 0x10
    31d8:	8f 87       	std	Y+15, r24	; 0x0f
    31da:	8f 85       	ldd	r24, Y+15	; 0x0f
    31dc:	98 89       	ldd	r25, Y+16	; 0x10
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	f1 f7       	brne	.-4      	; 0x31de <LCD_displayCharacter+0x2d6>
    31e2:	98 8b       	std	Y+16, r25	; 0x10
    31e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);      /* delay for tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);    /* disable LCD E=0 */
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	61 e0       	ldi	r22, 0x01	; 1
    31ea:	40 e0       	ldi	r20, 0x00	; 0
    31ec:	0e 94 97 11 	call	0x232e	; 0x232e <GPIO_writePin>
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	a0 e8       	ldi	r26, 0x80	; 128
    31f6:	bf e3       	ldi	r27, 0x3F	; 63
    31f8:	8b 87       	std	Y+11, r24	; 0x0b
    31fa:	9c 87       	std	Y+12, r25	; 0x0c
    31fc:	ad 87       	std	Y+13, r26	; 0x0d
    31fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3200:	6b 85       	ldd	r22, Y+11	; 0x0b
    3202:	7c 85       	ldd	r23, Y+12	; 0x0c
    3204:	8d 85       	ldd	r24, Y+13	; 0x0d
    3206:	9e 85       	ldd	r25, Y+14	; 0x0e
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	4a ef       	ldi	r20, 0xFA	; 250
    320e:	54 e4       	ldi	r21, 0x44	; 68
    3210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	8f 83       	std	Y+7, r24	; 0x07
    321a:	98 87       	std	Y+8, r25	; 0x08
    321c:	a9 87       	std	Y+9, r26	; 0x09
    321e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3220:	6f 81       	ldd	r22, Y+7	; 0x07
    3222:	78 85       	ldd	r23, Y+8	; 0x08
    3224:	89 85       	ldd	r24, Y+9	; 0x09
    3226:	9a 85       	ldd	r25, Y+10	; 0x0a
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e8       	ldi	r20, 0x80	; 128
    322e:	5f e3       	ldi	r21, 0x3F	; 63
    3230:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3234:	88 23       	and	r24, r24
    3236:	2c f4       	brge	.+10     	; 0x3242 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	9e 83       	std	Y+6, r25	; 0x06
    323e:	8d 83       	std	Y+5, r24	; 0x05
    3240:	3f c0       	rjmp	.+126    	; 0x32c0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3242:	6f 81       	ldd	r22, Y+7	; 0x07
    3244:	78 85       	ldd	r23, Y+8	; 0x08
    3246:	89 85       	ldd	r24, Y+9	; 0x09
    3248:	9a 85       	ldd	r25, Y+10	; 0x0a
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	3f ef       	ldi	r19, 0xFF	; 255
    324e:	4f e7       	ldi	r20, 0x7F	; 127
    3250:	57 e4       	ldi	r21, 0x47	; 71
    3252:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3256:	18 16       	cp	r1, r24
    3258:	4c f5       	brge	.+82     	; 0x32ac <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325a:	6b 85       	ldd	r22, Y+11	; 0x0b
    325c:	7c 85       	ldd	r23, Y+12	; 0x0c
    325e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3260:	9e 85       	ldd	r25, Y+14	; 0x0e
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e2       	ldi	r20, 0x20	; 32
    3268:	51 e4       	ldi	r21, 0x41	; 65
    326a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	bc 01       	movw	r22, r24
    3274:	cd 01       	movw	r24, r26
    3276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	9e 83       	std	Y+6, r25	; 0x06
    3280:	8d 83       	std	Y+5, r24	; 0x05
    3282:	0f c0       	rjmp	.+30     	; 0x32a2 <LCD_displayCharacter+0x39a>
    3284:	88 ec       	ldi	r24, 0xC8	; 200
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	9c 83       	std	Y+4, r25	; 0x04
    328a:	8b 83       	std	Y+3, r24	; 0x03
    328c:	8b 81       	ldd	r24, Y+3	; 0x03
    328e:	9c 81       	ldd	r25, Y+4	; 0x04
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <LCD_displayCharacter+0x388>
    3294:	9c 83       	std	Y+4, r25	; 0x04
    3296:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	9e 81       	ldd	r25, Y+6	; 0x06
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	9e 83       	std	Y+6, r25	; 0x06
    32a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a2:	8d 81       	ldd	r24, Y+5	; 0x05
    32a4:	9e 81       	ldd	r25, Y+6	; 0x06
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	69 f7       	brne	.-38     	; 0x3284 <LCD_displayCharacter+0x37c>
    32aa:	14 c0       	rjmp	.+40     	; 0x32d4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ac:	6f 81       	ldd	r22, Y+7	; 0x07
    32ae:	78 85       	ldd	r23, Y+8	; 0x08
    32b0:	89 85       	ldd	r24, Y+9	; 0x09
    32b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	9e 83       	std	Y+6, r25	; 0x06
    32be:	8d 83       	std	Y+5, r24	; 0x05
    32c0:	8d 81       	ldd	r24, Y+5	; 0x05
    32c2:	9e 81       	ldd	r25, Y+6	; 0x06
    32c4:	9a 83       	std	Y+2, r25	; 0x02
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	9a 81       	ldd	r25, Y+2	; 0x02
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	f1 f7       	brne	.-4      	; 0x32cc <LCD_displayCharacter+0x3c4>
    32d0:	9a 83       	std	Y+2, r25	; 0x02
    32d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);      /* delay for th = 13 ns */

    #endif
}
    32d4:	e9 96       	adiw	r28, 0x39	; 57
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	de bf       	out	0x3e, r29	; 62
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	cd bf       	out	0x3d, r28	; 61
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	08 95       	ret

000032e6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init()
{
    32e6:	df 93       	push	r29
    32e8:	cf 93       	push	r28
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	2e 97       	sbiw	r28, 0x0e	; 14
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
	/* SET  RS and E as OUTPUT PINS */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	60 e0       	ldi	r22, 0x00	; 0
    32fe:	41 e0       	ldi	r20, 0x01	; 1
    3300:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	61 e0       	ldi	r22, 0x01	; 1
    3308:	41 e0       	ldi	r20, 0x01	; 1
    330a:	0e 94 9c 10 	call	0x2138	; 0x2138 <GPIO_setupPinDirection>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	a0 ea       	ldi	r26, 0xA0	; 160
    3314:	b1 e4       	ldi	r27, 0x41	; 65
    3316:	8b 87       	std	Y+11, r24	; 0x0b
    3318:	9c 87       	std	Y+12, r25	; 0x0c
    331a:	ad 87       	std	Y+13, r26	; 0x0d
    331c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    331e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3320:	7c 85       	ldd	r23, Y+12	; 0x0c
    3322:	8d 85       	ldd	r24, Y+13	; 0x0d
    3324:	9e 85       	ldd	r25, Y+14	; 0x0e
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	4a ef       	ldi	r20, 0xFA	; 250
    332c:	54 e4       	ldi	r21, 0x44	; 68
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	8f 83       	std	Y+7, r24	; 0x07
    3338:	98 87       	std	Y+8, r25	; 0x08
    333a:	a9 87       	std	Y+9, r26	; 0x09
    333c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    333e:	6f 81       	ldd	r22, Y+7	; 0x07
    3340:	78 85       	ldd	r23, Y+8	; 0x08
    3342:	89 85       	ldd	r24, Y+9	; 0x09
    3344:	9a 85       	ldd	r25, Y+10	; 0x0a
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e8       	ldi	r20, 0x80	; 128
    334c:	5f e3       	ldi	r21, 0x3F	; 63
    334e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3352:	88 23       	and	r24, r24
    3354:	2c f4       	brge	.+10     	; 0x3360 <LCD_init+0x7a>
		__ticks = 1;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	9e 83       	std	Y+6, r25	; 0x06
    335c:	8d 83       	std	Y+5, r24	; 0x05
    335e:	3f c0       	rjmp	.+126    	; 0x33de <LCD_init+0xf8>
	else if (__tmp > 65535)
    3360:	6f 81       	ldd	r22, Y+7	; 0x07
    3362:	78 85       	ldd	r23, Y+8	; 0x08
    3364:	89 85       	ldd	r24, Y+9	; 0x09
    3366:	9a 85       	ldd	r25, Y+10	; 0x0a
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	3f ef       	ldi	r19, 0xFF	; 255
    336c:	4f e7       	ldi	r20, 0x7F	; 127
    336e:	57 e4       	ldi	r21, 0x47	; 71
    3370:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3374:	18 16       	cp	r1, r24
    3376:	4c f5       	brge	.+82     	; 0x33ca <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3378:	6b 85       	ldd	r22, Y+11	; 0x0b
    337a:	7c 85       	ldd	r23, Y+12	; 0x0c
    337c:	8d 85       	ldd	r24, Y+13	; 0x0d
    337e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e2       	ldi	r20, 0x20	; 32
    3386:	51 e4       	ldi	r21, 0x41	; 65
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	bc 01       	movw	r22, r24
    3392:	cd 01       	movw	r24, r26
    3394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	9e 83       	std	Y+6, r25	; 0x06
    339e:	8d 83       	std	Y+5, r24	; 0x05
    33a0:	0f c0       	rjmp	.+30     	; 0x33c0 <LCD_init+0xda>
    33a2:	88 ec       	ldi	r24, 0xC8	; 200
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	9c 83       	std	Y+4, r25	; 0x04
    33a8:	8b 83       	std	Y+3, r24	; 0x03
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	9c 81       	ldd	r25, Y+4	; 0x04
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <LCD_init+0xc8>
    33b2:	9c 83       	std	Y+4, r25	; 0x04
    33b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b6:	8d 81       	ldd	r24, Y+5	; 0x05
    33b8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	9e 83       	std	Y+6, r25	; 0x06
    33be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c0:	8d 81       	ldd	r24, Y+5	; 0x05
    33c2:	9e 81       	ldd	r25, Y+6	; 0x06
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	69 f7       	brne	.-38     	; 0x33a2 <LCD_init+0xbc>
    33c8:	14 c0       	rjmp	.+40     	; 0x33f2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ca:	6f 81       	ldd	r22, Y+7	; 0x07
    33cc:	78 85       	ldd	r23, Y+8	; 0x08
    33ce:	89 85       	ldd	r24, Y+9	; 0x09
    33d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	9e 83       	std	Y+6, r25	; 0x06
    33dc:	8d 83       	std	Y+5, r24	; 0x05
    33de:	8d 81       	ldd	r24, Y+5	; 0x05
    33e0:	9e 81       	ldd	r25, Y+6	; 0x06
    33e2:	9a 83       	std	Y+2, r25	; 0x02
    33e4:	89 83       	std	Y+1, r24	; 0x01
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <LCD_init+0x104>
    33ee:	9a 83       	std	Y+2, r25	; 0x02
    33f0:	89 83       	std	Y+1, r24	; 0x01
	/* USE 2 LINES + 4 BITS DATA MODE + 5*7 DOT DISPLAY MODE */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

    #elif(LCD_DATA_BITS_MODE==8)
	/* SET DATA port as output */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	6f ef       	ldi	r22, 0xFF	; 255
    33f6:	0e 94 3d 13 	call	0x267a	; 0x267a <GPIO_setupPortDirection>

	/* USE 2 LINES + 8 BITS DATA MODE + 5*7 DOT DISPLAY MODE */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    33fa:	88 e3       	ldi	r24, 0x38	; 56
    33fc:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>

    #endif

	LCD_sendCommand(LCD_CURSOR_OFF);       /* CURSOR IS OFF */
    3400:	8c e0       	ldi	r24, 0x0C	; 12
    3402:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);    /* CLEAR LCD AT BEGINING */
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
}
    340c:	2e 96       	adiw	r28, 0x0e	; 14
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	00 d0       	rcall	.+0      	; 0x3424 <LCD_displayString+0x6>
    3424:	0f 92       	push	r0
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	9b 83       	std	Y+3, r25	; 0x03
    342c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    342e:	19 82       	std	Y+1, r1	; 0x01
    3430:	0e c0       	rjmp	.+28     	; 0x344e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	28 2f       	mov	r18, r24
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	9b 81       	ldd	r25, Y+3	; 0x03
    343c:	fc 01       	movw	r30, r24
    343e:	e2 0f       	add	r30, r18
    3440:	f3 1f       	adc	r31, r19
    3442:	80 81       	ld	r24, Z
    3444:	0e 94 84 17 	call	0x2f08	; 0x2f08 <LCD_displayCharacter>
		i++;
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	8f 5f       	subi	r24, 0xFF	; 255
    344c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i=0;
	while(Str[i] != '\0')
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	28 2f       	mov	r18, r24
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	9b 81       	ldd	r25, Y+3	; 0x03
    3458:	fc 01       	movw	r30, r24
    345a:	e2 0f       	add	r30, r18
    345c:	f3 1f       	adc	r31, r19
    345e:	80 81       	ld	r24, Z
    3460:	88 23       	and	r24, r24
    3462:	39 f7       	brne	.-50     	; 0x3432 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(* Str);
		Str++;
	}
	***********************************************/
}
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	00 d0       	rcall	.+0      	; 0x3476 <LCD_moveCursor+0x6>
    3476:	00 d0       	rcall	.+0      	; 0x3478 <LCD_moveCursor+0x8>
    3478:	0f 92       	push	r0
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	8a 83       	std	Y+2, r24	; 0x02
    3480:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	switch(row)
    3482:	8a 81       	ldd	r24, Y+2	; 0x02
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	3d 83       	std	Y+5, r19	; 0x05
    348a:	2c 83       	std	Y+4, r18	; 0x04
    348c:	8c 81       	ldd	r24, Y+4	; 0x04
    348e:	9d 81       	ldd	r25, Y+5	; 0x05
    3490:	81 30       	cpi	r24, 0x01	; 1
    3492:	91 05       	cpc	r25, r1
    3494:	c1 f0       	breq	.+48     	; 0x34c6 <LCD_moveCursor+0x56>
    3496:	2c 81       	ldd	r18, Y+4	; 0x04
    3498:	3d 81       	ldd	r19, Y+5	; 0x05
    349a:	22 30       	cpi	r18, 0x02	; 2
    349c:	31 05       	cpc	r19, r1
    349e:	2c f4       	brge	.+10     	; 0x34aa <LCD_moveCursor+0x3a>
    34a0:	8c 81       	ldd	r24, Y+4	; 0x04
    34a2:	9d 81       	ldd	r25, Y+5	; 0x05
    34a4:	00 97       	sbiw	r24, 0x00	; 0
    34a6:	61 f0       	breq	.+24     	; 0x34c0 <LCD_moveCursor+0x50>
    34a8:	19 c0       	rjmp	.+50     	; 0x34dc <LCD_moveCursor+0x6c>
    34aa:	2c 81       	ldd	r18, Y+4	; 0x04
    34ac:	3d 81       	ldd	r19, Y+5	; 0x05
    34ae:	22 30       	cpi	r18, 0x02	; 2
    34b0:	31 05       	cpc	r19, r1
    34b2:	69 f0       	breq	.+26     	; 0x34ce <LCD_moveCursor+0x5e>
    34b4:	8c 81       	ldd	r24, Y+4	; 0x04
    34b6:	9d 81       	ldd	r25, Y+5	; 0x05
    34b8:	83 30       	cpi	r24, 0x03	; 3
    34ba:	91 05       	cpc	r25, r1
    34bc:	61 f0       	breq	.+24     	; 0x34d6 <LCD_moveCursor+0x66>
    34be:	0e c0       	rjmp	.+28     	; 0x34dc <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    34c0:	8b 81       	ldd	r24, Y+3	; 0x03
    34c2:	89 83       	std	Y+1, r24	; 0x01
    34c4:	0b c0       	rjmp	.+22     	; 0x34dc <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+ 0x40;
    34c6:	8b 81       	ldd	r24, Y+3	; 0x03
    34c8:	80 5c       	subi	r24, 0xC0	; 192
    34ca:	89 83       	std	Y+1, r24	; 0x01
    34cc:	07 c0       	rjmp	.+14     	; 0x34dc <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+ 0x10;
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
    34d0:	80 5f       	subi	r24, 0xF0	; 240
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	03 c0       	rjmp	.+6      	; 0x34dc <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+ 0x50;
    34d6:	8b 81       	ldd	r24, Y+3	; 0x03
    34d8:	80 5b       	subi	r24, 0xB0	; 176
    34da:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* Move cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION) ;
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	80 68       	ori	r24, 0x80	; 128
    34e0:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
}
    34e4:	0f 90       	pop	r0
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	0f 90       	pop	r0
    34ec:	0f 90       	pop	r0
    34ee:	cf 91       	pop	r28
    34f0:	df 91       	pop	r29
    34f2:	08 95       	ret

000034f4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    34f4:	df 93       	push	r29
    34f6:	cf 93       	push	r28
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <LCD_displayStringRowColumn+0x6>
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <LCD_displayStringRowColumn+0x8>
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	89 83       	std	Y+1, r24	; 0x01
    3502:	6a 83       	std	Y+2, r22	; 0x02
    3504:	5c 83       	std	Y+4, r21	; 0x04
    3506:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);          /* GO TO Required LCD cursor location */
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	6a 81       	ldd	r22, Y+2	; 0x02
    350c:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_moveCursor>
	LCD_displayString(Str);            /* Display the string */
    3510:	8b 81       	ldd	r24, Y+3	; 0x03
    3512:	9c 81       	ldd	r25, Y+4	; 0x04
    3514:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
}
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	08 95       	ret

00003526 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    3526:	df 93       	push	r29
    3528:	cf 93       	push	r28
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	62 97       	sbiw	r28, 0x12	; 18
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	f8 94       	cli
    3534:	de bf       	out	0x3e, r29	; 62
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	cd bf       	out	0x3d, r28	; 61
    353a:	9a 8b       	std	Y+18, r25	; 0x12
    353c:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];              /* array (string to hold the ascii result */
	itoa(data,buff,10);      /* use itoa function to convert data to the correspnding ascii,where 10 is the decimal base*/
    353e:	89 89       	ldd	r24, Y+17	; 0x11
    3540:	9a 89       	ldd	r25, Y+18	; 0x12
    3542:	9e 01       	movw	r18, r28
    3544:	2f 5f       	subi	r18, 0xFF	; 255
    3546:	3f 4f       	sbci	r19, 0xFF	; 255
    3548:	b9 01       	movw	r22, r18
    354a:	4a e0       	ldi	r20, 0x0A	; 10
    354c:	50 e0       	ldi	r21, 0x00	; 0
    354e:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <itoa>
	LCD_displayString(buff);  /* Display the string */
    3552:	ce 01       	movw	r24, r28
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	0e 94 0f 1a 	call	0x341e	; 0x341e <LCD_displayString>
}
    355a:	62 96       	adiw	r28, 0x12	; 18
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <clearScreen>:
/*
 * Description :
 * Clear the screen command
 */
void clearScreen(void)
{
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LCD_sendCommand>
}
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <__vector_9>:

/*******************************************************************************
 *                         Interrupt Service routines                          *
 *******************************************************************************/
ISR(TIMER1_OVF_vect)
{
    3580:	1f 92       	push	r1
    3582:	0f 92       	push	r0
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	0f 92       	push	r0
    3588:	11 24       	eor	r1, r1
    358a:	2f 93       	push	r18
    358c:	3f 93       	push	r19
    358e:	4f 93       	push	r20
    3590:	5f 93       	push	r21
    3592:	6f 93       	push	r22
    3594:	7f 93       	push	r23
    3596:	8f 93       	push	r24
    3598:	9f 93       	push	r25
    359a:	af 93       	push	r26
    359c:	bf 93       	push	r27
    359e:	ef 93       	push	r30
    35a0:	ff 93       	push	r31
    35a2:	df 93       	push	r29
    35a4:	cf 93       	push	r28
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
	if ( g_callBackPtr != NULL_PTR)
    35aa:	80 91 58 01 	lds	r24, 0x0158
    35ae:	90 91 59 01 	lds	r25, 0x0159
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	29 f0       	breq	.+10     	; 0x35c0 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    35b6:	e0 91 58 01 	lds	r30, 0x0158
    35ba:	f0 91 59 01 	lds	r31, 0x0159
    35be:	09 95       	icall
	}
}
    35c0:	cf 91       	pop	r28
    35c2:	df 91       	pop	r29
    35c4:	ff 91       	pop	r31
    35c6:	ef 91       	pop	r30
    35c8:	bf 91       	pop	r27
    35ca:	af 91       	pop	r26
    35cc:	9f 91       	pop	r25
    35ce:	8f 91       	pop	r24
    35d0:	7f 91       	pop	r23
    35d2:	6f 91       	pop	r22
    35d4:	5f 91       	pop	r21
    35d6:	4f 91       	pop	r20
    35d8:	3f 91       	pop	r19
    35da:	2f 91       	pop	r18
    35dc:	0f 90       	pop	r0
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	0f 90       	pop	r0
    35e2:	1f 90       	pop	r1
    35e4:	18 95       	reti

000035e6 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    35e6:	1f 92       	push	r1
    35e8:	0f 92       	push	r0
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	0f 92       	push	r0
    35ee:	11 24       	eor	r1, r1
    35f0:	2f 93       	push	r18
    35f2:	3f 93       	push	r19
    35f4:	4f 93       	push	r20
    35f6:	5f 93       	push	r21
    35f8:	6f 93       	push	r22
    35fa:	7f 93       	push	r23
    35fc:	8f 93       	push	r24
    35fe:	9f 93       	push	r25
    3600:	af 93       	push	r26
    3602:	bf 93       	push	r27
    3604:	ef 93       	push	r30
    3606:	ff 93       	push	r31
    3608:	df 93       	push	r29
    360a:	cf 93       	push	r28
    360c:	cd b7       	in	r28, 0x3d	; 61
    360e:	de b7       	in	r29, 0x3e	; 62
	if ( g_callBackPtr != NULL_PTR)
    3610:	80 91 58 01 	lds	r24, 0x0158
    3614:	90 91 59 01 	lds	r25, 0x0159
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	29 f0       	breq	.+10     	; 0x3626 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    361c:	e0 91 58 01 	lds	r30, 0x0158
    3620:	f0 91 59 01 	lds	r31, 0x0159
    3624:	09 95       	icall
	}
}
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	ff 91       	pop	r31
    362c:	ef 91       	pop	r30
    362e:	bf 91       	pop	r27
    3630:	af 91       	pop	r26
    3632:	9f 91       	pop	r25
    3634:	8f 91       	pop	r24
    3636:	7f 91       	pop	r23
    3638:	6f 91       	pop	r22
    363a:	5f 91       	pop	r21
    363c:	4f 91       	pop	r20
    363e:	3f 91       	pop	r19
    3640:	2f 91       	pop	r18
    3642:	0f 90       	pop	r0
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	0f 90       	pop	r0
    3648:	1f 90       	pop	r1
    364a:	18 95       	reti

0000364c <Timer1_init>:
 * 3. Set the compare value if needed ( in ctc mode )
 * 4. Set the timer mode (normal / compare)
 * 5. Enable interrupt
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	00 d0       	rcall	.+0      	; 0x3652 <Timer1_init+0x6>
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
    3656:	9a 83       	std	Y+2, r25	; 0x02
    3658:	89 83       	std	Y+1, r24	; 0x01
	/* set FOC1A for any timer mode except PWM */
	TCCR1A=(1<<FOC1A);
    365a:	ef e4       	ldi	r30, 0x4F	; 79
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	88 e0       	ldi	r24, 0x08	; 8
    3660:	80 83       	st	Z, r24

	/* set timer1 clock */
	TCCR1B=(TCCR1B & 0xF8) | (Config_Ptr->prescalar);
    3662:	ae e4       	ldi	r26, 0x4E	; 78
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	ee e4       	ldi	r30, 0x4E	; 78
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	80 81       	ld	r24, Z
    366c:	98 2f       	mov	r25, r24
    366e:	98 7f       	andi	r25, 0xF8	; 248
    3670:	e9 81       	ldd	r30, Y+1	; 0x01
    3672:	fa 81       	ldd	r31, Y+2	; 0x02
    3674:	84 81       	ldd	r24, Z+4	; 0x04
    3676:	89 2b       	or	r24, r25
    3678:	8c 93       	st	X, r24

	/* set timer1 INIITAL VALUE */
	TCNT1= Config_Ptr->initial_value;
    367a:	ac e4       	ldi	r26, 0x4C	; 76
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	e9 81       	ldd	r30, Y+1	; 0x01
    3680:	fa 81       	ldd	r31, Y+2	; 0x02
    3682:	80 81       	ld	r24, Z
    3684:	91 81       	ldd	r25, Z+1	; 0x01
    3686:	11 96       	adiw	r26, 0x01	; 1
    3688:	9c 93       	st	X, r25
    368a:	8e 93       	st	-X, r24

	if (Config_Ptr->mode == NORMAL_MODE)
    368c:	e9 81       	ldd	r30, Y+1	; 0x01
    368e:	fa 81       	ldd	r31, Y+2	; 0x02
    3690:	85 81       	ldd	r24, Z+5	; 0x05
    3692:	88 23       	and	r24, r24
    3694:	41 f4       	brne	.+16     	; 0x36a6 <Timer1_init+0x5a>
	{
		/*
		 * SET CLOCK   (WGM 13:10 = 0)
		 * ENABLE INTERRUPT MODULE
		 */
		SET_BIT(TIMSK,TOIE1);
    3696:	a9 e5       	ldi	r26, 0x59	; 89
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	e9 e5       	ldi	r30, 0x59	; 89
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	80 81       	ld	r24, Z
    36a0:	84 60       	ori	r24, 0x04	; 4
    36a2:	8c 93       	st	X, r24
    36a4:	1c c0       	rjmp	.+56     	; 0x36de <Timer1_init+0x92>
	}

	else if((Config_Ptr->mode) == COMPARE_MODE)
    36a6:	e9 81       	ldd	r30, Y+1	; 0x01
    36a8:	fa 81       	ldd	r31, Y+2	; 0x02
    36aa:	85 81       	ldd	r24, Z+5	; 0x05
    36ac:	81 30       	cpi	r24, 0x01	; 1
    36ae:	b9 f4       	brne	.+46     	; 0x36de <Timer1_init+0x92>
	{
		TCCR1B|=(1<<WGM12);
    36b0:	ae e4       	ldi	r26, 0x4E	; 78
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	ee e4       	ldi	r30, 0x4E	; 78
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	88 60       	ori	r24, 0x08	; 8
    36bc:	8c 93       	st	X, r24

		/* set timer1 Compare VALUE */
		OCR1A= Config_Ptr->compare_value;
    36be:	aa e4       	ldi	r26, 0x4A	; 74
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	e9 81       	ldd	r30, Y+1	; 0x01
    36c4:	fa 81       	ldd	r31, Y+2	; 0x02
    36c6:	82 81       	ldd	r24, Z+2	; 0x02
    36c8:	93 81       	ldd	r25, Z+3	; 0x03
    36ca:	11 96       	adiw	r26, 0x01	; 1
    36cc:	9c 93       	st	X, r25
    36ce:	8e 93       	st	-X, r24

		/* ENABLE INTERRUPT MODULE */
		SET_BIT(TIMSK,OCIE1A);
    36d0:	a9 e5       	ldi	r26, 0x59	; 89
    36d2:	b0 e0       	ldi	r27, 0x00	; 0
    36d4:	e9 e5       	ldi	r30, 0x59	; 89
    36d6:	f0 e0       	ldi	r31, 0x00	; 0
    36d8:	80 81       	ld	r24, Z
    36da:	80 61       	ori	r24, 0x10	; 16
    36dc:	8c 93       	st	X, r24
	}

}
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	cf 91       	pop	r28
    36e4:	df 91       	pop	r29
    36e6:	08 95       	ret

000036e8 <Timer1_denit>:
/*
 * Description :
 * Function to deinit timer driver
 */
void Timer1_denit(void)
{
    36e8:	df 93       	push	r29
    36ea:	cf 93       	push	r28
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
	/*
	 * NO CLOCK SOURCE ( CS12:10 = 0)
	 */
	TCCR1B &= 0xF8;
    36f0:	ae e4       	ldi	r26, 0x4E	; 78
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	ee e4       	ldi	r30, 0x4E	; 78
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
    36fa:	88 7f       	andi	r24, 0xF8	; 248
    36fc:	8c 93       	st	X, r24
	OCR1A=0;
    36fe:	ea e4       	ldi	r30, 0x4A	; 74
    3700:	f0 e0       	ldi	r31, 0x00	; 0
    3702:	11 82       	std	Z+1, r1	; 0x01
    3704:	10 82       	st	Z, r1
	TCNT1=0;
    3706:	ec e4       	ldi	r30, 0x4C	; 76
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	11 82       	std	Z+1, r1	; 0x01
    370c:	10 82       	st	Z, r1
}
    370e:	cf 91       	pop	r28
    3710:	df 91       	pop	r29
    3712:	08 95       	ret

00003714 <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
    3714:	df 93       	push	r29
    3716:	cf 93       	push	r28
    3718:	00 d0       	rcall	.+0      	; 0x371a <Timer1_setCallBack+0x6>
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62
    371e:	9a 83       	std	Y+2, r25	; 0x02
    3720:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	9a 81       	ldd	r25, Y+2	; 0x02
    3726:	90 93 59 01 	sts	0x0159, r25
    372a:	80 93 58 01 	sts	0x0158, r24
}
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	00 d0       	rcall	.+0      	; 0x373e <UART_init+0x6>
    373e:	00 d0       	rcall	.+0      	; 0x3740 <UART_init+0x8>
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
    3744:	9c 83       	std	Y+4, r25	; 0x04
    3746:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    3748:	1a 82       	std	Y+2, r1	; 0x02
    374a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X=1 FOR Double transmission speed */
	UCSRA=(1<<U2X);
    374c:	eb e2       	ldi	r30, 0x2B	; 43
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	82 e0       	ldi	r24, 0x02	; 2
    3752:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB=(1<<RXEN)|(1<<TXEN);
    3754:	ea e2       	ldi	r30, 0x2A	; 42
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	88 e1       	ldi	r24, 0x18	; 24
    375a:	80 83       	st	Z, r24
	 * USBS    =   number stop bits
	 * UCSZ1:0 =   bits data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/

	SET_BIT(UCSRC,URSEL);
    375c:	a0 e4       	ldi	r26, 0x40	; 64
    375e:	b0 e0       	ldi	r27, 0x00	; 0
    3760:	e0 e4       	ldi	r30, 0x40	; 64
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	80 81       	ld	r24, Z
    3766:	80 68       	ori	r24, 0x80	; 128
    3768:	8c 93       	st	X, r24

	/* insert parity in the bit 4 and bit 5 */
	UCSRC=(UCSRC &0xCF) | ((Config_Ptr->parity) << 4);
    376a:	a0 e4       	ldi	r26, 0x40	; 64
    376c:	b0 e0       	ldi	r27, 0x00	; 0
    376e:	e0 e4       	ldi	r30, 0x40	; 64
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	28 2f       	mov	r18, r24
    3776:	2f 7c       	andi	r18, 0xCF	; 207
    3778:	eb 81       	ldd	r30, Y+3	; 0x03
    377a:	fc 81       	ldd	r31, Y+4	; 0x04
    377c:	81 81       	ldd	r24, Z+1	; 0x01
    377e:	88 2f       	mov	r24, r24
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	82 95       	swap	r24
    3784:	92 95       	swap	r25
    3786:	90 7f       	andi	r25, 0xF0	; 240
    3788:	98 27       	eor	r25, r24
    378a:	80 7f       	andi	r24, 0xF0	; 240
    378c:	98 27       	eor	r25, r24
    378e:	82 2b       	or	r24, r18
    3790:	8c 93       	st	X, r24

	/* insert number of STOP BITs in the  bit 3 */
	UCSRC=(UCSRC &0xF8) | ((Config_Ptr->stop_bit) << 3);
    3792:	a0 e4       	ldi	r26, 0x40	; 64
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	e0 e4       	ldi	r30, 0x40	; 64
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	80 81       	ld	r24, Z
    379c:	28 2f       	mov	r18, r24
    379e:	28 7f       	andi	r18, 0xF8	; 248
    37a0:	eb 81       	ldd	r30, Y+3	; 0x03
    37a2:	fc 81       	ldd	r31, Y+4	; 0x04
    37a4:	82 81       	ldd	r24, Z+2	; 0x02
    37a6:	88 2f       	mov	r24, r24
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	88 0f       	add	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	88 0f       	add	r24, r24
    37b4:	99 1f       	adc	r25, r25
    37b6:	82 2b       	or	r24, r18
    37b8:	8c 93       	st	X, r24

	/* insert number of data BITs in the bit1 , bit2 */
	UCSRC=(UCSRC &0xF6) | ((Config_Ptr->bit_data) << 1);
    37ba:	a0 e4       	ldi	r26, 0x40	; 64
    37bc:	b0 e0       	ldi	r27, 0x00	; 0
    37be:	e0 e4       	ldi	r30, 0x40	; 64
    37c0:	f0 e0       	ldi	r31, 0x00	; 0
    37c2:	80 81       	ld	r24, Z
    37c4:	28 2f       	mov	r18, r24
    37c6:	26 7f       	andi	r18, 0xF6	; 246
    37c8:	eb 81       	ldd	r30, Y+3	; 0x03
    37ca:	fc 81       	ldd	r31, Y+4	; 0x04
    37cc:	80 81       	ld	r24, Z
    37ce:	88 2f       	mov	r24, r24
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	82 2b       	or	r24, r18
    37d8:	8c 93       	st	X, r24


	/* Calculate the UBRR REGISTER VALUE */

	ubrr_value= ((F_CPU / (8 * (Config_Ptr->baud_rate)))-1);
    37da:	eb 81       	ldd	r30, Y+3	; 0x03
    37dc:	fc 81       	ldd	r31, Y+4	; 0x04
    37de:	83 81       	ldd	r24, Z+3	; 0x03
    37e0:	94 81       	ldd	r25, Z+4	; 0x04
    37e2:	a5 81       	ldd	r26, Z+5	; 0x05
    37e4:	b6 81       	ldd	r27, Z+6	; 0x06
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	aa 1f       	adc	r26, r26
    37ec:	bb 1f       	adc	r27, r27
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	aa 1f       	adc	r26, r26
    37f4:	bb 1f       	adc	r27, r27
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	aa 1f       	adc	r26, r26
    37fc:	bb 1f       	adc	r27, r27
    37fe:	9c 01       	movw	r18, r24
    3800:	ad 01       	movw	r20, r26
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	92 e1       	ldi	r25, 0x12	; 18
    3806:	aa e7       	ldi	r26, 0x7A	; 122
    3808:	b0 e0       	ldi	r27, 0x00	; 0
    380a:	bc 01       	movw	r22, r24
    380c:	cd 01       	movw	r24, r26
    380e:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__udivmodsi4>
    3812:	da 01       	movw	r26, r20
    3814:	c9 01       	movw	r24, r18
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	9a 83       	std	Y+2, r25	; 0x02
    381a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH */
	UBRRL= ubrr_value;
    381c:	e9 e2       	ldi	r30, 0x29	; 41
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	80 83       	st	Z, r24
	UBRRH= ubrr_value >> 8;
    3824:	e0 e4       	ldi	r30, 0x40	; 64
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	89 81       	ldd	r24, Y+1	; 0x01
    382a:	9a 81       	ldd	r25, Y+2	; 0x02
    382c:	89 2f       	mov	r24, r25
    382e:	99 27       	eor	r25, r25
    3830:	80 83       	st	Z, r24
}
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	08 95       	ret

00003840 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(uint8 data)
{
    3840:	df 93       	push	r29
    3842:	cf 93       	push	r28
    3844:	0f 92       	push	r0
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));          /*  WAIT until Uart Data Register Empty flag is raised to send data */
    384c:	eb e2       	ldi	r30, 0x2B	; 43
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	80 81       	ld	r24, Z
    3852:	88 2f       	mov	r24, r24
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	80 72       	andi	r24, 0x20	; 32
    3858:	90 70       	andi	r25, 0x00	; 0
    385a:	00 97       	sbiw	r24, 0x00	; 0
    385c:	b9 f3       	breq	.-18     	; 0x384c <UART_sendByte+0xc>
	UDR=data;                                 /* send data  */
    385e:	ec e2       	ldi	r30, 0x2C	; 44
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	80 83       	st	Z, r24

}
    3866:	0f 90       	pop	r0
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	08 95       	ret

0000386e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    386e:	df 93       	push	r29
    3870:	cf 93       	push	r28
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));           /*  wait until receive flag is raised ( wait for unread data) */
    3876:	eb e2       	ldi	r30, 0x2B	; 43
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	88 23       	and	r24, r24
    387e:	dc f7       	brge	.-10     	; 0x3876 <UART_recieveByte+0x8>

	return UDR;                               /* this step made the folLowing
    3880:	ec e2       	ldi	r30, 0x2C	; 44
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	80 81       	ld	r24, Z
	                                             * 1. clear RXCflag
	                                             * 2. read data in UDR   */
}
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	08 95       	ret

0000388c <UART_sendString>:
/*
 * Description :
 * Functional responsible for send string to another UART device.
 */
void UART_sendString(const uint8 *Str)
{
    388c:	df 93       	push	r29
    388e:	cf 93       	push	r28
    3890:	00 d0       	rcall	.+0      	; 0x3892 <UART_sendString+0x6>
    3892:	0f 92       	push	r0
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	9b 83       	std	Y+3, r25	; 0x03
    389a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    389c:	19 82       	std	Y+1, r1	; 0x01
    389e:	0e c0       	rjmp	.+28     	; 0x38bc <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	28 2f       	mov	r18, r24
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	8a 81       	ldd	r24, Y+2	; 0x02
    38a8:	9b 81       	ldd	r25, Y+3	; 0x03
    38aa:	fc 01       	movw	r30, r24
    38ac:	e2 0f       	add	r30, r18
    38ae:	f3 1f       	adc	r31, r19
    38b0:	80 81       	ld	r24, Z
    38b2:	0e 94 20 1c 	call	0x3840	; 0x3840 <UART_sendByte>
		i++;
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	8f 5f       	subi	r24, 0xFF	; 255
    38ba:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i=0;

	while(Str[i] != '\0')
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	9b 81       	ldd	r25, Y+3	; 0x03
    38c6:	fc 01       	movw	r30, r24
    38c8:	e2 0f       	add	r30, r18
    38ca:	f3 1f       	adc	r31, r19
    38cc:	80 81       	ld	r24, Z
    38ce:	88 23       	and	r24, r24
    38d0:	39 f7       	brne	.-50     	; 0x38a0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	****************************************************************/
}
    38d2:	0f 90       	pop	r0
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	08 95       	ret

000038de <UART_recieveString>:
/*
 * Description :
 * Functional responsible for receive string to another UART device.
 */
void UART_recieveString(uint8 *Str)     /*  receive until #  */
{
    38de:	0f 93       	push	r16
    38e0:	1f 93       	push	r17
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	00 d0       	rcall	.+0      	; 0x38e8 <UART_recieveString+0xa>
    38e8:	0f 92       	push	r0
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	9b 83       	std	Y+3, r25	; 0x03
    38f0:	8a 83       	std	Y+2, r24	; 0x02

	/* receive first byte */
	/* then receive the whole string until the '#' */

	uint8 i=0;
    38f2:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	28 2f       	mov	r18, r24
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	8a 81       	ldd	r24, Y+2	; 0x02
    38fc:	9b 81       	ldd	r25, Y+3	; 0x03
    38fe:	8c 01       	movw	r16, r24
    3900:	02 0f       	add	r16, r18
    3902:	13 1f       	adc	r17, r19
    3904:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    3908:	f8 01       	movw	r30, r16
    390a:	80 83       	st	Z, r24
    390c:	0f c0       	rjmp	.+30     	; 0x392c <UART_recieveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    390e:	89 81       	ldd	r24, Y+1	; 0x01
    3910:	8f 5f       	subi	r24, 0xFF	; 255
    3912:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3914:	89 81       	ldd	r24, Y+1	; 0x01
    3916:	28 2f       	mov	r18, r24
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	8a 81       	ldd	r24, Y+2	; 0x02
    391c:	9b 81       	ldd	r25, Y+3	; 0x03
    391e:	8c 01       	movw	r16, r24
    3920:	02 0f       	add	r16, r18
    3922:	13 1f       	adc	r17, r19
    3924:	0e 94 37 1c 	call	0x386e	; 0x386e <UART_recieveByte>
    3928:	f8 01       	movw	r30, r16
    392a:	80 83       	st	Z, r24
	uint8 i=0;
	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	28 2f       	mov	r18, r24
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	8a 81       	ldd	r24, Y+2	; 0x02
    3934:	9b 81       	ldd	r25, Y+3	; 0x03
    3936:	fc 01       	movw	r30, r24
    3938:	e2 0f       	add	r30, r18
    393a:	f3 1f       	adc	r31, r19
    393c:	80 81       	ld	r24, Z
    393e:	83 32       	cpi	r24, 0x23	; 35
    3940:	31 f7       	brne	.-52     	; 0x390e <UART_recieveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i]='\0';
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	28 2f       	mov	r18, r24
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	8a 81       	ldd	r24, Y+2	; 0x02
    394a:	9b 81       	ldd	r25, Y+3	; 0x03
    394c:	fc 01       	movw	r30, r24
    394e:	e2 0f       	add	r30, r18
    3950:	f3 1f       	adc	r31, r19
    3952:	10 82       	st	Z, r1
}
    3954:	0f 90       	pop	r0
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	08 95       	ret

00003964 <__udivmodsi4>:
    3964:	a1 e2       	ldi	r26, 0x21	; 33
    3966:	1a 2e       	mov	r1, r26
    3968:	aa 1b       	sub	r26, r26
    396a:	bb 1b       	sub	r27, r27
    396c:	fd 01       	movw	r30, r26
    396e:	0d c0       	rjmp	.+26     	; 0x398a <__udivmodsi4_ep>

00003970 <__udivmodsi4_loop>:
    3970:	aa 1f       	adc	r26, r26
    3972:	bb 1f       	adc	r27, r27
    3974:	ee 1f       	adc	r30, r30
    3976:	ff 1f       	adc	r31, r31
    3978:	a2 17       	cp	r26, r18
    397a:	b3 07       	cpc	r27, r19
    397c:	e4 07       	cpc	r30, r20
    397e:	f5 07       	cpc	r31, r21
    3980:	20 f0       	brcs	.+8      	; 0x398a <__udivmodsi4_ep>
    3982:	a2 1b       	sub	r26, r18
    3984:	b3 0b       	sbc	r27, r19
    3986:	e4 0b       	sbc	r30, r20
    3988:	f5 0b       	sbc	r31, r21

0000398a <__udivmodsi4_ep>:
    398a:	66 1f       	adc	r22, r22
    398c:	77 1f       	adc	r23, r23
    398e:	88 1f       	adc	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	1a 94       	dec	r1
    3994:	69 f7       	brne	.-38     	; 0x3970 <__udivmodsi4_loop>
    3996:	60 95       	com	r22
    3998:	70 95       	com	r23
    399a:	80 95       	com	r24
    399c:	90 95       	com	r25
    399e:	9b 01       	movw	r18, r22
    39a0:	ac 01       	movw	r20, r24
    39a2:	bd 01       	movw	r22, r26
    39a4:	cf 01       	movw	r24, r30
    39a6:	08 95       	ret

000039a8 <__prologue_saves__>:
    39a8:	2f 92       	push	r2
    39aa:	3f 92       	push	r3
    39ac:	4f 92       	push	r4
    39ae:	5f 92       	push	r5
    39b0:	6f 92       	push	r6
    39b2:	7f 92       	push	r7
    39b4:	8f 92       	push	r8
    39b6:	9f 92       	push	r9
    39b8:	af 92       	push	r10
    39ba:	bf 92       	push	r11
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	ca 1b       	sub	r28, r26
    39d2:	db 0b       	sbc	r29, r27
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	09 94       	ijmp

000039e0 <__epilogue_restores__>:
    39e0:	2a 88       	ldd	r2, Y+18	; 0x12
    39e2:	39 88       	ldd	r3, Y+17	; 0x11
    39e4:	48 88       	ldd	r4, Y+16	; 0x10
    39e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    39e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    39ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    39ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    39f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    39f2:	b9 84       	ldd	r11, Y+9	; 0x09
    39f4:	c8 84       	ldd	r12, Y+8	; 0x08
    39f6:	df 80       	ldd	r13, Y+7	; 0x07
    39f8:	ee 80       	ldd	r14, Y+6	; 0x06
    39fa:	fd 80       	ldd	r15, Y+5	; 0x05
    39fc:	0c 81       	ldd	r16, Y+4	; 0x04
    39fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3a00:	aa 81       	ldd	r26, Y+2	; 0x02
    3a02:	b9 81       	ldd	r27, Y+1	; 0x01
    3a04:	ce 0f       	add	r28, r30
    3a06:	d1 1d       	adc	r29, r1
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	f8 94       	cli
    3a0c:	de bf       	out	0x3e, r29	; 62
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	cd bf       	out	0x3d, r28	; 61
    3a12:	ed 01       	movw	r28, r26
    3a14:	08 95       	ret

00003a16 <itoa>:
    3a16:	fb 01       	movw	r30, r22
    3a18:	9f 01       	movw	r18, r30
    3a1a:	e8 94       	clt
    3a1c:	42 30       	cpi	r20, 0x02	; 2
    3a1e:	c4 f0       	brlt	.+48     	; 0x3a50 <itoa+0x3a>
    3a20:	45 32       	cpi	r20, 0x25	; 37
    3a22:	b4 f4       	brge	.+44     	; 0x3a50 <itoa+0x3a>
    3a24:	4a 30       	cpi	r20, 0x0A	; 10
    3a26:	29 f4       	brne	.+10     	; 0x3a32 <itoa+0x1c>
    3a28:	97 fb       	bst	r25, 7
    3a2a:	1e f4       	brtc	.+6      	; 0x3a32 <itoa+0x1c>
    3a2c:	90 95       	com	r25
    3a2e:	81 95       	neg	r24
    3a30:	9f 4f       	sbci	r25, 0xFF	; 255
    3a32:	64 2f       	mov	r22, r20
    3a34:	77 27       	eor	r23, r23
    3a36:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__udivmodhi4>
    3a3a:	80 5d       	subi	r24, 0xD0	; 208
    3a3c:	8a 33       	cpi	r24, 0x3A	; 58
    3a3e:	0c f0       	brlt	.+2      	; 0x3a42 <itoa+0x2c>
    3a40:	89 5d       	subi	r24, 0xD9	; 217
    3a42:	81 93       	st	Z+, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	a1 f7       	brne	.-24     	; 0x3a32 <itoa+0x1c>
    3a4a:	16 f4       	brtc	.+4      	; 0x3a50 <itoa+0x3a>
    3a4c:	5d e2       	ldi	r21, 0x2D	; 45
    3a4e:	51 93       	st	Z+, r21
    3a50:	10 82       	st	Z, r1
    3a52:	c9 01       	movw	r24, r18
    3a54:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <strrev>

00003a58 <strrev>:
    3a58:	dc 01       	movw	r26, r24
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	67 2f       	mov	r22, r23
    3a5e:	71 91       	ld	r23, Z+
    3a60:	77 23       	and	r23, r23
    3a62:	e1 f7       	brne	.-8      	; 0x3a5c <strrev+0x4>
    3a64:	32 97       	sbiw	r30, 0x02	; 2
    3a66:	04 c0       	rjmp	.+8      	; 0x3a70 <strrev+0x18>
    3a68:	7c 91       	ld	r23, X
    3a6a:	6d 93       	st	X+, r22
    3a6c:	70 83       	st	Z, r23
    3a6e:	62 91       	ld	r22, -Z
    3a70:	ae 17       	cp	r26, r30
    3a72:	bf 07       	cpc	r27, r31
    3a74:	c8 f3       	brcs	.-14     	; 0x3a68 <strrev+0x10>
    3a76:	08 95       	ret

00003a78 <__udivmodhi4>:
    3a78:	aa 1b       	sub	r26, r26
    3a7a:	bb 1b       	sub	r27, r27
    3a7c:	51 e1       	ldi	r21, 0x11	; 17
    3a7e:	07 c0       	rjmp	.+14     	; 0x3a8e <__udivmodhi4_ep>

00003a80 <__udivmodhi4_loop>:
    3a80:	aa 1f       	adc	r26, r26
    3a82:	bb 1f       	adc	r27, r27
    3a84:	a6 17       	cp	r26, r22
    3a86:	b7 07       	cpc	r27, r23
    3a88:	10 f0       	brcs	.+4      	; 0x3a8e <__udivmodhi4_ep>
    3a8a:	a6 1b       	sub	r26, r22
    3a8c:	b7 0b       	sbc	r27, r23

00003a8e <__udivmodhi4_ep>:
    3a8e:	88 1f       	adc	r24, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	5a 95       	dec	r21
    3a94:	a9 f7       	brne	.-22     	; 0x3a80 <__udivmodhi4_loop>
    3a96:	80 95       	com	r24
    3a98:	90 95       	com	r25
    3a9a:	bc 01       	movw	r22, r24
    3a9c:	cd 01       	movw	r24, r26
    3a9e:	08 95       	ret

00003aa0 <_exit>:
    3aa0:	f8 94       	cli

00003aa2 <__stop_program>:
    3aa2:	ff cf       	rjmp	.-2      	; 0x3aa2 <__stop_program>
